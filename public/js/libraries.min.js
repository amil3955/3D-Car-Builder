var THREE={REVISION:"77"};"function"==typeof define&&define.amd?define("three",THREE):"undefined"!=typeof exports&&"undefined"!=typeof module&&(module.exports=THREE),void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52)),void 0===Math.sign&&(Math.sign=function(e){return 0>e?-1:e>0?1:+e}),void 0===Function.prototype.name&&Object.defineProperty(Function.prototype,"name",{get:function(){return this.toString().match(/^\s*function\s*(\S*)\s*\(/)[1]}}),void 0===Object.assign&&!function(){Object.assign=function(e){"use strict";if(void 0===e||null===e)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(e),r=1;r<arguments.length;r++){var n=arguments[r];if(void 0!==n&&null!==n)for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t}}(),Object.assign(THREE,{MOUSE:{LEFT:0,MIDDLE:1,RIGHT:2},CullFaceNone:0,CullFaceBack:1,CullFaceFront:2,CullFaceFrontBack:3,FrontFaceDirectionCW:0,FrontFaceDirectionCCW:1,BasicShadowMap:0,PCFShadowMap:1,PCFSoftShadowMap:2,FrontSide:0,BackSide:1,DoubleSide:2,FlatShading:1,SmoothShading:2,NoColors:0,FaceColors:1,VertexColors:2,NoBlending:0,NormalBlending:1,AdditiveBlending:2,SubtractiveBlending:3,MultiplyBlending:4,CustomBlending:5,AddEquation:100,SubtractEquation:101,ReverseSubtractEquation:102,MinEquation:103,MaxEquation:104,ZeroFactor:200,OneFactor:201,SrcColorFactor:202,OneMinusSrcColorFactor:203,SrcAlphaFactor:204,OneMinusSrcAlphaFactor:205,DstAlphaFactor:206,OneMinusDstAlphaFactor:207,DstColorFactor:208,OneMinusDstColorFactor:209,SrcAlphaSaturateFactor:210,NeverDepth:0,AlwaysDepth:1,LessDepth:2,LessEqualDepth:3,EqualDepth:4,GreaterEqualDepth:5,GreaterDepth:6,NotEqualDepth:7,MultiplyOperation:0,MixOperation:1,AddOperation:2,NoToneMapping:0,LinearToneMapping:1,ReinhardToneMapping:2,Uncharted2ToneMapping:3,CineonToneMapping:4,UVMapping:300,CubeReflectionMapping:301,CubeRefractionMapping:302,EquirectangularReflectionMapping:303,EquirectangularRefractionMapping:304,SphericalReflectionMapping:305,CubeUVReflectionMapping:306,CubeUVRefractionMapping:307,RepeatWrapping:1e3,ClampToEdgeWrapping:1001,MirroredRepeatWrapping:1002,NearestFilter:1003,NearestMipMapNearestFilter:1004,NearestMipMapLinearFilter:1005,LinearFilter:1006,LinearMipMapNearestFilter:1007,LinearMipMapLinearFilter:1008,UnsignedByteType:1009,ByteType:1010,ShortType:1011,UnsignedShortType:1012,IntType:1013,UnsignedIntType:1014,FloatType:1015,HalfFloatType:1025,UnsignedShort4444Type:1016,UnsignedShort5551Type:1017,UnsignedShort565Type:1018,AlphaFormat:1019,RGBFormat:1020,RGBAFormat:1021,LuminanceFormat:1022,LuminanceAlphaFormat:1023,RGBEFormat:THREE.RGBAFormat,DepthFormat:1026,RGB_S3TC_DXT1_Format:2001,RGBA_S3TC_DXT1_Format:2002,RGBA_S3TC_DXT3_Format:2003,RGBA_S3TC_DXT5_Format:2004,RGB_PVRTC_4BPPV1_Format:2100,RGB_PVRTC_2BPPV1_Format:2101,RGBA_PVRTC_4BPPV1_Format:2102,RGBA_PVRTC_2BPPV1_Format:2103,RGB_ETC1_Format:2151,LoopOnce:2200,LoopRepeat:2201,LoopPingPong:2202,InterpolateDiscrete:2300,InterpolateLinear:2301,InterpolateSmooth:2302,ZeroCurvatureEnding:2400,ZeroSlopeEnding:2401,WrapAroundEnding:2402,TrianglesDrawMode:0,TriangleStripDrawMode:1,TriangleFanDrawMode:2,LinearEncoding:3e3,sRGBEncoding:3001,GammaEncoding:3007,RGBEEncoding:3002,LogLuvEncoding:3003,RGBM7Encoding:3004,RGBM16Encoding:3005,RGBDEncoding:3006,BasicDepthPacking:3200,RGBADepthPacking:3201}),THREE.Color=function(e,t,r){return void 0===t&&void 0===r?this.set(e):this.setRGB(e,t,r)},THREE.Color.prototype={constructor:THREE.Color,r:1,g:1,b:1,set:function(e){return e instanceof THREE.Color?this.copy(e):"number"==typeof e?this.setHex(e):"string"==typeof e&&this.setStyle(e),this},setScalar:function(e){this.r=e,this.g=e,this.b=e},setHex:function(e){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(255&e)/255,this},setRGB:function(e,t,r){return this.r=e,this.g=t,this.b=r,this},setHSL:function(){function e(e,t,r){return 0>r&&(r+=1),r>1&&(r-=1),1/6>r?e+6*(t-e)*r:.5>r?t:2/3>r?e+6*(t-e)*(2/3-r):e}return function(t,r,n){if(t=THREE.Math.euclideanModulo(t,1),r=THREE.Math.clamp(r,0,1),n=THREE.Math.clamp(n,0,1),0===r)this.r=this.g=this.b=n;else{var i=.5>=n?n*(1+r):n+r-n*r,a=2*n-i;this.r=e(a,i,t+1/3),this.g=e(a,i,t),this.b=e(a,i,t-1/3)}return this}}(),setStyle:function(e){function t(t){void 0!==t&&parseFloat(t)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}var r;if(r=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(e)){var n,i=r[1],a=r[2];switch(i){case"rgb":case"rgba":if(n=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a))return this.r=Math.min(255,parseInt(n[1],10))/255,this.g=Math.min(255,parseInt(n[2],10))/255,this.b=Math.min(255,parseInt(n[3],10))/255,t(n[5]),this;if(n=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a))return this.r=Math.min(100,parseInt(n[1],10))/100,this.g=Math.min(100,parseInt(n[2],10))/100,this.b=Math.min(100,parseInt(n[3],10))/100,t(n[5]),this;break;case"hsl":case"hsla":if(n=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a)){var o=parseFloat(n[1])/360,s=parseInt(n[2],10)/100,c=parseInt(n[3],10)/100;return t(n[5]),this.setHSL(o,s,c)}}}else if(r=/^\#([A-Fa-f0-9]+)$/.exec(e)){var l=r[1],h=l.length;if(3===h)return this.r=parseInt(l.charAt(0)+l.charAt(0),16)/255,this.g=parseInt(l.charAt(1)+l.charAt(1),16)/255,this.b=parseInt(l.charAt(2)+l.charAt(2),16)/255,this;if(6===h)return this.r=parseInt(l.charAt(0)+l.charAt(1),16)/255,this.g=parseInt(l.charAt(2)+l.charAt(3),16)/255,this.b=parseInt(l.charAt(4)+l.charAt(5),16)/255,this}if(e&&e.length>0){var l=THREE.ColorKeywords[e];void 0!==l?this.setHex(l):console.warn("THREE.Color: Unknown color "+e)}return this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(e){return this.r=e.r,this.g=e.g,this.b=e.b,this},copyGammaToLinear:function(e,t){return void 0===t&&(t=2),this.r=Math.pow(e.r,t),this.g=Math.pow(e.g,t),this.b=Math.pow(e.b,t),this},copyLinearToGamma:function(e,t){void 0===t&&(t=2);var r=t>0?1/t:1;return this.r=Math.pow(e.r,r),this.g=Math.pow(e.g,r),this.b=Math.pow(e.b,r),this},convertGammaToLinear:function(){var e=this.r,t=this.g,r=this.b;return this.r=e*e,this.g=t*t,this.b=r*r,this},convertLinearToGamma:function(){return this.r=Math.sqrt(this.r),this.g=Math.sqrt(this.g),this.b=Math.sqrt(this.b),this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(e){var t,r,n=e||{h:0,s:0,l:0},i=this.r,a=this.g,o=this.b,s=Math.max(i,a,o),c=Math.min(i,a,o),l=(c+s)/2;if(c===s)t=0,r=0;else{var h=s-c;switch(r=.5>=l?h/(s+c):h/(2-s-c),s){case i:t=(a-o)/h+(o>a?6:0);break;case a:t=(o-i)/h+2;break;case o:t=(i-a)/h+4}t/=6}return n.h=t,n.s=r,n.l=l,n},getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:function(e,t,r){var n=this.getHSL();return n.h+=e,n.s+=t,n.l+=r,this.setHSL(n.h,n.s,n.l),this},add:function(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this},addColors:function(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this},addScalar:function(e){return this.r+=e,this.g+=e,this.b+=e,this},multiply:function(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this},multiplyScalar:function(e){return this.r*=e,this.g*=e,this.b*=e,this},lerp:function(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this},equals:function(e){return e.r===this.r&&e.g===this.g&&e.b===this.b},fromArray:function(e,t){return void 0===t&&(t=0),this.r=e[t],this.g=e[t+1],this.b=e[t+2],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}},THREE.ColorKeywords={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},THREE.Quaternion=function(e,t,r,n){this._x=e||0,this._y=t||0,this._z=r||0,this._w=void 0!==n?n:1},THREE.Quaternion.prototype={constructor:THREE.Quaternion,get x(){return this._x},set x(e){this._x=e,this.onChangeCallback()},get y(){return this._y},set y(e){this._y=e,this.onChangeCallback()},get z(){return this._z},set z(e){this._z=e,this.onChangeCallback()},get w(){return this._w},set w(e){this._w=e,this.onChangeCallback()},set:function(e,t,r,n){return this._x=e,this._y=t,this._z=r,this._w=n,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._w)},copy:function(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this.onChangeCallback(),this},setFromEuler:function(e,t){if(e instanceof THREE.Euler==!1)throw new Error("THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var r=Math.cos(e._x/2),n=Math.cos(e._y/2),i=Math.cos(e._z/2),a=Math.sin(e._x/2),o=Math.sin(e._y/2),s=Math.sin(e._z/2),c=e.order;return"XYZ"===c?(this._x=a*n*i+r*o*s,this._y=r*o*i-a*n*s,this._z=r*n*s+a*o*i,this._w=r*n*i-a*o*s):"YXZ"===c?(this._x=a*n*i+r*o*s,this._y=r*o*i-a*n*s,this._z=r*n*s-a*o*i,this._w=r*n*i+a*o*s):"ZXY"===c?(this._x=a*n*i-r*o*s,this._y=r*o*i+a*n*s,this._z=r*n*s+a*o*i,this._w=r*n*i-a*o*s):"ZYX"===c?(this._x=a*n*i-r*o*s,this._y=r*o*i+a*n*s,this._z=r*n*s-a*o*i,this._w=r*n*i+a*o*s):"YZX"===c?(this._x=a*n*i+r*o*s,this._y=r*o*i+a*n*s,this._z=r*n*s-a*o*i,this._w=r*n*i-a*o*s):"XZY"===c&&(this._x=a*n*i-r*o*s,this._y=r*o*i-a*n*s,this._z=r*n*s+a*o*i,this._w=r*n*i+a*o*s),t!==!1&&this.onChangeCallback(),this},setFromAxisAngle:function(e,t){var r=t/2,n=Math.sin(r);return this._x=e.x*n,this._y=e.y*n,this._z=e.z*n,this._w=Math.cos(r),this.onChangeCallback(),this},setFromRotationMatrix:function(e){var t,r=e.elements,n=r[0],i=r[4],a=r[8],o=r[1],s=r[5],c=r[9],l=r[2],h=r[6],u=r[10],d=n+s+u;return d>0?(t=.5/Math.sqrt(d+1),this._w=.25/t,this._x=(h-c)*t,this._y=(a-l)*t,this._z=(o-i)*t):n>s&&n>u?(t=2*Math.sqrt(1+n-s-u),this._w=(h-c)/t,this._x=.25*t,this._y=(i+o)/t,this._z=(a+l)/t):s>u?(t=2*Math.sqrt(1+s-n-u),this._w=(a-l)/t,this._x=(i+o)/t,this._y=.25*t,this._z=(c+h)/t):(t=2*Math.sqrt(1+u-n-s),this._w=(o-i)/t,this._x=(a+l)/t,this._y=(c+h)/t,this._z=.25*t),this.onChangeCallback(),this},setFromUnitVectors:function(){var e,t,r=1e-6;return function(n,i){return void 0===e&&(e=new THREE.Vector3),t=n.dot(i)+1,r>t?(t=0,Math.abs(n.x)>Math.abs(n.z)?e.set(-n.y,n.x,0):e.set(0,-n.z,n.y)):e.crossVectors(n,i),this._x=e.x,this._y=e.y,this._z=e.z,this._w=t,this.normalize()}}(),inverse:function(){return this.conjugate().normalize()},conjugate:function(){return this._x*=-1,this._y*=-1,this._z*=-1,this.onChangeCallback(),this},dot:function(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var e=this.length();return 0===e?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this.onChangeCallback(),this},multiply:function(e,t){return void 0!==t?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(e,t)):this.multiplyQuaternions(this,e)},premultiply:function(e){return this.multiplyQuaternions(e,this)},multiplyQuaternions:function(e,t){var r=e._x,n=e._y,i=e._z,a=e._w,o=t._x,s=t._y,c=t._z,l=t._w;return this._x=r*l+a*o+n*c-i*s,this._y=n*l+a*s+i*o-r*c,this._z=i*l+a*c+r*s-n*o,this._w=a*l-r*o-n*s-i*c,this.onChangeCallback(),this},slerp:function(e,t){if(0===t)return this;if(1===t)return this.copy(e);var r=this._x,n=this._y,i=this._z,a=this._w,o=a*e._w+r*e._x+n*e._y+i*e._z;if(0>o?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,o=-o):this.copy(e),o>=1)return this._w=a,this._x=r,this._y=n,this._z=i,this;var s=Math.sqrt(1-o*o);if(Math.abs(s)<.001)return this._w=.5*(a+this._w),this._x=.5*(r+this._x),this._y=.5*(n+this._y),this._z=.5*(i+this._z),this;var c=Math.atan2(s,o),l=Math.sin((1-t)*c)/s,h=Math.sin(t*c)/s;return this._w=a*l+this._w*h,this._x=r*l+this._x*h,this._y=n*l+this._y*h,this._z=i*l+this._z*h,this.onChangeCallback(),this},equals:function(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w},fromArray:function(e,t){return void 0===t&&(t=0),this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this.onChangeCallback(),this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e},onChange:function(e){return this.onChangeCallback=e,this},onChangeCallback:function(){}},Object.assign(THREE.Quaternion,{slerp:function(e,t,r,n){return r.copy(e).slerp(t,n)},slerpFlat:function(e,t,r,n,i,a,o){var s=r[n+0],c=r[n+1],l=r[n+2],h=r[n+3],u=i[a+0],d=i[a+1],p=i[a+2],f=i[a+3];if(h!==f||s!==u||c!==d||l!==p){var E=1-o,m=s*u+c*d+l*p+h*f,g=m>=0?1:-1,v=1-m*m;if(v>Number.EPSILON){var T=Math.sqrt(v),y=Math.atan2(T,m*g);E=Math.sin(E*y)/T,o=Math.sin(o*y)/T}var R=o*g;if(s=s*E+u*R,c=c*E+d*R,l=l*E+p*R,h=h*E+f*R,E===1-o){var x=1/Math.sqrt(s*s+c*c+l*l+h*h);s*=x,c*=x,l*=x,h*=x}}e[t]=s,e[t+1]=c,e[t+2]=l,e[t+3]=h}}),THREE.Vector2=function(e,t){this.x=e||0,this.y=t||0},THREE.Vector2.prototype={constructor:THREE.Vector2,get width(){return this.x},set width(e){this.x=e},get height(){return this.y},set height(e){this.y=e},set:function(e,t){return this.x=e,this.y=t,this},setScalar:function(e){return this.x=e,this.y=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(e){return this.x=e.x,this.y=e.y,this},add:function(e,t){return void 0!==t?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this)},addScalar:function(e){return this.x+=e,this.y+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this},sub:function(e,t){return void 0!==t?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this)},subScalar:function(e){return this.x-=e,this.y-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this},multiply:function(e){return this.x*=e.x,this.y*=e.y,this},multiplyScalar:function(e){return isFinite(e)?(this.x*=e,this.y*=e):(this.x=0,this.y=0),this},divide:function(e){return this.x/=e.x,this.y/=e.y,this},divideScalar:function(e){return this.multiplyScalar(1/e)},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this},clampScalar:function(){var e,t;return function(r,n){return void 0===e&&(e=new THREE.Vector2,t=new THREE.Vector2),e.set(r,r),t.set(n,n),this.clamp(e,t)}}(),clampLength:function(e,t){var r=this.length();return this.multiplyScalar(Math.max(e,Math.min(t,r))/r)},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this},negate:function(){return this.x=-this.x,this.y=-this.y,this},dot:function(e){return this.x*e.x+this.y*e.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length())},angle:function(){var e=Math.atan2(this.y,this.x);return 0>e&&(e+=2*Math.PI),e},distanceTo:function(e){return Math.sqrt(this.distanceToSquared(e))},distanceToSquared:function(e){var t=this.x-e.x,r=this.y-e.y;return t*t+r*r},setLength:function(e){return this.multiplyScalar(e/this.length())},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this},lerpVectors:function(e,t,r){return this.subVectors(t,e).multiplyScalar(r).add(e)},equals:function(e){return e.x===this.x&&e.y===this.y},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e},fromAttribute:function(e,t,r){return void 0===r&&(r=0),t=t*e.itemSize+r,this.x=e.array[t],this.y=e.array[t+1],this},rotateAround:function(e,t){var r=Math.cos(t),n=Math.sin(t),i=this.x-e.x,a=this.y-e.y;return this.x=i*r-a*n+e.x,this.y=i*n+a*r+e.y,this}},THREE.Vector3=function(e,t,r){this.x=e||0,this.y=t||0,this.z=r||0},THREE.Vector3.prototype={constructor:THREE.Vector3,set:function(e,t,r){return this.x=e,this.y=t,this.z=r,this},setScalar:function(e){return this.x=e,this.y=e,this.z=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setZ:function(e){return this.z=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this},add:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this)},addScalar:function(e){return this.x+=e,this.y+=e,this.z+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this},sub:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this)},subScalar:function(e){return this.x-=e,this.y-=e,this.z-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this},multiply:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(e,t)):(this.x*=e.x,this.y*=e.y,this.z*=e.z,this)},multiplyScalar:function(e){return isFinite(e)?(this.x*=e,this.y*=e,this.z*=e):(this.x=0,this.y=0,this.z=0),this},multiplyVectors:function(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this},applyEuler:function(){var e;return function(t){return t instanceof THREE.Euler==!1&&console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),void 0===e&&(e=new THREE.Quaternion),this.applyQuaternion(e.setFromEuler(t))}}(),applyAxisAngle:function(){var e;return function(t,r){return void 0===e&&(e=new THREE.Quaternion),this.applyQuaternion(e.setFromAxisAngle(t,r))}}(),applyMatrix3:function(e){var t=this.x,r=this.y,n=this.z,i=e.elements;return this.x=i[0]*t+i[3]*r+i[6]*n,this.y=i[1]*t+i[4]*r+i[7]*n,this.z=i[2]*t+i[5]*r+i[8]*n,this},applyMatrix4:function(e){var t=this.x,r=this.y,n=this.z,i=e.elements;return this.x=i[0]*t+i[4]*r+i[8]*n+i[12],this.y=i[1]*t+i[5]*r+i[9]*n+i[13],this.z=i[2]*t+i[6]*r+i[10]*n+i[14],this},applyProjection:function(e){var t=this.x,r=this.y,n=this.z,i=e.elements,a=1/(i[3]*t+i[7]*r+i[11]*n+i[15]);return this.x=(i[0]*t+i[4]*r+i[8]*n+i[12])*a,this.y=(i[1]*t+i[5]*r+i[9]*n+i[13])*a,this.z=(i[2]*t+i[6]*r+i[10]*n+i[14])*a,this},applyQuaternion:function(e){var t=this.x,r=this.y,n=this.z,i=e.x,a=e.y,o=e.z,s=e.w,c=s*t+a*n-o*r,l=s*r+o*t-i*n,h=s*n+i*r-a*t,u=-i*t-a*r-o*n;return this.x=c*s+u*-i+l*-o-h*-a,this.y=l*s+u*-a+h*-i-c*-o,this.z=h*s+u*-o+c*-a-l*-i,this},project:function(){var e;return function(t){return void 0===e&&(e=new THREE.Matrix4),e.multiplyMatrices(t.projectionMatrix,e.getInverse(t.matrixWorld)),this.applyProjection(e)}}(),unproject:function(){var e;return function(t){return void 0===e&&(e=new THREE.Matrix4),e.multiplyMatrices(t.matrixWorld,e.getInverse(t.projectionMatrix)),this.applyProjection(e)}}(),transformDirection:function(e){var t=this.x,r=this.y,n=this.z,i=e.elements;return this.x=i[0]*t+i[4]*r+i[8]*n,this.y=i[1]*t+i[5]*r+i[9]*n,this.z=i[2]*t+i[6]*r+i[10]*n,this.normalize()},divide:function(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this},divideScalar:function(e){return this.multiplyScalar(1/e)},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this},clampScalar:function(){var e,t;return function(r,n){return void 0===e&&(e=new THREE.Vector3,t=new THREE.Vector3),e.set(r,r,r),t.set(n,n,n),this.clamp(e,t)}}(),clampLength:function(e,t){var r=this.length();return this.multiplyScalar(Math.max(e,Math.min(t,r))/r)},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this},dot:function(e){return this.x*e.x+this.y*e.y+this.z*e.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length())},setLength:function(e){return this.multiplyScalar(e/this.length())},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this},lerpVectors:function(e,t,r){return this.subVectors(t,e).multiplyScalar(r).add(e)},cross:function(e,t){if(void 0!==t)return console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(e,t);var r=this.x,n=this.y,i=this.z;return this.x=n*e.z-i*e.y,this.y=i*e.x-r*e.z,this.z=r*e.y-n*e.x,this},crossVectors:function(e,t){var r=e.x,n=e.y,i=e.z,a=t.x,o=t.y,s=t.z;return this.x=n*s-i*o,this.y=i*a-r*s,this.z=r*o-n*a,this},projectOnVector:function(){var e,t;return function(r){return void 0===e&&(e=new THREE.Vector3),e.copy(r).normalize(),t=this.dot(e),this.copy(e).multiplyScalar(t)}}(),projectOnPlane:function(){var e;return function(t){return void 0===e&&(e=new THREE.Vector3),e.copy(this).projectOnVector(t),this.sub(e)}}(),reflect:function(){var e;return function(t){return void 0===e&&(e=new THREE.Vector3),this.sub(e.copy(t).multiplyScalar(2*this.dot(t)))}}(),angleTo:function(e){var t=this.dot(e)/Math.sqrt(this.lengthSq()*e.lengthSq());return Math.acos(THREE.Math.clamp(t,-1,1))},distanceTo:function(e){return Math.sqrt(this.distanceToSquared(e))},distanceToSquared:function(e){var t=this.x-e.x,r=this.y-e.y,n=this.z-e.z;return t*t+r*r+n*n},setFromSpherical:function(e){var t=Math.sin(e.phi)*e.radius;return this.x=t*Math.sin(e.theta),this.y=Math.cos(e.phi)*e.radius,this.z=t*Math.cos(e.theta),this},setFromMatrixPosition:function(e){return this.setFromMatrixColumn(e,3)},setFromMatrixScale:function(e){var t=this.setFromMatrixColumn(e,0).length(),r=this.setFromMatrixColumn(e,1).length(),n=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=r,this.z=n,this},setFromMatrixColumn:function(e,t){if("number"==typeof e){console.warn("THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).");var r=e;e=t,t=r}return this.fromArray(e.elements,4*t)},equals:function(e){return e.x===this.x&&e.y===this.y&&e.z===this.z},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this.z=e[t+2],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e},fromAttribute:function(e,t,r){return void 0===r&&(r=0),t=t*e.itemSize+r,this.x=e.array[t],this.y=e.array[t+1],this.z=e.array[t+2],this}},THREE.Vector4=function(e,t,r,n){this.x=e||0,this.y=t||0,this.z=r||0,this.w=void 0!==n?n:1},THREE.Vector4.prototype={constructor:THREE.Vector4,set:function(e,t,r,n){return this.x=e,this.y=t,this.z=r,this.w=n,this},setScalar:function(e){return this.x=e,this.y=e,this.z=e,this.w=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setZ:function(e){return this.z=e,this},setW:function(e){return this.w=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=void 0!==e.w?e.w:1,this},add:function(e,t){return void 0!==t?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this)},addScalar:function(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this},sub:function(e,t){return void 0!==t?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this)},subScalar:function(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this},multiplyScalar:function(e){return isFinite(e)?(this.x*=e,this.y*=e,this.z*=e,this.w*=e):(this.x=0,this.y=0,this.z=0,this.w=0),this},applyMatrix4:function(e){var t=this.x,r=this.y,n=this.z,i=this.w,a=e.elements;return this.x=a[0]*t+a[4]*r+a[8]*n+a[12]*i,this.y=a[1]*t+a[5]*r+a[9]*n+a[13]*i,this.z=a[2]*t+a[6]*r+a[10]*n+a[14]*i,this.w=a[3]*t+a[7]*r+a[11]*n+a[15]*i,this},divideScalar:function(e){return this.multiplyScalar(1/e)},setAxisAngleFromQuaternion:function(e){this.w=2*Math.acos(e.w);var t=Math.sqrt(1-e.w*e.w);return 1e-4>t?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this},setAxisAngleFromRotationMatrix:function(e){var t,r,n,i,a=.01,o=.1,s=e.elements,c=s[0],l=s[4],h=s[8],u=s[1],d=s[5],p=s[9],f=s[2],E=s[6],m=s[10];if(Math.abs(l-u)<a&&Math.abs(h-f)<a&&Math.abs(p-E)<a){if(Math.abs(l+u)<o&&Math.abs(h+f)<o&&Math.abs(p+E)<o&&Math.abs(c+d+m-3)<o)return this.set(1,0,0,0),this;t=Math.PI;var g=(c+1)/2,v=(d+1)/2,T=(m+1)/2,y=(l+u)/4,R=(h+f)/4,x=(p+E)/4;return g>v&&g>T?a>g?(r=0,n=.707106781,i=.707106781):(r=Math.sqrt(g),n=y/r,i=R/r):v>T?a>v?(r=.707106781,n=0,i=.707106781):(n=Math.sqrt(v),r=y/n,i=x/n):a>T?(r=.707106781,n=.707106781,i=0):(i=Math.sqrt(T),r=R/i,n=x/i),this.set(r,n,i,t),this}var H=Math.sqrt((E-p)*(E-p)+(h-f)*(h-f)+(u-l)*(u-l));return Math.abs(H)<.001&&(H=1),this.x=(E-p)/H,this.y=(h-f)/H,this.z=(u-l)/H,this.w=Math.acos((c+d+m-1)/2),this},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this.w=Math.max(e.w,Math.min(t.w,this.w)),this},clampScalar:function(){var e,t;return function(r,n){return void 0===e&&(e=new THREE.Vector4,t=new THREE.Vector4),e.set(r,r,r,r),t.set(n,n,n,n),this.clamp(e,t)}}(),floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),
this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this},dot:function(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length())},setLength:function(e){return this.multiplyScalar(e/this.length())},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this},lerpVectors:function(e,t,r){return this.subVectors(t,e).multiplyScalar(r).add(e)},equals:function(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e},fromAttribute:function(e,t,r){return void 0===r&&(r=0),t=t*e.itemSize+r,this.x=e.array[t],this.y=e.array[t+1],this.z=e.array[t+2],this.w=e.array[t+3],this}},THREE.Euler=function(e,t,r,n){this._x=e||0,this._y=t||0,this._z=r||0,this._order=n||THREE.Euler.DefaultOrder},THREE.Euler.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"],THREE.Euler.DefaultOrder="XYZ",THREE.Euler.prototype={constructor:THREE.Euler,get x(){return this._x},set x(e){this._x=e,this.onChangeCallback()},get y(){return this._y},set y(e){this._y=e,this.onChangeCallback()},get z(){return this._z},set z(e){this._z=e,this.onChangeCallback()},get order(){return this._order},set order(e){this._order=e,this.onChangeCallback()},set:function(e,t,r,n){return this._x=e,this._y=t,this._z=r,this._order=n||this._order,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._order)},copy:function(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this.onChangeCallback(),this},setFromRotationMatrix:function(e,t,r){var n=THREE.Math.clamp,i=e.elements,a=i[0],o=i[4],s=i[8],c=i[1],l=i[5],h=i[9],u=i[2],d=i[6],p=i[10];return t=t||this._order,"XYZ"===t?(this._y=Math.asin(n(s,-1,1)),Math.abs(s)<.99999?(this._x=Math.atan2(-h,p),this._z=Math.atan2(-o,a)):(this._x=Math.atan2(d,l),this._z=0)):"YXZ"===t?(this._x=Math.asin(-n(h,-1,1)),Math.abs(h)<.99999?(this._y=Math.atan2(s,p),this._z=Math.atan2(c,l)):(this._y=Math.atan2(-u,a),this._z=0)):"ZXY"===t?(this._x=Math.asin(n(d,-1,1)),Math.abs(d)<.99999?(this._y=Math.atan2(-u,p),this._z=Math.atan2(-o,l)):(this._y=0,this._z=Math.atan2(c,a))):"ZYX"===t?(this._y=Math.asin(-n(u,-1,1)),Math.abs(u)<.99999?(this._x=Math.atan2(d,p),this._z=Math.atan2(c,a)):(this._x=0,this._z=Math.atan2(-o,l))):"YZX"===t?(this._z=Math.asin(n(c,-1,1)),Math.abs(c)<.99999?(this._x=Math.atan2(-h,l),this._y=Math.atan2(-u,a)):(this._x=0,this._y=Math.atan2(s,p))):"XZY"===t?(this._z=Math.asin(-n(o,-1,1)),Math.abs(o)<.99999?(this._x=Math.atan2(d,l),this._y=Math.atan2(s,a)):(this._x=Math.atan2(-h,p),this._y=0)):console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: "+t),this._order=t,r!==!1&&this.onChangeCallback(),this},setFromQuaternion:function(){var e;return function(t,r,n){return void 0===e&&(e=new THREE.Matrix4),e.makeRotationFromQuaternion(t),this.setFromRotationMatrix(e,r,n)}}(),setFromVector3:function(e,t){return this.set(e.x,e.y,e.z,t||this._order)},reorder:function(){var e=new THREE.Quaternion;return function(t){return e.setFromEuler(this),this.setFromQuaternion(e,t)}}(),equals:function(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order},fromArray:function(e){return this._x=e[0],this._y=e[1],this._z=e[2],void 0!==e[3]&&(this._order=e[3]),this.onChangeCallback(),this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e},toVector3:function(e){return e?e.set(this._x,this._y,this._z):new THREE.Vector3(this._x,this._y,this._z)},onChange:function(e){return this.onChangeCallback=e,this},onChangeCallback:function(){}},THREE.Line3=function(e,t){this.start=void 0!==e?e:new THREE.Vector3,this.end=void 0!==t?t:new THREE.Vector3},THREE.Line3.prototype={constructor:THREE.Line3,set:function(e,t){return this.start.copy(e),this.end.copy(t),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.start.copy(e.start),this.end.copy(e.end),this},center:function(e){var t=e||new THREE.Vector3;return t.addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(e){var t=e||new THREE.Vector3;return t.subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(e,t){var r=t||new THREE.Vector3;return this.delta(r).multiplyScalar(e).add(this.start)},closestPointToPointParameter:function(){var e=new THREE.Vector3,t=new THREE.Vector3;return function(r,n){e.subVectors(r,this.start),t.subVectors(this.end,this.start);var i=t.dot(t),a=t.dot(e),o=a/i;return n&&(o=THREE.Math.clamp(o,0,1)),o}}(),closestPointToPoint:function(e,t,r){var n=this.closestPointToPointParameter(e,t),i=r||new THREE.Vector3;return this.delta(i).multiplyScalar(n).add(this.start)},applyMatrix4:function(e){return this.start.applyMatrix4(e),this.end.applyMatrix4(e),this},equals:function(e){return e.start.equals(this.start)&&e.end.equals(this.end)}},THREE.Box2=function(e,t){this.min=void 0!==e?e:new THREE.Vector2(+(1/0),+(1/0)),this.max=void 0!==t?t:new THREE.Vector2(-(1/0),-(1/0))},THREE.Box2.prototype={constructor:THREE.Box2,set:function(e,t){return this.min.copy(e),this.max.copy(t),this},setFromPoints:function(e){this.makeEmpty();for(var t=0,r=e.length;r>t;t++)this.expandByPoint(e[t]);return this},setFromCenterAndSize:function(){var e=new THREE.Vector2;return function(t,r){var n=e.copy(r).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.min.copy(e.min),this.max.copy(e.max),this},makeEmpty:function(){return this.min.x=this.min.y=+(1/0),this.max.x=this.max.y=-(1/0),this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},center:function(e){var t=e||new THREE.Vector2;return t.addVectors(this.min,this.max).multiplyScalar(.5)},size:function(e){var t=e||new THREE.Vector2;return t.subVectors(this.max,this.min)},expandByPoint:function(e){return this.min.min(e),this.max.max(e),this},expandByVector:function(e){return this.min.sub(e),this.max.add(e),this},expandByScalar:function(e){return this.min.addScalar(-e),this.max.addScalar(e),this},containsPoint:function(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y)},containsBox:function(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y},getParameter:function(e,t){var r=t||new THREE.Vector2;return r.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y)},clampPoint:function(e,t){var r=t||new THREE.Vector2;return r.copy(e).clamp(this.min,this.max)},distanceToPoint:function(){var e=new THREE.Vector2;return function(t){var r=e.copy(t).clamp(this.min,this.max);return r.sub(t).length()}}(),intersect:function(e){return this.min.max(e.min),this.max.min(e.max),this},union:function(e){return this.min.min(e.min),this.max.max(e.max),this},translate:function(e){return this.min.add(e),this.max.add(e),this},equals:function(e){return e.min.equals(this.min)&&e.max.equals(this.max)}},THREE.Box3=function(e,t){this.min=void 0!==e?e:new THREE.Vector3(+(1/0),+(1/0),+(1/0)),this.max=void 0!==t?t:new THREE.Vector3(-(1/0),-(1/0),-(1/0))},THREE.Box3.prototype={constructor:THREE.Box3,set:function(e,t){return this.min.copy(e),this.max.copy(t),this},setFromArray:function(e){for(var t=+(1/0),r=+(1/0),n=+(1/0),i=-(1/0),a=-(1/0),o=-(1/0),s=0,c=e.length;c>s;s+=3){var l=e[s],h=e[s+1],u=e[s+2];t>l&&(t=l),r>h&&(r=h),n>u&&(n=u),l>i&&(i=l),h>a&&(a=h),u>o&&(o=u)}this.min.set(t,r,n),this.max.set(i,a,o)},setFromPoints:function(e){this.makeEmpty();for(var t=0,r=e.length;r>t;t++)this.expandByPoint(e[t]);return this},setFromCenterAndSize:function(){var e=new THREE.Vector3;return function(t,r){var n=e.copy(r).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}}(),setFromObject:function(){var e=new THREE.Vector3;return function(t){var r=this;return t.updateMatrixWorld(!0),this.makeEmpty(),t.traverse(function(t){var n=t.geometry;if(void 0!==n)if(n instanceof THREE.Geometry)for(var i=n.vertices,a=0,o=i.length;o>a;a++)e.copy(i[a]),e.applyMatrix4(t.matrixWorld),r.expandByPoint(e);else if(n instanceof THREE.BufferGeometry&&void 0!==n.attributes.position)for(var s=n.attributes.position.array,a=0,o=s.length;o>a;a+=3)e.fromArray(s,a),e.applyMatrix4(t.matrixWorld),r.expandByPoint(e)}),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.min.copy(e.min),this.max.copy(e.max),this},makeEmpty:function(){return this.min.x=this.min.y=this.min.z=+(1/0),this.max.x=this.max.y=this.max.z=-(1/0),this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},center:function(e){var t=e||new THREE.Vector3;return t.addVectors(this.min,this.max).multiplyScalar(.5)},size:function(e){var t=e||new THREE.Vector3;return t.subVectors(this.max,this.min)},expandByPoint:function(e){return this.min.min(e),this.max.max(e),this},expandByVector:function(e){return this.min.sub(e),this.max.add(e),this},expandByScalar:function(e){return this.min.addScalar(-e),this.max.addScalar(e),this},containsPoint:function(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z)},containsBox:function(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z},getParameter:function(e,t){var r=t||new THREE.Vector3;return r.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)},intersectsSphere:function(){var e;return function(t){return void 0===e&&(e=new THREE.Vector3),this.clampPoint(t.center,e),e.distanceToSquared(t.center)<=t.radius*t.radius}}(),intersectsPlane:function(e){var t,r;return e.normal.x>0?(t=e.normal.x*this.min.x,r=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,r=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,r+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,r+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,r+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,r+=e.normal.z*this.min.z),t<=e.constant&&r>=e.constant},clampPoint:function(e,t){var r=t||new THREE.Vector3;return r.copy(e).clamp(this.min,this.max)},distanceToPoint:function(){var e=new THREE.Vector3;return function(t){var r=e.copy(t).clamp(this.min,this.max);return r.sub(t).length()}}(),getBoundingSphere:function(){var e=new THREE.Vector3;return function(t){var r=t||new THREE.Sphere;return r.center=this.center(),r.radius=.5*this.size(e).length(),r}}(),intersect:function(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this},union:function(e){return this.min.min(e.min),this.max.max(e.max),this},applyMatrix4:function(){var e=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];return function(t){return this.isEmpty()?this:(e[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),e[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),e[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),e[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),e[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),e[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),e[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),e[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(e),this)}}(),translate:function(e){return this.min.add(e),this.max.add(e),this},equals:function(e){return e.min.equals(this.min)&&e.max.equals(this.max)}},THREE.Matrix3=function(){this.elements=new Float32Array([1,0,0,0,1,0,0,0,1]),arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")},THREE.Matrix3.prototype={constructor:THREE.Matrix3,set:function(e,t,r,n,i,a,o,s,c){var l=this.elements;return l[0]=e,l[1]=n,l[2]=o,l[3]=t,l[4]=i,l[5]=s,l[6]=r,l[7]=a,l[8]=c,this},identity:function(){return this.set(1,0,0,0,1,0,0,0,1),this},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(e){var t=e.elements;return this.set(t[0],t[3],t[6],t[1],t[4],t[7],t[2],t[5],t[8]),this},setFromMatrix4:function(e){var t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this},applyToVector3Array:function(){var e;return function(t,r,n){void 0===e&&(e=new THREE.Vector3),void 0===r&&(r=0),void 0===n&&(n=t.length);for(var i=0,a=r;n>i;i+=3,a+=3)e.fromArray(t,a),e.applyMatrix3(this),e.toArray(t,a);return t}}(),applyToBuffer:function(){var e;return function(t,r,n){void 0===e&&(e=new THREE.Vector3),void 0===r&&(r=0),void 0===n&&(n=t.length/t.itemSize);for(var i=0,a=r;n>i;i++,a++)e.x=t.getX(a),e.y=t.getY(a),e.z=t.getZ(a),e.applyMatrix3(this),t.setXYZ(e.x,e.y,e.z);return t}}(),multiplyScalar:function(e){var t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this},determinant:function(){var e=this.elements,t=e[0],r=e[1],n=e[2],i=e[3],a=e[4],o=e[5],s=e[6],c=e[7],l=e[8];return t*a*l-t*o*c-r*i*l+r*o*s+n*i*c-n*a*s},getInverse:function(e,t){e instanceof THREE.Matrix4&&console.error("THREE.Matrix3.getInverse no longer takes a Matrix4 argument.");var r=e.elements,n=this.elements,i=r[0],a=r[1],o=r[2],s=r[3],c=r[4],l=r[5],h=r[6],u=r[7],d=r[8],p=d*c-l*u,f=l*h-d*s,E=u*s-c*h,m=i*p+a*f+o*E;if(0===m){var g="THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0";if(t)throw new Error(g);return console.warn(g),this.identity()}var v=1/m;return n[0]=p*v,n[1]=(o*u-d*a)*v,n[2]=(l*a-o*c)*v,n[3]=f*v,n[4]=(d*i-o*h)*v,n[5]=(o*s-l*i)*v,n[6]=E*v,n[7]=(a*h-u*i)*v,n[8]=(c*i-a*s)*v,this},transpose:function(){var e,t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this},flattenToArrayOffset:function(e,t){return console.warn("THREE.Matrix3: .flattenToArrayOffset is deprecated - just use .toArray instead."),this.toArray(e,t)},getNormalMatrix:function(e){return this.setFromMatrix4(e).getInverse(this).transpose()},transposeIntoArray:function(e){var t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this},fromArray:function(e){return this.elements.set(e),this},toArray:function(e,t){void 0===e&&(e=[]),void 0===t&&(t=0);var r=this.elements;return e[t]=r[0],e[t+1]=r[1],e[t+2]=r[2],e[t+3]=r[3],e[t+4]=r[4],e[t+5]=r[5],e[t+6]=r[6],e[t+7]=r[7],e[t+8]=r[8],e}},THREE.Matrix4=function(){this.elements=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]),arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")},THREE.Matrix4.prototype={constructor:THREE.Matrix4,set:function(e,t,r,n,i,a,o,s,c,l,h,u,d,p,f,E){var m=this.elements;return m[0]=e,m[4]=t,m[8]=r,m[12]=n,m[1]=i,m[5]=a,m[9]=o,m[13]=s,m[2]=c,m[6]=l,m[10]=h,m[14]=u,m[3]=d,m[7]=p,m[11]=f,m[15]=E,this},identity:function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},clone:function(){return(new THREE.Matrix4).fromArray(this.elements)},copy:function(e){return this.elements.set(e.elements),this},copyPosition:function(e){var t=this.elements,r=e.elements;return t[12]=r[12],t[13]=r[13],t[14]=r[14],this},extractBasis:function(e,t,r){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),r.setFromMatrixColumn(this,2),this},makeBasis:function(e,t,r){return this.set(e.x,t.x,r.x,0,e.y,t.y,r.y,0,e.z,t.z,r.z,0,0,0,0,1),this},extractRotation:function(){var e;return function(t){void 0===e&&(e=new THREE.Vector3);var r=this.elements,n=t.elements,i=1/e.setFromMatrixColumn(t,0).length(),a=1/e.setFromMatrixColumn(t,1).length(),o=1/e.setFromMatrixColumn(t,2).length();return r[0]=n[0]*i,r[1]=n[1]*i,r[2]=n[2]*i,r[4]=n[4]*a,r[5]=n[5]*a,r[6]=n[6]*a,r[8]=n[8]*o,r[9]=n[9]*o,r[10]=n[10]*o,this}}(),makeRotationFromEuler:function(e){e instanceof THREE.Euler==!1&&console.error("THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var t=this.elements,r=e.x,n=e.y,i=e.z,a=Math.cos(r),o=Math.sin(r),s=Math.cos(n),c=Math.sin(n),l=Math.cos(i),h=Math.sin(i);if("XYZ"===e.order){var u=a*l,d=a*h,p=o*l,f=o*h;t[0]=s*l,t[4]=-s*h,t[8]=c,t[1]=d+p*c,t[5]=u-f*c,t[9]=-o*s,t[2]=f-u*c,t[6]=p+d*c,t[10]=a*s}else if("YXZ"===e.order){var E=s*l,m=s*h,g=c*l,v=c*h;t[0]=E+v*o,t[4]=g*o-m,t[8]=a*c,t[1]=a*h,t[5]=a*l,t[9]=-o,t[2]=m*o-g,t[6]=v+E*o,t[10]=a*s}else if("ZXY"===e.order){var E=s*l,m=s*h,g=c*l,v=c*h;t[0]=E-v*o,t[4]=-a*h,t[8]=g+m*o,t[1]=m+g*o,t[5]=a*l,t[9]=v-E*o,t[2]=-a*c,t[6]=o,t[10]=a*s}else if("ZYX"===e.order){var u=a*l,d=a*h,p=o*l,f=o*h;t[0]=s*l,t[4]=p*c-d,t[8]=u*c+f,t[1]=s*h,t[5]=f*c+u,t[9]=d*c-p,t[2]=-c,t[6]=o*s,t[10]=a*s}else if("YZX"===e.order){var T=a*s,y=a*c,R=o*s,x=o*c;t[0]=s*l,t[4]=x-T*h,t[8]=R*h+y,t[1]=h,t[5]=a*l,t[9]=-o*l,t[2]=-c*l,t[6]=y*h+R,t[10]=T-x*h}else if("XZY"===e.order){var T=a*s,y=a*c,R=o*s,x=o*c;t[0]=s*l,t[4]=-h,t[8]=c*l,t[1]=T*h+x,t[5]=a*l,t[9]=y*h-R,t[2]=R*h-y,t[6]=o*l,t[10]=x*h+T}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this},makeRotationFromQuaternion:function(e){var t=this.elements,r=e.x,n=e.y,i=e.z,a=e.w,o=r+r,s=n+n,c=i+i,l=r*o,h=r*s,u=r*c,d=n*s,p=n*c,f=i*c,E=a*o,m=a*s,g=a*c;return t[0]=1-(d+f),t[4]=h-g,t[8]=u+m,t[1]=h+g,t[5]=1-(l+f),t[9]=p-E,t[2]=u-m,t[6]=p+E,t[10]=1-(l+d),t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this},lookAt:function(){var e,t,r;return function(n,i,a){void 0===e&&(e=new THREE.Vector3,t=new THREE.Vector3,r=new THREE.Vector3);var o=this.elements;return r.subVectors(n,i).normalize(),0===r.lengthSq()&&(r.z=1),e.crossVectors(a,r).normalize(),0===e.lengthSq()&&(r.z+=1e-4,e.crossVectors(a,r).normalize()),t.crossVectors(r,e),o[0]=e.x,o[4]=t.x,o[8]=r.x,o[1]=e.y,o[5]=t.y,o[9]=r.y,o[2]=e.z,o[6]=t.z,o[10]=r.z,this}}(),multiply:function(e,t){return void 0!==t?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(e,t)):this.multiplyMatrices(this,e)},premultiply:function(e){return this.multiplyMatrices(e,this)},multiplyMatrices:function(e,t){var r=e.elements,n=t.elements,i=this.elements,a=r[0],o=r[4],s=r[8],c=r[12],l=r[1],h=r[5],u=r[9],d=r[13],p=r[2],f=r[6],E=r[10],m=r[14],g=r[3],v=r[7],T=r[11],y=r[15],R=n[0],x=n[4],H=n[8],b=n[12],_=n[1],M=n[5],w=n[9],S=n[13],A=n[2],L=n[6],C=n[10],P=n[14],I=n[3],B=n[7],D=n[11],O=n[15];return i[0]=a*R+o*_+s*A+c*I,i[4]=a*x+o*M+s*L+c*B,i[8]=a*H+o*w+s*C+c*D,i[12]=a*b+o*S+s*P+c*O,i[1]=l*R+h*_+u*A+d*I,i[5]=l*x+h*M+u*L+d*B,i[9]=l*H+h*w+u*C+d*D,i[13]=l*b+h*S+u*P+d*O,i[2]=p*R+f*_+E*A+m*I,i[6]=p*x+f*M+E*L+m*B,i[10]=p*H+f*w+E*C+m*D,i[14]=p*b+f*S+E*P+m*O,i[3]=g*R+v*_+T*A+y*I,i[7]=g*x+v*M+T*L+y*B,i[11]=g*H+v*w+T*C+y*D,i[15]=g*b+v*S+T*P+y*O,this},multiplyToArray:function(e,t,r){var n=this.elements;return this.multiplyMatrices(e,t),r[0]=n[0],r[1]=n[1],r[2]=n[2],r[3]=n[3],r[4]=n[4],r[5]=n[5],r[6]=n[6],r[7]=n[7],r[8]=n[8],r[9]=n[9],r[10]=n[10],r[11]=n[11],r[12]=n[12],r[13]=n[13],r[14]=n[14],r[15]=n[15],this},multiplyScalar:function(e){var t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this},applyToVector3Array:function(){var e;return function(t,r,n){void 0===e&&(e=new THREE.Vector3),void 0===r&&(r=0),void 0===n&&(n=t.length);for(var i=0,a=r;n>i;i+=3,a+=3)e.fromArray(t,a),e.applyMatrix4(this),e.toArray(t,a);return t}}(),applyToBuffer:function(){var e;return function(t,r,n){void 0===e&&(e=new THREE.Vector3),void 0===r&&(r=0),void 0===n&&(n=t.length/t.itemSize);for(var i=0,a=r;n>i;i++,a++)e.x=t.getX(a),e.y=t.getY(a),e.z=t.getZ(a),e.applyMatrix4(this),t.setXYZ(e.x,e.y,e.z);return t}}(),determinant:function(){var e=this.elements,t=e[0],r=e[4],n=e[8],i=e[12],a=e[1],o=e[5],s=e[9],c=e[13],l=e[2],h=e[6],u=e[10],d=e[14],p=e[3],f=e[7],E=e[11],m=e[15];return p*(+i*s*h-n*c*h-i*o*u+r*c*u+n*o*d-r*s*d)+f*(+t*s*d-t*c*u+i*a*u-n*a*d+n*c*l-i*s*l)+E*(+t*c*h-t*o*d-i*a*h+r*a*d+i*o*l-r*c*l)+m*(-n*o*l-t*s*h+t*o*u+n*a*h-r*a*u+r*s*l)},transpose:function(){var e,t=this.elements;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this},flattenToArrayOffset:function(e,t){return console.warn("THREE.Matrix3: .flattenToArrayOffset is deprecated - just use .toArray instead."),this.toArray(e,t)},getPosition:function(){var e;return function(){return void 0===e&&(e=new THREE.Vector3),console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),e.setFromMatrixColumn(this,3)}}(),setPosition:function(e){var t=this.elements;return t[12]=e.x,t[13]=e.y,t[14]=e.z,this},getInverse:function(e,t){var r=this.elements,n=e.elements,i=n[0],a=n[1],o=n[2],s=n[3],c=n[4],l=n[5],h=n[6],u=n[7],d=n[8],p=n[9],f=n[10],E=n[11],m=n[12],g=n[13],v=n[14],T=n[15],y=p*v*u-g*f*u+g*h*E-l*v*E-p*h*T+l*f*T,R=m*f*u-d*v*u-m*h*E+c*v*E+d*h*T-c*f*T,x=d*g*u-m*p*u+m*l*E-c*g*E-d*l*T+c*p*T,H=m*p*h-d*g*h-m*l*f+c*g*f+d*l*v-c*p*v,b=i*y+a*R+o*x+s*H;if(0===b){var _="THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0";if(t)throw new Error(_);return console.warn(_),this.identity()}var M=1/b;return r[0]=y*M,r[1]=(g*f*s-p*v*s-g*o*E+a*v*E+p*o*T-a*f*T)*M,r[2]=(l*v*s-g*h*s+g*o*u-a*v*u-l*o*T+a*h*T)*M,r[3]=(p*h*s-l*f*s-p*o*u+a*f*u+l*o*E-a*h*E)*M,r[4]=R*M,r[5]=(d*v*s-m*f*s+m*o*E-i*v*E-d*o*T+i*f*T)*M,r[6]=(m*h*s-c*v*s-m*o*u+i*v*u+c*o*T-i*h*T)*M,r[7]=(c*f*s-d*h*s+d*o*u-i*f*u-c*o*E+i*h*E)*M,r[8]=x*M,r[9]=(m*p*s-d*g*s-m*a*E+i*g*E+d*a*T-i*p*T)*M,r[10]=(c*g*s-m*l*s+m*a*u-i*g*u-c*a*T+i*l*T)*M,r[11]=(d*l*s-c*p*s-d*a*u+i*p*u+c*a*E-i*l*E)*M,r[12]=H*M,r[13]=(d*g*o-m*p*o+m*a*f-i*g*f-d*a*v+i*p*v)*M,r[14]=(m*l*o-c*g*o-m*a*h+i*g*h+c*a*v-i*l*v)*M,r[15]=(c*p*o-d*l*o+d*a*h-i*p*h-c*a*f+i*l*f)*M,this},scale:function(e){var t=this.elements,r=e.x,n=e.y,i=e.z;return t[0]*=r,t[4]*=n,t[8]*=i,t[1]*=r,t[5]*=n,t[9]*=i,t[2]*=r,t[6]*=n,t[10]*=i,t[3]*=r,t[7]*=n,t[11]*=i,this},getMaxScaleOnAxis:function(){var e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],r=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],n=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,r,n))},makeTranslation:function(e,t,r){return this.set(1,0,0,e,0,1,0,t,0,0,1,r,0,0,0,1),this},makeRotationX:function(e){var t=Math.cos(e),r=Math.sin(e);return this.set(1,0,0,0,0,t,-r,0,0,r,t,0,0,0,0,1),this},makeRotationY:function(e){var t=Math.cos(e),r=Math.sin(e);return this.set(t,0,r,0,0,1,0,0,-r,0,t,0,0,0,0,1),this},makeRotationZ:function(e){var t=Math.cos(e),r=Math.sin(e);return this.set(t,-r,0,0,r,t,0,0,0,0,1,0,0,0,0,1),this},makeRotationAxis:function(e,t){var r=Math.cos(t),n=Math.sin(t),i=1-r,a=e.x,o=e.y,s=e.z,c=i*a,l=i*o;return this.set(c*a+r,c*o-n*s,c*s+n*o,0,c*o+n*s,l*o+r,l*s-n*a,0,c*s-n*o,l*s+n*a,i*s*s+r,0,0,0,0,1),this},makeScale:function(e,t,r){return this.set(e,0,0,0,0,t,0,0,0,0,r,0,0,0,0,1),this},compose:function(e,t,r){return this.makeRotationFromQuaternion(t),this.scale(r),this.setPosition(e),this},decompose:function(){var e,t;return function(r,n,i){void 0===e&&(e=new THREE.Vector3,t=new THREE.Matrix4);var a=this.elements,o=e.set(a[0],a[1],a[2]).length(),s=e.set(a[4],a[5],a[6]).length(),c=e.set(a[8],a[9],a[10]).length(),l=this.determinant();0>l&&(o=-o),r.x=a[12],r.y=a[13],r.z=a[14],t.elements.set(this.elements);var h=1/o,u=1/s,d=1/c;return t.elements[0]*=h,t.elements[1]*=h,t.elements[2]*=h,t.elements[4]*=u,t.elements[5]*=u,t.elements[6]*=u,t.elements[8]*=d,t.elements[9]*=d,t.elements[10]*=d,n.setFromRotationMatrix(t),i.x=o,i.y=s,i.z=c,this}}(),makeFrustum:function(e,t,r,n,i,a){var o=this.elements,s=2*i/(t-e),c=2*i/(n-r),l=(t+e)/(t-e),h=(n+r)/(n-r),u=-(a+i)/(a-i),d=-2*a*i/(a-i);return o[0]=s,o[4]=0,o[8]=l,o[12]=0,o[1]=0,o[5]=c,o[9]=h,o[13]=0,o[2]=0,o[6]=0,o[10]=u,o[14]=d,o[3]=0,o[7]=0,o[11]=-1,o[15]=0,this},makePerspective:function(e,t,r,n){var i=r*Math.tan(THREE.Math.DEG2RAD*e*.5),a=-i,o=a*t,s=i*t;return this.makeFrustum(o,s,a,i,r,n)},makeOrthographic:function(e,t,r,n,i,a){var o=this.elements,s=1/(t-e),c=1/(r-n),l=1/(a-i),h=(t+e)*s,u=(r+n)*c,d=(a+i)*l;return o[0]=2*s,o[4]=0,o[8]=0,o[12]=-h,o[1]=0,o[5]=2*c,o[9]=0,o[13]=-u,o[2]=0,o[6]=0,o[10]=-2*l,o[14]=-d,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this},equals:function(e){for(var t=this.elements,r=e.elements,n=0;16>n;n++)if(t[n]!==r[n])return!1;return!0},fromArray:function(e){return this.elements.set(e),this},toArray:function(e,t){void 0===e&&(e=[]),void 0===t&&(t=0);var r=this.elements;return e[t]=r[0],e[t+1]=r[1],e[t+2]=r[2],e[t+3]=r[3],e[t+4]=r[4],e[t+5]=r[5],e[t+6]=r[6],e[t+7]=r[7],e[t+8]=r[8],e[t+9]=r[9],e[t+10]=r[10],e[t+11]=r[11],e[t+12]=r[12],e[t+13]=r[13],e[t+14]=r[14],e[t+15]=r[15],e}},THREE.Ray=function(e,t){this.origin=void 0!==e?e:new THREE.Vector3,this.direction=void 0!==t?t:new THREE.Vector3},THREE.Ray.prototype={constructor:THREE.Ray,set:function(e,t){return this.origin.copy(e),this.direction.copy(t),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this},at:function(e,t){var r=t||new THREE.Vector3;return r.copy(this.direction).multiplyScalar(e).add(this.origin)},lookAt:function(e){return this.direction.copy(e).sub(this.origin).normalize(),this},recast:function(){var e=new THREE.Vector3;return function(t){return this.origin.copy(this.at(t,e)),this}}(),closestPointToPoint:function(e,t){var r=t||new THREE.Vector3;r.subVectors(e,this.origin);var n=r.dot(this.direction);return 0>n?r.copy(this.origin):r.copy(this.direction).multiplyScalar(n).add(this.origin)},distanceToPoint:function(e){return Math.sqrt(this.distanceSqToPoint(e))},distanceSqToPoint:function(){var e=new THREE.Vector3;return function(t){var r=e.subVectors(t,this.origin).dot(this.direction);return 0>r?this.origin.distanceToSquared(t):(e.copy(this.direction).multiplyScalar(r).add(this.origin),e.distanceToSquared(t))}}(),distanceSqToSegment:function(){var e=new THREE.Vector3,t=new THREE.Vector3,r=new THREE.Vector3;return function(n,i,a,o){e.copy(n).add(i).multiplyScalar(.5),t.copy(i).sub(n).normalize(),r.copy(this.origin).sub(e);var s,c,l,h,u=.5*n.distanceTo(i),d=-this.direction.dot(t),p=r.dot(this.direction),f=-r.dot(t),E=r.lengthSq(),m=Math.abs(1-d*d);if(m>0)if(s=d*f-p,c=d*p-f,h=u*m,s>=0)if(c>=-h)if(h>=c){var g=1/m;s*=g,c*=g,l=s*(s+d*c+2*p)+c*(d*s+c+2*f)+E}else c=u,s=Math.max(0,-(d*c+p)),l=-s*s+c*(c+2*f)+E;else c=-u,s=Math.max(0,-(d*c+p)),l=-s*s+c*(c+2*f)+E;else-h>=c?(s=Math.max(0,-(-d*u+p)),c=s>0?-u:Math.min(Math.max(-u,-f),u),l=-s*s+c*(c+2*f)+E):h>=c?(s=0,c=Math.min(Math.max(-u,-f),u),l=c*(c+2*f)+E):(s=Math.max(0,-(d*u+p)),c=s>0?u:Math.min(Math.max(-u,-f),u),l=-s*s+c*(c+2*f)+E);else c=d>0?-u:u,s=Math.max(0,-(d*c+p)),l=-s*s+c*(c+2*f)+E;return a&&a.copy(this.direction).multiplyScalar(s).add(this.origin),o&&o.copy(t).multiplyScalar(c).add(e),l}}(),intersectSphere:function(){var e=new THREE.Vector3;return function(t,r){e.subVectors(t.center,this.origin);var n=e.dot(this.direction),i=e.dot(e)-n*n,a=t.radius*t.radius;if(i>a)return null;var o=Math.sqrt(a-i),s=n-o,c=n+o;return 0>s&&0>c?null:0>s?this.at(c,r):this.at(s,r)}}(),intersectsSphere:function(e){return this.distanceToPoint(e.center)<=e.radius},distanceToPlane:function(e){var t=e.normal.dot(this.direction);if(0===t)return 0===e.distanceToPoint(this.origin)?0:null;var r=-(this.origin.dot(e.normal)+e.constant)/t;return r>=0?r:null},intersectPlane:function(e,t){var r=this.distanceToPlane(e);return null===r?null:this.at(r,t)},intersectsPlane:function(e){var t=e.distanceToPoint(this.origin);if(0===t)return!0;var r=e.normal.dot(this.direction);return 0>r*t},intersectBox:function(e,t){var r,n,i,a,o,s,c=1/this.direction.x,l=1/this.direction.y,h=1/this.direction.z,u=this.origin;return c>=0?(r=(e.min.x-u.x)*c,n=(e.max.x-u.x)*c):(r=(e.max.x-u.x)*c,n=(e.min.x-u.x)*c),l>=0?(i=(e.min.y-u.y)*l,a=(e.max.y-u.y)*l):(i=(e.max.y-u.y)*l,a=(e.min.y-u.y)*l),r>a||i>n?null:((i>r||r!==r)&&(r=i),(n>a||n!==n)&&(n=a),h>=0?(o=(e.min.z-u.z)*h,s=(e.max.z-u.z)*h):(o=(e.max.z-u.z)*h,s=(e.min.z-u.z)*h),r>s||o>n?null:((o>r||r!==r)&&(r=o),(n>s||n!==n)&&(n=s),0>n?null:this.at(r>=0?r:n,t)))},intersectsBox:function(){var e=new THREE.Vector3;return function(t){return null!==this.intersectBox(t,e)}}(),intersectTriangle:function(){var e=new THREE.Vector3,t=new THREE.Vector3,r=new THREE.Vector3,n=new THREE.Vector3;return function(i,a,o,s,c){t.subVectors(a,i),r.subVectors(o,i),n.crossVectors(t,r);var l,h=this.direction.dot(n);if(h>0){if(s)return null;l=1}else{if(!(0>h))return null;l=-1,h=-h}e.subVectors(this.origin,i);var u=l*this.direction.dot(r.crossVectors(e,r));if(0>u)return null;var d=l*this.direction.dot(t.cross(e));if(0>d)return null;if(u+d>h)return null;var p=-l*e.dot(n);return 0>p?null:this.at(p/h,c)}}(),applyMatrix4:function(e){return this.direction.add(this.origin).applyMatrix4(e),this.origin.applyMatrix4(e),this.direction.sub(this.origin),this.direction.normalize(),this},equals:function(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}},THREE.Sphere=function(e,t){this.center=void 0!==e?e:new THREE.Vector3,this.radius=void 0!==t?t:0},THREE.Sphere.prototype={constructor:THREE.Sphere,set:function(e,t){return this.center.copy(e),this.radius=t,this},setFromPoints:function(){var e=new THREE.Box3;return function(t,r){var n=this.center;void 0!==r?n.copy(r):e.setFromPoints(t).center(n);for(var i=0,a=0,o=t.length;o>a;a++)i=Math.max(i,n.distanceToSquared(t[a]));return this.radius=Math.sqrt(i),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.center.copy(e.center),this.radius=e.radius,this},empty:function(){return this.radius<=0},containsPoint:function(e){return e.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(e){return e.distanceTo(this.center)-this.radius},intersectsSphere:function(e){var t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t},intersectsBox:function(e){return e.intersectsSphere(this)},intersectsPlane:function(e){return Math.abs(this.center.dot(e.normal)-e.constant)<=this.radius},clampPoint:function(e,t){var r=this.center.distanceToSquared(e),n=t||new THREE.Vector3;return n.copy(e),r>this.radius*this.radius&&(n.sub(this.center).normalize(),n.multiplyScalar(this.radius).add(this.center)),n},getBoundingBox:function(e){var t=e||new THREE.Box3;return t.set(this.center,this.center),t.expandByScalar(this.radius),t},applyMatrix4:function(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this},translate:function(e){return this.center.add(e),this},equals:function(e){return e.center.equals(this.center)&&e.radius===this.radius}},THREE.Frustum=function(e,t,r,n,i,a){this.planes=[void 0!==e?e:new THREE.Plane,void 0!==t?t:new THREE.Plane,void 0!==r?r:new THREE.Plane,void 0!==n?n:new THREE.Plane,void 0!==i?i:new THREE.Plane,void 0!==a?a:new THREE.Plane]},THREE.Frustum.prototype={constructor:THREE.Frustum,set:function(e,t,r,n,i,a){var o=this.planes;return o[0].copy(e),o[1].copy(t),o[2].copy(r),
o[3].copy(n),o[4].copy(i),o[5].copy(a),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){for(var t=this.planes,r=0;6>r;r++)t[r].copy(e.planes[r]);return this},setFromMatrix:function(e){var t=this.planes,r=e.elements,n=r[0],i=r[1],a=r[2],o=r[3],s=r[4],c=r[5],l=r[6],h=r[7],u=r[8],d=r[9],p=r[10],f=r[11],E=r[12],m=r[13],g=r[14],v=r[15];return t[0].setComponents(o-n,h-s,f-u,v-E).normalize(),t[1].setComponents(o+n,h+s,f+u,v+E).normalize(),t[2].setComponents(o+i,h+c,f+d,v+m).normalize(),t[3].setComponents(o-i,h-c,f-d,v-m).normalize(),t[4].setComponents(o-a,h-l,f-p,v-g).normalize(),t[5].setComponents(o+a,h+l,f+p,v+g).normalize(),this},intersectsObject:function(){var e=new THREE.Sphere;return function(t){var r=t.geometry;return null===r.boundingSphere&&r.computeBoundingSphere(),e.copy(r.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere(e)}}(),intersectsSprite:function(){var e=new THREE.Sphere;return function(t){return e.center.set(0,0,0),e.radius=.7071067811865476,e.applyMatrix4(t.matrixWorld),this.intersectsSphere(e)}}(),intersectsSphere:function(e){for(var t=this.planes,r=e.center,n=-e.radius,i=0;6>i;i++){var a=t[i].distanceToPoint(r);if(n>a)return!1}return!0},intersectsBox:function(){var e=new THREE.Vector3,t=new THREE.Vector3;return function(r){for(var n=this.planes,i=0;6>i;i++){var a=n[i];e.x=a.normal.x>0?r.min.x:r.max.x,t.x=a.normal.x>0?r.max.x:r.min.x,e.y=a.normal.y>0?r.min.y:r.max.y,t.y=a.normal.y>0?r.max.y:r.min.y,e.z=a.normal.z>0?r.min.z:r.max.z,t.z=a.normal.z>0?r.max.z:r.min.z;var o=a.distanceToPoint(e),s=a.distanceToPoint(t);if(0>o&&0>s)return!1}return!0}}(),containsPoint:function(e){for(var t=this.planes,r=0;6>r;r++)if(t[r].distanceToPoint(e)<0)return!1;return!0}},THREE.Plane=function(e,t){this.normal=void 0!==e?e:new THREE.Vector3(1,0,0),this.constant=void 0!==t?t:0},THREE.Plane.prototype={constructor:THREE.Plane,set:function(e,t){return this.normal.copy(e),this.constant=t,this},setComponents:function(e,t,r,n){return this.normal.set(e,t,r),this.constant=n,this},setFromNormalAndCoplanarPoint:function(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this},setFromCoplanarPoints:function(){var e=new THREE.Vector3,t=new THREE.Vector3;return function(r,n,i){var a=e.subVectors(i,n).cross(t.subVectors(r,n)).normalize();return this.setFromNormalAndCoplanarPoint(a,r),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.normal.copy(e.normal),this.constant=e.constant,this},normalize:function(){var e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this},negate:function(){return this.constant*=-1,this.normal.negate(),this},distanceToPoint:function(e){return this.normal.dot(e)+this.constant},distanceToSphere:function(e){return this.distanceToPoint(e.center)-e.radius},projectPoint:function(e,t){return this.orthoPoint(e,t).sub(e).negate()},orthoPoint:function(e,t){var r=this.distanceToPoint(e),n=t||new THREE.Vector3;return n.copy(this.normal).multiplyScalar(r)},intersectLine:function(){var e=new THREE.Vector3;return function(t,r){var n=r||new THREE.Vector3,i=t.delta(e),a=this.normal.dot(i);if(0!==a){var o=-(t.start.dot(this.normal)+this.constant)/a;if(!(0>o||o>1))return n.copy(i).multiplyScalar(o).add(t.start)}else if(0===this.distanceToPoint(t.start))return n.copy(t.start)}}(),intersectsLine:function(e){var t=this.distanceToPoint(e.start),r=this.distanceToPoint(e.end);return 0>t&&r>0||0>r&&t>0},intersectsBox:function(e){return e.intersectsPlane(this)},intersectsSphere:function(e){return e.intersectsPlane(this)},coplanarPoint:function(e){var t=e||new THREE.Vector3;return t.copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var e=new THREE.Vector3,t=new THREE.Matrix3;return function(r,n){var i=this.coplanarPoint(e).applyMatrix4(r),a=n||t.getNormalMatrix(r),o=this.normal.applyMatrix3(a).normalize();return this.constant=-i.dot(o),this}}(),translate:function(e){return this.constant=this.constant-e.dot(this.normal),this},equals:function(e){return e.normal.equals(this.normal)&&e.constant===this.constant}},THREE.Spherical=function(e,t,r){return this.radius=void 0!==e?e:1,this.phi=void 0!==t?t:0,this.theta=void 0!==r?r:0,this},THREE.Spherical.prototype={constructor:THREE.Spherical,set:function(e,t,r){return this.radius=e,this.phi=t,this.theta=r,this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.radius.copy(e.radius),this.phi.copy(e.phi),this.theta.copy(e.theta),this},makeSafe:function(){var e=1e-6;return this.phi=Math.max(e,Math.min(Math.PI-e,this.phi)),this},setFromVector3:function(e){return this.radius=e.length(),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e.x,e.z),this.phi=Math.acos(THREE.Math.clamp(e.y/this.radius,-1,1))),this}},THREE.Math={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){var e,t="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),r=new Array(36),n=0;return function(){for(var i=0;36>i;i++)8===i||13===i||18===i||23===i?r[i]="-":14===i?r[i]="4":(2>=n&&(n=33554432+16777216*Math.random()|0),e=15&n,n>>=4,r[i]=t[19===i?3&e|8:e]);return r.join("")}}(),clamp:function(e,t,r){return Math.max(t,Math.min(r,e))},euclideanModulo:function(e,t){return(e%t+t)%t},mapLinear:function(e,t,r,n,i){return n+(e-t)*(i-n)/(r-t)},smoothstep:function(e,t,r){return t>=e?0:e>=r?1:(e=(e-t)/(r-t),e*e*(3-2*e))},smootherstep:function(e,t,r){return t>=e?0:e>=r?1:(e=(e-t)/(r-t),e*e*e*(e*(6*e-15)+10))},random16:function(){return console.warn("THREE.Math.random16() has been deprecated. Use Math.random() instead."),Math.random()},randInt:function(e,t){return e+Math.floor(Math.random()*(t-e+1))},randFloat:function(e,t){return e+Math.random()*(t-e)},randFloatSpread:function(e){return e*(.5-Math.random())},degToRad:function(e){return e*THREE.Math.DEG2RAD},radToDeg:function(e){return e*THREE.Math.RAD2DEG},isPowerOfTwo:function(e){return 0===(e&e-1)&&0!==e},nearestPowerOfTwo:function(e){return Math.pow(2,Math.round(Math.log(e)/Math.LN2))},nextPowerOfTwo:function(e){return e--,e|=e>>1,e|=e>>2,e|=e>>4,e|=e>>8,e|=e>>16,e++,e}},THREE.Spline=function(e){function t(e,t,r,n,i,a,o){var s=.5*(r-e),c=.5*(n-t);return(2*(t-r)+s+c)*o+(-3*(t-r)-2*s-c)*a+s*i+t}this.points=e;var r,n,i,a,o,s,c,l,h,u=[],d={x:0,y:0,z:0};this.initFromArray=function(e){this.points=[];for(var t=0;t<e.length;t++)this.points[t]={x:e[t][0],y:e[t][1],z:e[t][2]}},this.getPoint=function(e){return r=(this.points.length-1)*e,n=Math.floor(r),i=r-n,u[0]=0===n?n:n-1,u[1]=n,u[2]=n>this.points.length-2?this.points.length-1:n+1,u[3]=n>this.points.length-3?this.points.length-1:n+2,s=this.points[u[0]],c=this.points[u[1]],l=this.points[u[2]],h=this.points[u[3]],a=i*i,o=i*a,d.x=t(s.x,c.x,l.x,h.x,i,a,o),d.y=t(s.y,c.y,l.y,h.y,i,a,o),d.z=t(s.z,c.z,l.z,h.z,i,a,o),d},this.getControlPointsArray=function(){var e,t,r=this.points.length,n=[];for(e=0;r>e;e++)t=this.points[e],n[e]=[t.x,t.y,t.z];return n},this.getLength=function(e){var t,r,n,i,a=0,o=0,s=0,c=new THREE.Vector3,l=new THREE.Vector3,h=[],u=0;for(h[0]=0,e||(e=100),n=this.points.length*e,c.copy(this.points[0]),t=1;n>t;t++)r=t/n,i=this.getPoint(r),l.copy(i),u+=l.distanceTo(c),c.copy(i),a=(this.points.length-1)*r,o=Math.floor(a),o!==s&&(h[o]=u,s=o);return h[h.length]=u,{chunks:h,total:u}},this.reparametrizeByArcLength=function(e){var t,r,n,i,a,o,s,c,l=[],h=new THREE.Vector3,u=this.getLength();for(l.push(h.copy(this.points[0]).clone()),t=1;t<this.points.length;t++){for(o=u.chunks[t]-u.chunks[t-1],s=Math.ceil(e*o/u.total),i=(t-1)/(this.points.length-1),a=t/(this.points.length-1),r=1;s-1>r;r++)n=i+r*(1/s)*(a-i),c=this.getPoint(n),l.push(h.copy(c).clone());l.push(h.copy(this.points[t]).clone())}this.points=l}},THREE.Triangle=function(e,t,r){this.a=void 0!==e?e:new THREE.Vector3,this.b=void 0!==t?t:new THREE.Vector3,this.c=void 0!==r?r:new THREE.Vector3},THREE.Triangle.normal=function(){var e=new THREE.Vector3;return function(t,r,n,i){var a=i||new THREE.Vector3;a.subVectors(n,r),e.subVectors(t,r),a.cross(e);var o=a.lengthSq();return o>0?a.multiplyScalar(1/Math.sqrt(o)):a.set(0,0,0)}}(),THREE.Triangle.barycoordFromPoint=function(){var e=new THREE.Vector3,t=new THREE.Vector3,r=new THREE.Vector3;return function(n,i,a,o,s){e.subVectors(o,i),t.subVectors(a,i),r.subVectors(n,i);var c=e.dot(e),l=e.dot(t),h=e.dot(r),u=t.dot(t),d=t.dot(r),p=c*u-l*l,f=s||new THREE.Vector3;if(0===p)return f.set(-2,-1,-1);var E=1/p,m=(u*h-l*d)*E,g=(c*d-l*h)*E;return f.set(1-m-g,g,m)}}(),THREE.Triangle.containsPoint=function(){var e=new THREE.Vector3;return function(t,r,n,i){var a=THREE.Triangle.barycoordFromPoint(t,r,n,i,e);return a.x>=0&&a.y>=0&&a.x+a.y<=1}}(),THREE.Triangle.prototype={constructor:THREE.Triangle,set:function(e,t,r){return this.a.copy(e),this.b.copy(t),this.c.copy(r),this},setFromPointsAndIndices:function(e,t,r,n){return this.a.copy(e[t]),this.b.copy(e[r]),this.c.copy(e[n]),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this},area:function(){var e=new THREE.Vector3,t=new THREE.Vector3;return function(){return e.subVectors(this.c,this.b),t.subVectors(this.a,this.b),.5*e.cross(t).length()}}(),midpoint:function(e){var t=e||new THREE.Vector3;return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},normal:function(e){return THREE.Triangle.normal(this.a,this.b,this.c,e)},plane:function(e){var t=e||new THREE.Plane;return t.setFromCoplanarPoints(this.a,this.b,this.c)},barycoordFromPoint:function(e,t){return THREE.Triangle.barycoordFromPoint(e,this.a,this.b,this.c,t)},containsPoint:function(e){return THREE.Triangle.containsPoint(e,this.a,this.b,this.c)},closestPointToPoint:function(){var e,t,r,n;return function(i,a){void 0===e&&(e=new THREE.Plane,t=[new THREE.Line3,new THREE.Line3,new THREE.Line3],r=new THREE.Vector3,n=new THREE.Vector3);var o=a||new THREE.Vector3,s=1/0;if(e.setFromCoplanarPoints(this.a,this.b,this.c),e.projectPoint(i,r),this.containsPoint(r)===!0)o.copy(r);else{t[0].set(this.a,this.b),t[1].set(this.b,this.c),t[2].set(this.c,this.a);for(var c=0;c<t.length;c++){t[c].closestPointToPoint(r,!0,n);var l=r.distanceToSquared(n);s>l&&(s=l,o.copy(n))}}return o}}(),equals:function(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}},THREE.Interpolant=function(e,t,r,n){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=void 0!==n?n:new t.constructor(r),this.sampleValues=t,this.valueSize=r},THREE.Interpolant.prototype={constructor:THREE.Interpolant,evaluate:function(e){var t=this.parameterPositions,r=this._cachedIndex,n=t[r],i=t[r-1];e:{t:{var a;r:{n:if(!(n>e)){for(var o=r+2;;){if(void 0===n){if(i>e)break n;return r=t.length,this._cachedIndex=r,this.afterEnd_(r-1,e,i)}if(r===o)break;if(i=n,n=t[++r],n>e)break t}a=t.length;break r}{if(e>=i)break e;var s=t[1];s>e&&(r=2,i=s);for(var o=r-2;;){if(void 0===i)return this._cachedIndex=0,this.beforeStart_(0,e,n);if(r===o)break;if(n=i,i=t[--r-1],e>=i)break t}a=r,r=0}}for(;a>r;){var c=r+a>>>1;e<t[c]?a=c:r=c+1}if(n=t[r],i=t[r-1],void 0===i)return this._cachedIndex=0,this.beforeStart_(0,e,n);if(void 0===n)return r=t.length,this._cachedIndex=r,this.afterEnd_(r-1,i,e)}this._cachedIndex=r,this.intervalChanged_(r,i,n)}return this.interpolate_(r,i,e,n)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(e){for(var t=this.resultBuffer,r=this.sampleValues,n=this.valueSize,i=e*n,a=0;a!==n;++a)t[a]=r[i+a];return t},interpolate_:function(e,t,r,n){throw new Error("call to abstract method")},intervalChanged_:function(e,t,r){}},Object.assign(THREE.Interpolant.prototype,{beforeStart_:THREE.Interpolant.prototype.copySampleValue_,afterEnd_:THREE.Interpolant.prototype.copySampleValue_}),THREE.CubicInterpolant=function(e,t,r,n){THREE.Interpolant.call(this,e,t,r,n),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0},THREE.CubicInterpolant.prototype=Object.assign(Object.create(THREE.Interpolant.prototype),{constructor:THREE.CubicInterpolant,DefaultSettings_:{endingStart:THREE.ZeroCurvatureEnding,endingEnd:THREE.ZeroCurvatureEnding},intervalChanged_:function(e,t,r){var n=this.parameterPositions,i=e-2,a=e+1,o=n[i],s=n[a];if(void 0===o)switch(this.getSettings_().endingStart){case THREE.ZeroSlopeEnding:i=e,o=2*t-r;break;case THREE.WrapAroundEnding:i=n.length-2,o=t+n[i]-n[i+1];break;default:i=e,o=r}if(void 0===s)switch(this.getSettings_().endingEnd){case THREE.ZeroSlopeEnding:a=e,s=2*r-t;break;case THREE.WrapAroundEnding:a=1,s=r+n[1]-n[0];break;default:a=e-1,s=t}var c=.5*(r-t),l=this.valueSize;this._weightPrev=c/(t-o),this._weightNext=c/(s-r),this._offsetPrev=i*l,this._offsetNext=a*l},interpolate_:function(e,t,r,n){for(var i=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=e*o,c=s-o,l=this._offsetPrev,h=this._offsetNext,u=this._weightPrev,d=this._weightNext,p=(r-t)/(n-t),f=p*p,E=f*p,m=-u*E+2*u*f-u*p,g=(1+u)*E+(-1.5-2*u)*f+(-.5+u)*p+1,v=(-1-d)*E+(1.5+d)*f+.5*p,T=d*E-d*f,y=0;y!==o;++y)i[y]=m*a[l+y]+g*a[c+y]+v*a[s+y]+T*a[h+y];return i}}),THREE.DiscreteInterpolant=function(e,t,r,n){THREE.Interpolant.call(this,e,t,r,n)},THREE.DiscreteInterpolant.prototype=Object.assign(Object.create(THREE.Interpolant.prototype),{constructor:THREE.DiscreteInterpolant,interpolate_:function(e,t,r,n){return this.copySampleValue_(e-1)}}),THREE.LinearInterpolant=function(e,t,r,n){THREE.Interpolant.call(this,e,t,r,n)},THREE.LinearInterpolant.prototype=Object.assign(Object.create(THREE.Interpolant.prototype),{constructor:THREE.LinearInterpolant,interpolate_:function(e,t,r,n){for(var i=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=e*o,c=s-o,l=(r-t)/(n-t),h=1-l,u=0;u!==o;++u)i[u]=a[c+u]*h+a[s+u]*l;return i}}),THREE.QuaternionLinearInterpolant=function(e,t,r,n){THREE.Interpolant.call(this,e,t,r,n)},THREE.QuaternionLinearInterpolant.prototype=Object.assign(Object.create(THREE.Interpolant.prototype),{constructor:THREE.QuaternionLinearInterpolant,interpolate_:function(e,t,r,n){for(var i=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=e*o,c=(r-t)/(n-t),l=s+o;s!==l;s+=4)THREE.Quaternion.slerpFlat(i,0,a,s-o,a,s,c);return i}}),THREE.Clock=function(e){this.autoStart=void 0!==e?e:!0,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1},THREE.Clock.prototype={constructor:THREE.Clock,start:function(){this.startTime=(performance||Date).now(),this.oldTime=this.startTime,this.running=!0},stop:function(){this.getElapsedTime(),this.running=!1},getElapsedTime:function(){return this.getDelta(),this.elapsedTime},getDelta:function(){var e=0;if(this.autoStart&&!this.running&&this.start(),this.running){var t=(performance||Date).now();e=(t-this.oldTime)/1e3,this.oldTime=t,this.elapsedTime+=e}return e}},THREE.EventDispatcher=function(){},Object.assign(THREE.EventDispatcher.prototype,{addEventListener:function(e,t){void 0===this._listeners&&(this._listeners={});var r=this._listeners;void 0===r[e]&&(r[e]=[]),-1===r[e].indexOf(t)&&r[e].push(t)},hasEventListener:function(e,t){if(void 0===this._listeners)return!1;var r=this._listeners;return void 0!==r[e]&&-1!==r[e].indexOf(t)},removeEventListener:function(e,t){if(void 0!==this._listeners){var r=this._listeners,n=r[e];if(void 0!==n){var i=n.indexOf(t);-1!==i&&n.splice(i,1)}}},dispatchEvent:function(e){if(void 0!==this._listeners){var t=this._listeners,r=t[e.type];if(void 0!==r){e.target=this;var n=[],i=0,a=r.length;for(i=0;a>i;i++)n[i]=r[i];for(i=0;a>i;i++)n[i].call(this,e)}}}}),THREE.Layers=function(){this.mask=1},THREE.Layers.prototype={constructor:THREE.Layers,set:function(e){this.mask=1<<e},enable:function(e){this.mask|=1<<e},toggle:function(e){this.mask^=1<<e},disable:function(e){this.mask&=~(1<<e)},test:function(e){return 0!==(this.mask&e.mask)}},function(e){function t(e,t){return e.distance-t.distance}function r(e,t,n,i){if(e.visible!==!1&&(e.raycast(t,n),i===!0))for(var a=e.children,o=0,s=a.length;s>o;o++)r(a[o],t,n,!0)}e.Raycaster=function(t,r,n,i){this.ray=new e.Ray(t,r),this.near=n||0,this.far=i||1/0,this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}},Object.defineProperties(this.params,{PointCloud:{get:function(){return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."),this.Points}}})},e.Raycaster.prototype={constructor:e.Raycaster,linePrecision:1,set:function(e,t){this.ray.set(e,t)},setFromCamera:function(t,r){r instanceof e.PerspectiveCamera?(this.ray.origin.setFromMatrixPosition(r.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(r).sub(this.ray.origin).normalize()):r instanceof e.OrthographicCamera?(this.ray.origin.set(t.x,t.y,-1).unproject(r),this.ray.direction.set(0,0,-1).transformDirection(r.matrixWorld)):console.error("THREE.Raycaster: Unsupported camera type.")},intersectObject:function(e,n){var i=[];return r(e,this,i,n),i.sort(t),i},intersectObjects:function(e,n){var i=[];if(Array.isArray(e)===!1)return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),i;for(var a=0,o=e.length;o>a;a++)r(e[a],this,i,n);return i.sort(t),i}}}(THREE),THREE.Object3D=function(){function e(){i.setFromEuler(n,!1)}function t(){n.setFromQuaternion(i,void 0,!1)}Object.defineProperty(this,"id",{value:THREE.Object3DIdCount++}),this.uuid=THREE.Math.generateUUID(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=THREE.Object3D.DefaultUp.clone();var r=new THREE.Vector3,n=new THREE.Euler,i=new THREE.Quaternion,a=new THREE.Vector3(1,1,1);n.onChange(e),i.onChange(t),Object.defineProperties(this,{position:{enumerable:!0,value:r},rotation:{enumerable:!0,value:n},quaternion:{enumerable:!0,value:i},scale:{enumerable:!0,value:a},modelViewMatrix:{value:new THREE.Matrix4},normalMatrix:{value:new THREE.Matrix3}}),this.matrix=new THREE.Matrix4,this.matrixWorld=new THREE.Matrix4,this.matrixAutoUpdate=THREE.Object3D.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new THREE.Layers,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.userData={}},THREE.Object3D.DefaultUp=new THREE.Vector3(0,1,0),THREE.Object3D.DefaultMatrixAutoUpdate=!0,Object.assign(THREE.Object3D.prototype,THREE.EventDispatcher.prototype,{applyMatrix:function(e){this.matrix.multiplyMatrices(e,this.matrix),this.matrix.decompose(this.position,this.quaternion,this.scale)},setRotationFromAxisAngle:function(e,t){this.quaternion.setFromAxisAngle(e,t)},setRotationFromEuler:function(e){this.quaternion.setFromEuler(e,!0)},setRotationFromMatrix:function(e){this.quaternion.setFromRotationMatrix(e)},setRotationFromQuaternion:function(e){this.quaternion.copy(e)},rotateOnAxis:function(){var e=new THREE.Quaternion;return function(t,r){return e.setFromAxisAngle(t,r),this.quaternion.multiply(e),this}}(),rotateX:function(){var e=new THREE.Vector3(1,0,0);return function(t){return this.rotateOnAxis(e,t)}}(),rotateY:function(){var e=new THREE.Vector3(0,1,0);return function(t){return this.rotateOnAxis(e,t)}}(),rotateZ:function(){var e=new THREE.Vector3(0,0,1);return function(t){return this.rotateOnAxis(e,t)}}(),translateOnAxis:function(){var e=new THREE.Vector3;return function(t,r){return e.copy(t).applyQuaternion(this.quaternion),this.position.add(e.multiplyScalar(r)),this}}(),translateX:function(){var e=new THREE.Vector3(1,0,0);return function(t){return this.translateOnAxis(e,t)}}(),translateY:function(){var e=new THREE.Vector3(0,1,0);return function(t){return this.translateOnAxis(e,t)}}(),translateZ:function(){var e=new THREE.Vector3(0,0,1);return function(t){return this.translateOnAxis(e,t)}}(),localToWorld:function(e){return e.applyMatrix4(this.matrixWorld)},worldToLocal:function(){var e=new THREE.Matrix4;return function(t){return t.applyMatrix4(e.getInverse(this.matrixWorld))}}(),lookAt:function(){var e=new THREE.Matrix4;return function(t){e.lookAt(t,this.position,this.up),this.quaternion.setFromRotationMatrix(e)}}(),add:function(e){if(arguments.length>1){for(var t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e instanceof THREE.Object3D?(null!==e.parent&&e.parent.remove(e),e.parent=this,e.dispatchEvent({type:"added"}),this.children.push(e)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)},remove:function(e){if(arguments.length>1)for(var t=0;t<arguments.length;t++)this.remove(arguments[t]);var r=this.children.indexOf(e);-1!==r&&(e.parent=null,e.dispatchEvent({type:"removed"}),this.children.splice(r,1))},getObjectById:function(e){return this.getObjectByProperty("id",e)},getObjectByName:function(e){return this.getObjectByProperty("name",e)},getObjectByProperty:function(e,t){if(this[e]===t)return this;for(var r=0,n=this.children.length;n>r;r++){var i=this.children[r],a=i.getObjectByProperty(e,t);if(void 0!==a)return a}},getWorldPosition:function(e){var t=e||new THREE.Vector3;return this.updateMatrixWorld(!0),t.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(){var e=new THREE.Vector3,t=new THREE.Vector3;return function(r){var n=r||new THREE.Quaternion;return this.updateMatrixWorld(!0),this.matrixWorld.decompose(e,n,t),n}}(),getWorldRotation:function(){var e=new THREE.Quaternion;return function(t){var r=t||new THREE.Euler;return this.getWorldQuaternion(e),r.setFromQuaternion(e,this.rotation.order,!1)}}(),getWorldScale:function(){var e=new THREE.Vector3,t=new THREE.Quaternion;return function(r){var n=r||new THREE.Vector3;return this.updateMatrixWorld(!0),this.matrixWorld.decompose(e,t,n),n}}(),getWorldDirection:function(){var e=new THREE.Quaternion;return function(t){var r=t||new THREE.Vector3;return this.getWorldQuaternion(e),r.set(0,0,1).applyQuaternion(e)}}(),raycast:function(){},traverse:function(e){e(this);for(var t=this.children,r=0,n=t.length;n>r;r++)t[r].traverse(e)},traverseVisible:function(e){if(this.visible!==!1){e(this);for(var t=this.children,r=0,n=t.length;n>r;r++)t[r].traverseVisible(e)}},traverseAncestors:function(e){var t=this.parent;null!==t&&(e(t),t.traverseAncestors(e))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(e){this.matrixAutoUpdate===!0&&this.updateMatrix(),this.matrixWorldNeedsUpdate!==!0&&e!==!0||(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);for(var t=0,r=this.children.length;r>t;t++)this.children[t].updateMatrixWorld(e)},toJSON:function(e){function t(e){var t=[];for(var r in e){var n=e[r];delete n.metadata,t.push(n)}return t}var r=void 0===e||""===e,n={};r&&(e={geometries:{},materials:{},textures:{},images:{}},n.metadata={version:4.4,type:"Object",generator:"Object3D.toJSON"});var i={};if(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),"{}"!==JSON.stringify(this.userData)&&(i.userData=this.userData),this.castShadow===!0&&(i.castShadow=!0),this.receiveShadow===!0&&(i.receiveShadow=!0),this.visible===!1&&(i.visible=!1),i.matrix=this.matrix.toArray(),void 0!==this.geometry&&(void 0===e.geometries[this.geometry.uuid]&&(e.geometries[this.geometry.uuid]=this.geometry.toJSON(e)),i.geometry=this.geometry.uuid),void 0!==this.material&&(void 0===e.materials[this.material.uuid]&&(e.materials[this.material.uuid]=this.material.toJSON(e)),i.material=this.material.uuid),this.children.length>0){i.children=[];for(var a=0;a<this.children.length;a++)i.children.push(this.children[a].toJSON(e).object)}if(r){var o=t(e.geometries),s=t(e.materials),c=t(e.textures),l=t(e.images);o.length>0&&(n.geometries=o),s.length>0&&(n.materials=s),c.length>0&&(n.textures=c),l.length>0&&(n.images=l)}return n.object=i,n},clone:function(e){return(new this.constructor).copy(this,e)},copy:function(e,t){if(void 0===t&&(t=!0),this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.userData=JSON.parse(JSON.stringify(e.userData)),t===!0)for(var r=0;r<e.children.length;r++){var n=e.children[r];this.add(n.clone())}return this}}),THREE.Object3DIdCount=0,THREE.Face3=function(e,t,r,n,i,a){this.a=e,this.b=t,this.c=r,this.normal=n instanceof THREE.Vector3?n:new THREE.Vector3,this.vertexNormals=Array.isArray(n)?n:[],this.color=i instanceof THREE.Color?i:new THREE.Color,this.vertexColors=Array.isArray(i)?i:[],this.materialIndex=void 0!==a?a:0},THREE.Face3.prototype={constructor:THREE.Face3,clone:function(){return(new this.constructor).copy(this)},copy:function(e){this.a=e.a,this.b=e.b,this.c=e.c,this.normal.copy(e.normal),this.color.copy(e.color),this.materialIndex=e.materialIndex;for(var t=0,r=e.vertexNormals.length;r>t;t++)this.vertexNormals[t]=e.vertexNormals[t].clone();for(var t=0,r=e.vertexColors.length;r>t;t++)this.vertexColors[t]=e.vertexColors[t].clone();return this}},THREE.BufferAttribute=function(e,t,r){this.uuid=THREE.Math.generateUUID(),this.array=e,this.itemSize=t,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0,this.normalized=r===!0},THREE.BufferAttribute.prototype={constructor:THREE.BufferAttribute,get count(){return this.array.length/this.itemSize},set needsUpdate(e){e===!0&&this.version++},setDynamic:function(e){return this.dynamic=e,this},copy:function(e){return this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.dynamic=e.dynamic,this},copyAt:function(e,t,r){e*=this.itemSize,r*=t.itemSize;for(var n=0,i=this.itemSize;i>n;n++)this.array[e+n]=t.array[r+n];return this},copyArray:function(e){return this.array.set(e),this},copyColorsArray:function(e){for(var t=this.array,r=0,n=0,i=e.length;i>n;n++){var a=e[n];void 0===a&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",n),a=new THREE.Color),t[r++]=a.r,t[r++]=a.g,t[r++]=a.b}return this},copyIndicesArray:function(e){for(var t=this.array,r=0,n=0,i=e.length;i>n;n++){var a=e[n];t[r++]=a.a,t[r++]=a.b,t[r++]=a.c}return this},copyVector2sArray:function(e){for(var t=this.array,r=0,n=0,i=e.length;i>n;n++){var a=e[n];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",n),a=new THREE.Vector2),t[r++]=a.x,t[r++]=a.y}return this},copyVector3sArray:function(e){for(var t=this.array,r=0,n=0,i=e.length;i>n;n++){var a=e[n];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",n),a=new THREE.Vector3),t[r++]=a.x,t[r++]=a.y,t[r++]=a.z}return this},copyVector4sArray:function(e){for(var t=this.array,r=0,n=0,i=e.length;i>n;n++){var a=e[n];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",n),a=new THREE.Vector4),t[r++]=a.x,t[r++]=a.y,t[r++]=a.z,t[r++]=a.w}return this},set:function(e,t){return void 0===t&&(t=0),this.array.set(e,t),this},getX:function(e){return this.array[e*this.itemSize]},setX:function(e,t){return this.array[e*this.itemSize]=t,this},getY:function(e){return this.array[e*this.itemSize+1]},setY:function(e,t){return this.array[e*this.itemSize+1]=t,this},getZ:function(e){return this.array[e*this.itemSize+2]},setZ:function(e,t){return this.array[e*this.itemSize+2]=t,this},getW:function(e){return this.array[e*this.itemSize+3]},setW:function(e,t){return this.array[e*this.itemSize+3]=t,this},setXY:function(e,t,r){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=r,this},setXYZ:function(e,t,r,n){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=r,this.array[e+2]=n,this},setXYZW:function(e,t,r,n,i){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=r,this.array[e+2]=n,this.array[e+3]=i,this},clone:function(){return(new this.constructor).copy(this)}},THREE.Int8Attribute=function(e,t){return new THREE.BufferAttribute(new Int8Array(e),t)},THREE.Uint8Attribute=function(e,t){return new THREE.BufferAttribute(new Uint8Array(e),t)},THREE.Uint8ClampedAttribute=function(e,t){return new THREE.BufferAttribute(new Uint8ClampedArray(e),t)},THREE.Int16Attribute=function(e,t){return new THREE.BufferAttribute(new Int16Array(e),t)},THREE.Uint16Attribute=function(e,t){return new THREE.BufferAttribute(new Uint16Array(e),t)},THREE.Int32Attribute=function(e,t){return new THREE.BufferAttribute(new Int32Array(e),t)},THREE.Uint32Attribute=function(e,t){return new THREE.BufferAttribute(new Uint32Array(e),t)},THREE.Float32Attribute=function(e,t){return new THREE.BufferAttribute(new Float32Array(e),t)},THREE.Float64Attribute=function(e,t){return new THREE.BufferAttribute(new Float64Array(e),t)},THREE.DynamicBufferAttribute=function(e,t){return console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead."),new THREE.BufferAttribute(e,t).setDynamic(!0)},THREE.InstancedBufferAttribute=function(e,t,r){THREE.BufferAttribute.call(this,e,t),this.meshPerAttribute=r||1},THREE.InstancedBufferAttribute.prototype=Object.create(THREE.BufferAttribute.prototype),THREE.InstancedBufferAttribute.prototype.constructor=THREE.InstancedBufferAttribute,THREE.InstancedBufferAttribute.prototype.copy=function(e){return THREE.BufferAttribute.prototype.copy.call(this,e),this.meshPerAttribute=e.meshPerAttribute,this},THREE.InterleavedBuffer=function(e,t){this.uuid=THREE.Math.generateUUID(),this.array=e,this.stride=t,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0},THREE.InterleavedBuffer.prototype={constructor:THREE.InterleavedBuffer,get length(){return this.array.length},get count(){return this.array.length/this.stride},set needsUpdate(e){e===!0&&this.version++},setDynamic:function(e){return this.dynamic=e,this},copy:function(e){return this.array=new e.array.constructor(e.array),this.stride=e.stride,this.dynamic=e.dynamic,this},copyAt:function(e,t,r){e*=this.stride,r*=t.stride;for(var n=0,i=this.stride;i>n;n++)this.array[e+n]=t.array[r+n];return this},set:function(e,t){return void 0===t&&(t=0),this.array.set(e,t),this},clone:function(){return(new this.constructor).copy(this)}},THREE.InstancedInterleavedBuffer=function(e,t,r){THREE.InterleavedBuffer.call(this,e,t),this.meshPerAttribute=r||1},THREE.InstancedInterleavedBuffer.prototype=Object.create(THREE.InterleavedBuffer.prototype),THREE.InstancedInterleavedBuffer.prototype.constructor=THREE.InstancedInterleavedBuffer,THREE.InstancedInterleavedBuffer.prototype.copy=function(e){return THREE.InterleavedBuffer.prototype.copy.call(this,e),this.meshPerAttribute=e.meshPerAttribute,this},THREE.InterleavedBufferAttribute=function(e,t,r){this.uuid=THREE.Math.generateUUID(),this.data=e,this.itemSize=t,this.offset=r},THREE.InterleavedBufferAttribute.prototype={constructor:THREE.InterleavedBufferAttribute,get length(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Please use .count."),this.array.length},get count(){return this.data.count},setX:function(e,t){return this.data.array[e*this.data.stride+this.offset]=t,this},setY:function(e,t){return this.data.array[e*this.data.stride+this.offset+1]=t,this},setZ:function(e,t){return this.data.array[e*this.data.stride+this.offset+2]=t,this},setW:function(e,t){return this.data.array[e*this.data.stride+this.offset+3]=t,this},getX:function(e){return this.data.array[e*this.data.stride+this.offset]},getY:function(e){return this.data.array[e*this.data.stride+this.offset+1]},getZ:function(e){return this.data.array[e*this.data.stride+this.offset+2]},getW:function(e){return this.data.array[e*this.data.stride+this.offset+3]},setXY:function(e,t,r){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=r,this},setXYZ:function(e,t,r,n){return e=e*this.data.stride+this.offset,
this.data.array[e+0]=t,this.data.array[e+1]=r,this.data.array[e+2]=n,this},setXYZW:function(e,t,r,n,i){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=r,this.data.array[e+2]=n,this.data.array[e+3]=i,this}},THREE.Geometry=function(){Object.defineProperty(this,"id",{value:THREE.GeometryIdCount++}),this.uuid=THREE.Math.generateUUID(),this.name="",this.type="Geometry",this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.elementsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.lineDistancesNeedUpdate=!1,this.groupsNeedUpdate=!1},Object.assign(THREE.Geometry.prototype,THREE.EventDispatcher.prototype,{applyMatrix:function(e){for(var t=(new THREE.Matrix3).getNormalMatrix(e),r=0,n=this.vertices.length;n>r;r++){var i=this.vertices[r];i.applyMatrix4(e)}for(var r=0,n=this.faces.length;n>r;r++){var a=this.faces[r];a.normal.applyMatrix3(t).normalize();for(var o=0,s=a.vertexNormals.length;s>o;o++)a.vertexNormals[o].applyMatrix3(t).normalize()}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this.verticesNeedUpdate=!0,this.normalsNeedUpdate=!0,this},rotateX:function(){var e;return function(t){return void 0===e&&(e=new THREE.Matrix4),e.makeRotationX(t),this.applyMatrix(e),this}}(),rotateY:function(){var e;return function(t){return void 0===e&&(e=new THREE.Matrix4),e.makeRotationY(t),this.applyMatrix(e),this}}(),rotateZ:function(){var e;return function(t){return void 0===e&&(e=new THREE.Matrix4),e.makeRotationZ(t),this.applyMatrix(e),this}}(),translate:function(){var e;return function(t,r,n){return void 0===e&&(e=new THREE.Matrix4),e.makeTranslation(t,r,n),this.applyMatrix(e),this}}(),scale:function(){var e;return function(t,r,n){return void 0===e&&(e=new THREE.Matrix4),e.makeScale(t,r,n),this.applyMatrix(e),this}}(),lookAt:function(){var e;return function(t){void 0===e&&(e=new THREE.Object3D),e.lookAt(t),e.updateMatrix(),this.applyMatrix(e.matrix)}}(),fromBufferGeometry:function(e){function t(e,t,n,i){var a=void 0!==o?[h[e].clone(),h[t].clone(),h[n].clone()]:[],p=void 0!==s?[r.colors[e].clone(),r.colors[t].clone(),r.colors[n].clone()]:[],f=new THREE.Face3(e,t,n,a,p,i);r.faces.push(f),void 0!==c&&r.faceVertexUvs[0].push([u[e].clone(),u[t].clone(),u[n].clone()]),void 0!==l&&r.faceVertexUvs[1].push([d[e].clone(),d[t].clone(),d[n].clone()])}var r=this,n=null!==e.index?e.index.array:void 0,i=e.attributes,a=i.position.array,o=void 0!==i.normal?i.normal.array:void 0,s=void 0!==i.color?i.color.array:void 0,c=void 0!==i.uv?i.uv.array:void 0,l=void 0!==i.uv2?i.uv2.array:void 0;void 0!==l&&(this.faceVertexUvs[1]=[]);for(var h=[],u=[],d=[],p=0,f=0;p<a.length;p+=3,f+=2)r.vertices.push(new THREE.Vector3(a[p],a[p+1],a[p+2])),void 0!==o&&h.push(new THREE.Vector3(o[p],o[p+1],o[p+2])),void 0!==s&&r.colors.push(new THREE.Color(s[p],s[p+1],s[p+2])),void 0!==c&&u.push(new THREE.Vector2(c[f],c[f+1])),void 0!==l&&d.push(new THREE.Vector2(l[f],l[f+1]));if(void 0!==n){var E=e.groups;if(E.length>0)for(var p=0;p<E.length;p++)for(var m=E[p],g=m.start,v=m.count,f=g,T=g+v;T>f;f+=3)t(n[f],n[f+1],n[f+2],m.materialIndex);else for(var p=0;p<n.length;p+=3)t(n[p],n[p+1],n[p+2])}else for(var p=0;p<a.length/3;p+=3)t(p,p+1,p+2);return this.computeFaceNormals(),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),this},center:function(){this.computeBoundingBox();var e=this.boundingBox.center().negate();return this.translate(e.x,e.y,e.z),e},normalize:function(){this.computeBoundingSphere();var e=this.boundingSphere.center,t=this.boundingSphere.radius,r=0===t?1:1/t,n=new THREE.Matrix4;return n.set(r,0,0,-r*e.x,0,r,0,-r*e.y,0,0,r,-r*e.z,0,0,0,1),this.applyMatrix(n),this},computeFaceNormals:function(){for(var e=new THREE.Vector3,t=new THREE.Vector3,r=0,n=this.faces.length;n>r;r++){var i=this.faces[r],a=this.vertices[i.a],o=this.vertices[i.b],s=this.vertices[i.c];e.subVectors(s,o),t.subVectors(a,o),e.cross(t),e.normalize(),i.normal.copy(e)}},computeVertexNormals:function(e){void 0===e&&(e=!0);var t,r,n,i,a,o;for(o=new Array(this.vertices.length),t=0,r=this.vertices.length;r>t;t++)o[t]=new THREE.Vector3;if(e){var s,c,l,h=new THREE.Vector3,u=new THREE.Vector3;for(n=0,i=this.faces.length;i>n;n++)a=this.faces[n],s=this.vertices[a.a],c=this.vertices[a.b],l=this.vertices[a.c],h.subVectors(l,c),u.subVectors(s,c),h.cross(u),o[a.a].add(h),o[a.b].add(h),o[a.c].add(h)}else for(n=0,i=this.faces.length;i>n;n++)a=this.faces[n],o[a.a].add(a.normal),o[a.b].add(a.normal),o[a.c].add(a.normal);for(t=0,r=this.vertices.length;r>t;t++)o[t].normalize();for(n=0,i=this.faces.length;i>n;n++){a=this.faces[n];var d=a.vertexNormals;3===d.length?(d[0].copy(o[a.a]),d[1].copy(o[a.b]),d[2].copy(o[a.c])):(d[0]=o[a.a].clone(),d[1]=o[a.b].clone(),d[2]=o[a.c].clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var e,t,r,n,i;for(r=0,n=this.faces.length;n>r;r++)for(i=this.faces[r],i.__originalFaceNormal?i.__originalFaceNormal.copy(i.normal):i.__originalFaceNormal=i.normal.clone(),i.__originalVertexNormals||(i.__originalVertexNormals=[]),e=0,t=i.vertexNormals.length;t>e;e++)i.__originalVertexNormals[e]?i.__originalVertexNormals[e].copy(i.vertexNormals[e]):i.__originalVertexNormals[e]=i.vertexNormals[e].clone();var a=new THREE.Geometry;for(a.faces=this.faces,e=0,t=this.morphTargets.length;t>e;e++){if(!this.morphNormals[e]){this.morphNormals[e]={},this.morphNormals[e].faceNormals=[],this.morphNormals[e].vertexNormals=[];var o,s,c=this.morphNormals[e].faceNormals,l=this.morphNormals[e].vertexNormals;for(r=0,n=this.faces.length;n>r;r++)o=new THREE.Vector3,s={a:new THREE.Vector3,b:new THREE.Vector3,c:new THREE.Vector3},c.push(o),l.push(s)}var h=this.morphNormals[e];a.vertices=this.morphTargets[e].vertices,a.computeFaceNormals(),a.computeVertexNormals();var o,s;for(r=0,n=this.faces.length;n>r;r++)i=this.faces[r],o=h.faceNormals[r],s=h.vertexNormals[r],o.copy(i.normal),s.a.copy(i.vertexNormals[0]),s.b.copy(i.vertexNormals[1]),s.c.copy(i.vertexNormals[2])}for(r=0,n=this.faces.length;n>r;r++)i=this.faces[r],i.normal=i.__originalFaceNormal,i.vertexNormals=i.__originalVertexNormals},computeTangents:function(){console.warn("THREE.Geometry: .computeTangents() has been removed.")},computeLineDistances:function(){for(var e=0,t=this.vertices,r=0,n=t.length;n>r;r++)r>0&&(e+=t[r].distanceTo(t[r-1])),this.lineDistances[r]=e},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3),this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new THREE.Sphere),this.boundingSphere.setFromPoints(this.vertices)},merge:function(e,t,r){if(e instanceof THREE.Geometry==!1)return void console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",e);var n,i=this.vertices.length,a=this.vertices,o=e.vertices,s=this.faces,c=e.faces,l=this.faceVertexUvs[0],h=e.faceVertexUvs[0];void 0===r&&(r=0),void 0!==t&&(n=(new THREE.Matrix3).getNormalMatrix(t));for(var u=0,d=o.length;d>u;u++){var p=o[u],f=p.clone();void 0!==t&&f.applyMatrix4(t),a.push(f)}for(u=0,d=c.length;d>u;u++){var E,m,g,v=c[u],T=v.vertexNormals,y=v.vertexColors;E=new THREE.Face3(v.a+i,v.b+i,v.c+i),E.normal.copy(v.normal),void 0!==n&&E.normal.applyMatrix3(n).normalize();for(var R=0,x=T.length;x>R;R++)m=T[R].clone(),void 0!==n&&m.applyMatrix3(n).normalize(),E.vertexNormals.push(m);E.color.copy(v.color);for(var R=0,x=y.length;x>R;R++)g=y[R],E.vertexColors.push(g.clone());E.materialIndex=v.materialIndex+r,s.push(E)}for(u=0,d=h.length;d>u;u++){var H=h[u],b=[];if(void 0!==H){for(var R=0,x=H.length;x>R;R++)b.push(H[R].clone());l.push(b)}}},mergeMesh:function(e){return e instanceof THREE.Mesh==!1?void console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",e):(e.matrixAutoUpdate&&e.updateMatrix(),void this.merge(e.geometry,e.matrix))},mergeVertices:function(){var e,t,r,n,i,a,o,s,c={},l=[],h=[],u=4,d=Math.pow(10,u);for(r=0,n=this.vertices.length;n>r;r++)e=this.vertices[r],t=Math.round(e.x*d)+"_"+Math.round(e.y*d)+"_"+Math.round(e.z*d),void 0===c[t]?(c[t]=r,l.push(this.vertices[r]),h[r]=l.length-1):h[r]=h[c[t]];var p=[];for(r=0,n=this.faces.length;n>r;r++){i=this.faces[r],i.a=h[i.a],i.b=h[i.b],i.c=h[i.c],a=[i.a,i.b,i.c];for(var f=-1,E=0;3>E;E++)if(a[E]===a[(E+1)%3]){f=E,p.push(r);break}}for(r=p.length-1;r>=0;r--){var m=p[r];for(this.faces.splice(m,1),o=0,s=this.faceVertexUvs.length;s>o;o++)this.faceVertexUvs[o].splice(m,1)}var g=this.vertices.length-l.length;return this.vertices=l,g},sortFacesByMaterialIndex:function(){function e(e,t){return e.materialIndex-t.materialIndex}for(var t=this.faces,r=t.length,n=0;r>n;n++)t[n]._id=n;t.sort(e);var i,a,o=this.faceVertexUvs[0],s=this.faceVertexUvs[1];o&&o.length===r&&(i=[]),s&&s.length===r&&(a=[]);for(var n=0;r>n;n++){var c=t[n]._id;i&&i.push(o[c]),a&&a.push(s[c])}i&&(this.faceVertexUvs[0]=i),a&&(this.faceVertexUvs[1]=a)},toJSON:function(){function e(e,t,r){return r?e|1<<t:e&~(1<<t)}function t(e){var t=e.x.toString()+e.y.toString()+e.z.toString();return void 0!==d[t]?d[t]:(d[t]=u.length/3,u.push(e.x,e.y,e.z),d[t])}function r(e){var t=e.r.toString()+e.g.toString()+e.b.toString();return void 0!==f[t]?f[t]:(f[t]=p.length,p.push(e.getHex()),f[t])}function n(e){var t=e.x.toString()+e.y.toString();return void 0!==m[t]?m[t]:(m[t]=E.length/2,E.push(e.x,e.y),m[t])}var i={metadata:{version:4.4,type:"Geometry",generator:"Geometry.toJSON"}};if(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),void 0!==this.parameters){var a=this.parameters;for(var o in a)void 0!==a[o]&&(i[o]=a[o]);return i}for(var s=[],c=0;c<this.vertices.length;c++){var l=this.vertices[c];s.push(l.x,l.y,l.z)}for(var h=[],u=[],d={},p=[],f={},E=[],m={},c=0;c<this.faces.length;c++){var g=this.faces[c],v=!0,T=!1,y=void 0!==this.faceVertexUvs[0][c],R=g.normal.length()>0,x=g.vertexNormals.length>0,H=1!==g.color.r||1!==g.color.g||1!==g.color.b,b=g.vertexColors.length>0,_=0;if(_=e(_,0,0),_=e(_,1,v),_=e(_,2,T),_=e(_,3,y),_=e(_,4,R),_=e(_,5,x),_=e(_,6,H),_=e(_,7,b),h.push(_),h.push(g.a,g.b,g.c),h.push(g.materialIndex),y){var M=this.faceVertexUvs[0][c];h.push(n(M[0]),n(M[1]),n(M[2]))}if(R&&h.push(t(g.normal)),x){var w=g.vertexNormals;h.push(t(w[0]),t(w[1]),t(w[2]))}if(H&&h.push(r(g.color)),b){var S=g.vertexColors;h.push(r(S[0]),r(S[1]),r(S[2]))}}return i.data={},i.data.vertices=s,i.data.normals=u,p.length>0&&(i.data.colors=p),E.length>0&&(i.data.uvs=[E]),i.data.faces=h,i},clone:function(){return(new THREE.Geometry).copy(this)},copy:function(e){this.vertices=[],this.faces=[],this.faceVertexUvs=[[]];for(var t=e.vertices,r=0,n=t.length;n>r;r++)this.vertices.push(t[r].clone());for(var i=e.faces,r=0,n=i.length;n>r;r++)this.faces.push(i[r].clone());for(var r=0,n=e.faceVertexUvs.length;n>r;r++){var a=e.faceVertexUvs[r];void 0===this.faceVertexUvs[r]&&(this.faceVertexUvs[r]=[]);for(var o=0,s=a.length;s>o;o++){for(var c=a[o],l=[],h=0,u=c.length;u>h;h++){var d=c[h];l.push(d.clone())}this.faceVertexUvs[r].push(l)}}return this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),THREE.GeometryIdCount=0,THREE.DirectGeometry=function(){Object.defineProperty(this,"id",{value:THREE.GeometryIdCount++}),this.uuid=THREE.Math.generateUUID(),this.name="",this.type="DirectGeometry",this.indices=[],this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.groupsNeedUpdate=!1},Object.assign(THREE.DirectGeometry.prototype,THREE.EventDispatcher.prototype,{computeBoundingBox:THREE.Geometry.prototype.computeBoundingBox,computeBoundingSphere:THREE.Geometry.prototype.computeBoundingSphere,computeFaceNormals:function(){console.warn("THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.")},computeVertexNormals:function(){console.warn("THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.")},computeGroups:function(e){for(var t,r,n=[],i=e.faces,a=0;a<i.length;a++){var o=i[a];o.materialIndex!==r&&(r=o.materialIndex,void 0!==t&&(t.count=3*a-t.start,n.push(t)),t={start:3*a,materialIndex:r})}void 0!==t&&(t.count=3*a-t.start,n.push(t)),this.groups=n},fromGeometry:function(e){var t,r=e.faces,n=e.vertices,i=e.faceVertexUvs,a=i[0]&&i[0].length>0,o=i[1]&&i[1].length>0,s=e.morphTargets,c=s.length;if(c>0){t=[];for(var l=0;c>l;l++)t[l]=[];this.morphTargets.position=t}var h,u=e.morphNormals,d=u.length;if(d>0){h=[];for(var l=0;d>l;l++)h[l]=[];this.morphTargets.normal=h}for(var p=e.skinIndices,f=e.skinWeights,E=p.length===n.length,m=f.length===n.length,l=0;l<r.length;l++){var g=r[l];this.vertices.push(n[g.a],n[g.b],n[g.c]);var v=g.vertexNormals;if(3===v.length)this.normals.push(v[0],v[1],v[2]);else{var T=g.normal;this.normals.push(T,T,T)}var y=g.vertexColors;if(3===y.length)this.colors.push(y[0],y[1],y[2]);else{var R=g.color;this.colors.push(R,R,R)}if(a===!0){var x=i[0][l];void 0!==x?this.uvs.push(x[0],x[1],x[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",l),this.uvs.push(new THREE.Vector2,new THREE.Vector2,new THREE.Vector2))}if(o===!0){var x=i[1][l];void 0!==x?this.uvs2.push(x[0],x[1],x[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",l),this.uvs2.push(new THREE.Vector2,new THREE.Vector2,new THREE.Vector2))}for(var H=0;c>H;H++){var b=s[H].vertices;t[H].push(b[g.a],b[g.b],b[g.c])}for(var H=0;d>H;H++){var _=u[H].vertexNormals[l];h[H].push(_.a,_.b,_.c)}E&&this.skinIndices.push(p[g.a],p[g.b],p[g.c]),m&&this.skinWeights.push(f[g.a],f[g.b],f[g.c])}return this.computeGroups(e),this.verticesNeedUpdate=e.verticesNeedUpdate,this.normalsNeedUpdate=e.normalsNeedUpdate,this.colorsNeedUpdate=e.colorsNeedUpdate,this.uvsNeedUpdate=e.uvsNeedUpdate,this.groupsNeedUpdate=e.groupsNeedUpdate,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),THREE.BufferGeometry=function(){Object.defineProperty(this,"id",{value:THREE.GeometryIdCount++}),this.uuid=THREE.Math.generateUUID(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0}},Object.assign(THREE.BufferGeometry.prototype,THREE.EventDispatcher.prototype,{getIndex:function(){return this.index},setIndex:function(e){this.index=e},addAttribute:function(e,t){return t instanceof THREE.BufferAttribute==!1&&t instanceof THREE.InterleavedBufferAttribute==!1?(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),void this.addAttribute(e,new THREE.BufferAttribute(arguments[1],arguments[2]))):"index"===e?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),void this.setIndex(t)):(this.attributes[e]=t,this)},getAttribute:function(e){return this.attributes[e]},removeAttribute:function(e){return delete this.attributes[e],this},addGroup:function(e,t,r){this.groups.push({start:e,count:t,materialIndex:void 0!==r?r:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(e,t){this.drawRange.start=e,this.drawRange.count=t},applyMatrix:function(e){var t=this.attributes.position;void 0!==t&&(e.applyToVector3Array(t.array),t.needsUpdate=!0);var r=this.attributes.normal;if(void 0!==r){var n=(new THREE.Matrix3).getNormalMatrix(e);n.applyToVector3Array(r.array),r.needsUpdate=!0}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},rotateX:function(){var e;return function(t){return void 0===e&&(e=new THREE.Matrix4),e.makeRotationX(t),this.applyMatrix(e),this}}(),rotateY:function(){var e;return function(t){return void 0===e&&(e=new THREE.Matrix4),e.makeRotationY(t),this.applyMatrix(e),this}}(),rotateZ:function(){var e;return function(t){return void 0===e&&(e=new THREE.Matrix4),e.makeRotationZ(t),this.applyMatrix(e),this}}(),translate:function(){var e;return function(t,r,n){return void 0===e&&(e=new THREE.Matrix4),e.makeTranslation(t,r,n),this.applyMatrix(e),this}}(),scale:function(){var e;return function(t,r,n){return void 0===e&&(e=new THREE.Matrix4),e.makeScale(t,r,n),this.applyMatrix(e),this}}(),lookAt:function(){var e;return function(t){void 0===e&&(e=new THREE.Object3D),e.lookAt(t),e.updateMatrix(),this.applyMatrix(e.matrix)}}(),center:function(){this.computeBoundingBox();var e=this.boundingBox.center().negate();return this.translate(e.x,e.y,e.z),e},setFromObject:function(e){var t=e.geometry;if(e instanceof THREE.Points||e instanceof THREE.Line){var r=new THREE.Float32Attribute(3*t.vertices.length,3),n=new THREE.Float32Attribute(3*t.colors.length,3);if(this.addAttribute("position",r.copyVector3sArray(t.vertices)),this.addAttribute("color",n.copyColorsArray(t.colors)),t.lineDistances&&t.lineDistances.length===t.vertices.length){var i=new THREE.Float32Attribute(t.lineDistances.length,1);this.addAttribute("lineDistance",i.copyArray(t.lineDistances))}null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone())}else e instanceof THREE.Mesh&&t instanceof THREE.Geometry&&this.fromGeometry(t);return this},updateFromObject:function(e){var t=e.geometry;if(e instanceof THREE.Mesh){var r=t.__directGeometry;if(void 0===r)return this.fromGeometry(t);r.verticesNeedUpdate=t.verticesNeedUpdate,r.normalsNeedUpdate=t.normalsNeedUpdate,r.colorsNeedUpdate=t.colorsNeedUpdate,r.uvsNeedUpdate=t.uvsNeedUpdate,r.groupsNeedUpdate=t.groupsNeedUpdate,t.verticesNeedUpdate=!1,t.normalsNeedUpdate=!1,t.colorsNeedUpdate=!1,t.uvsNeedUpdate=!1,t.groupsNeedUpdate=!1,t=r}if(t.verticesNeedUpdate===!0){var n=this.attributes.position;void 0!==n&&(n.copyVector3sArray(t.vertices),n.needsUpdate=!0),t.verticesNeedUpdate=!1}if(t.normalsNeedUpdate===!0){var n=this.attributes.normal;void 0!==n&&(n.copyVector3sArray(t.normals),n.needsUpdate=!0),t.normalsNeedUpdate=!1}if(t.colorsNeedUpdate===!0){var n=this.attributes.color;void 0!==n&&(n.copyColorsArray(t.colors),n.needsUpdate=!0),t.colorsNeedUpdate=!1}if(t.uvsNeedUpdate){var n=this.attributes.uv;void 0!==n&&(n.copyVector2sArray(t.uvs),n.needsUpdate=!0),t.uvsNeedUpdate=!1}if(t.lineDistancesNeedUpdate){var n=this.attributes.lineDistance;void 0!==n&&(n.copyArray(t.lineDistances),n.needsUpdate=!0),t.lineDistancesNeedUpdate=!1}return t.groupsNeedUpdate&&(t.computeGroups(e.geometry),this.groups=t.groups,t.groupsNeedUpdate=!1),this},fromGeometry:function(e){return e.__directGeometry=(new THREE.DirectGeometry).fromGeometry(e),this.fromDirectGeometry(e.__directGeometry)},fromDirectGeometry:function(e){var t=new Float32Array(3*e.vertices.length);if(this.addAttribute("position",new THREE.BufferAttribute(t,3).copyVector3sArray(e.vertices)),e.normals.length>0){var r=new Float32Array(3*e.normals.length);this.addAttribute("normal",new THREE.BufferAttribute(r,3).copyVector3sArray(e.normals))}if(e.colors.length>0){var n=new Float32Array(3*e.colors.length);this.addAttribute("color",new THREE.BufferAttribute(n,3).copyColorsArray(e.colors))}if(e.uvs.length>0){var i=new Float32Array(2*e.uvs.length);this.addAttribute("uv",new THREE.BufferAttribute(i,2).copyVector2sArray(e.uvs))}if(e.uvs2.length>0){var a=new Float32Array(2*e.uvs2.length);this.addAttribute("uv2",new THREE.BufferAttribute(a,2).copyVector2sArray(e.uvs2))}if(e.indices.length>0){var o=e.vertices.length>65535?Uint32Array:Uint16Array,s=new o(3*e.indices.length);this.setIndex(new THREE.BufferAttribute(s,1).copyIndicesArray(e.indices))}this.groups=e.groups;for(var c in e.morphTargets){for(var l=[],h=e.morphTargets[c],u=0,d=h.length;d>u;u++){var p=h[u],f=new THREE.Float32Attribute(3*p.length,3);l.push(f.copyVector3sArray(p))}this.morphAttributes[c]=l}if(e.skinIndices.length>0){var E=new THREE.Float32Attribute(4*e.skinIndices.length,4);this.addAttribute("skinIndex",E.copyVector4sArray(e.skinIndices))}if(e.skinWeights.length>0){var m=new THREE.Float32Attribute(4*e.skinWeights.length,4);this.addAttribute("skinWeight",m.copyVector4sArray(e.skinWeights))}return null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);var e=this.attributes.position.array;void 0!==e?this.boundingBox.setFromArray(e):this.boundingBox.makeEmpty(),(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)},computeBoundingSphere:function(){var e=new THREE.Box3,t=new THREE.Vector3;return function(){null===this.boundingSphere&&(this.boundingSphere=new THREE.Sphere);var r=this.attributes.position.array;if(r){var n=this.boundingSphere.center;e.setFromArray(r),e.center(n);for(var i=0,a=0,o=r.length;o>a;a+=3)t.fromArray(r,a),i=Math.max(i,n.distanceToSquared(t));this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}}(),computeFaceNormals:function(){},computeVertexNormals:function(){var e=this.index,t=this.attributes,r=this.groups;if(t.position){var n=t.position.array;if(void 0===t.normal)this.addAttribute("normal",new THREE.BufferAttribute(new Float32Array(n.length),3));else for(var i=t.normal.array,a=0,o=i.length;o>a;a++)i[a]=0;var s,c,l,h=t.normal.array,u=new THREE.Vector3,d=new THREE.Vector3,p=new THREE.Vector3,f=new THREE.Vector3,E=new THREE.Vector3;if(e){var m=e.array;0===r.length&&this.addGroup(0,m.length);for(var g=0,v=r.length;v>g;++g)for(var T=r[g],y=T.start,R=T.count,a=y,o=y+R;o>a;a+=3)s=3*m[a+0],c=3*m[a+1],l=3*m[a+2],u.fromArray(n,s),d.fromArray(n,c),p.fromArray(n,l),f.subVectors(p,d),E.subVectors(u,d),f.cross(E),h[s]+=f.x,h[s+1]+=f.y,h[s+2]+=f.z,h[c]+=f.x,h[c+1]+=f.y,h[c+2]+=f.z,h[l]+=f.x,h[l+1]+=f.y,h[l+2]+=f.z}else for(var a=0,o=n.length;o>a;a+=9)u.fromArray(n,a),d.fromArray(n,a+3),p.fromArray(n,a+6),f.subVectors(p,d),E.subVectors(u,d),f.cross(E),h[a]=f.x,h[a+1]=f.y,h[a+2]=f.z,h[a+3]=f.x,h[a+4]=f.y,h[a+5]=f.z,h[a+6]=f.x,h[a+7]=f.y,h[a+8]=f.z;this.normalizeNormals(),t.normal.needsUpdate=!0}},merge:function(e,t){if(e instanceof THREE.BufferGeometry==!1)return void console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",e);void 0===t&&(t=0);var r=this.attributes;for(var n in r)if(void 0!==e.attributes[n])for(var i=r[n],a=i.array,o=e.attributes[n],s=o.array,c=o.itemSize,l=0,h=c*t;l<s.length;l++,h++)a[h]=s[l];return this},normalizeNormals:function(){for(var e,t,r,n,i=this.attributes.normal.array,a=0,o=i.length;o>a;a+=3)e=i[a],t=i[a+1],r=i[a+2],n=1/Math.sqrt(e*e+t*t+r*r),i[a]*=n,i[a+1]*=n,i[a+2]*=n},toNonIndexed:function(){if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),this;var e=new THREE.BufferGeometry,t=this.index.array,r=this.attributes;for(var n in r){for(var i=r[n],a=i.array,o=i.itemSize,s=new a.constructor(t.length*o),c=0,l=0,h=0,u=t.length;u>h;h++){c=t[h]*o;for(var d=0;o>d;d++)s[l++]=a[c++]}e.addAttribute(n,new THREE.BufferAttribute(s,o))}return e},toJSON:function(){var e={metadata:{version:4.4,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),void 0!==this.parameters){var t=this.parameters;for(var r in t)void 0!==t[r]&&(e[r]=t[r]);return e}e.data={attributes:{}};var n=this.index;if(null!==n){var i=Array.prototype.slice.call(n.array);e.data.index={type:n.array.constructor.name,array:i}}var a=this.attributes;for(var r in a){var o=a[r],i=Array.prototype.slice.call(o.array);e.data.attributes[r]={itemSize:o.itemSize,type:o.array.constructor.name,array:i,normalized:o.normalized}}var s=this.groups;s.length>0&&(e.data.groups=JSON.parse(JSON.stringify(s)));var c=this.boundingSphere;return null!==c&&(e.data.boundingSphere={center:c.center.toArray(),radius:c.radius}),e},clone:function(){return(new THREE.BufferGeometry).copy(this)},copy:function(e){var t=e.index;null!==t&&this.setIndex(t.clone());var r=e.attributes;for(var n in r){var i=r[n];this.addAttribute(n,i.clone())}for(var a=e.groups,o=0,s=a.length;s>o;o++){var c=a[o];this.addGroup(c.start,c.count,c.materialIndex)}return this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),THREE.BufferGeometry.MaxIndex=65535,THREE.InstancedBufferGeometry=function(){THREE.BufferGeometry.call(this),this.type="InstancedBufferGeometry",this.maxInstancedCount=void 0},THREE.InstancedBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.InstancedBufferGeometry.prototype.constructor=THREE.InstancedBufferGeometry,THREE.InstancedBufferGeometry.prototype.addGroup=function(e,t,r){this.groups.push({start:e,count:t,instances:r})},THREE.InstancedBufferGeometry.prototype.copy=function(e){var t=e.index;null!==t&&this.setIndex(t.clone());var r=e.attributes;for(var n in r){var i=r[n];this.addAttribute(n,i.clone())}for(var a=e.groups,o=0,s=a.length;s>o;o++){var c=a[o];this.addGroup(c.start,c.count,c.instances)}return this},THREE.Uniform=function(e){"string"==typeof e&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),e=arguments[1]),this.value=e,this.dynamic=!1},THREE.Uniform.prototype={constructor:THREE.Uniform,onUpdate:function(e){return this.dynamic=!0,this.onUpdateCallback=e,this}},THREE.AnimationAction=function(){throw new Error("THREE.AnimationAction: Use mixer.clipAction for construction.")},THREE.AnimationAction._new=function(e,t,r){this._mixer=e,this._clip=t,this._localRoot=r||null;for(var n=t.tracks,i=n.length,a=new Array(i),o={endingStart:THREE.ZeroCurvatureEnding,endingEnd:THREE.ZeroCurvatureEnding},s=0;s!==i;++s){var c=n[s].createInterpolant(null);a[s]=c,c.settings=o}this._interpolantSettings=o,this._interpolants=a,this._propertyBindings=new Array(i),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=THREE.LoopRepeat,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0},THREE.AnimationAction._new.prototype={constructor:THREE.AnimationAction._new,play:function(){return this._mixer._activateAction(this),this},stop:function(){return this._mixer._deactivateAction(this),this.reset()},reset:function(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()},isRunning:function(){this._startTime;return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},startAt:function(e){return this._startTime=e,this},setLoop:function(e,t){return this.loop=e,this.repetitions=t,this},setEffectiveWeight:function(e){return this.weight=e,this._effectiveWeight=this.enabled?e:0,this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(e){return this._scheduleFading(e,0,1)},fadeOut:function(e){return this._scheduleFading(e,1,0)},crossFadeFrom:function(e,t,r){this._mixer;if(e.fadeOut(t),this.fadeIn(t),r){var n=this._clip.duration,i=e._clip.duration,a=i/n,o=n/i;e.warp(1,a,t),this.warp(o,1,t)}return this},crossFadeTo:function(e,t,r){return e.crossFadeFrom(this,t,r)},stopFading:function(){var e=this._weightInterpolant;return null!==e&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this},setEffectiveTimeScale:function(e){return this.timeScale=e,this._effectiveTimeScale=this.paused?0:e,this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(e){return this.timeScale=this._clip.duration/e,this.stopWarping()},syncWith:function(e){return this.time=e.time,this.timeScale=e.timeScale,this.stopWarping()},halt:function(e){return this.warp(this._effectiveTimeScale,0,e)},warp:function(e,t,r){var n=this._mixer,i=n.time,a=this._timeScaleInterpolant,o=this.timeScale;null===a&&(a=n._lendControlInterpolant(),this._timeScaleInterpolant=a);var s=a.parameterPositions,c=a.sampleValues;return s[0]=i,s[1]=i+r,c[0]=e/o,c[1]=t/o,this},stopWarping:function(){var e=this._timeScaleInterpolant;return null!==e&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||this._mixer._root},_update:function(e,t,r,n){var i=this._startTime;if(null!==i){var a=(e-i)*r;if(0>a||0===r)return;this._startTime=null,t=r*a}t*=this._updateTimeScale(e);var o=this._updateTime(t),s=this._updateWeight(e);if(s>0)for(var c=this._interpolants,l=this._propertyBindings,h=0,u=c.length;h!==u;++h)c[h].evaluate(o),l[h].accumulate(n,s)},_updateWeight:function(e){var t=0;if(this.enabled){t=this.weight;var r=this._weightInterpolant;if(null!==r){var n=r.evaluate(e)[0];t*=n,e>r.parameterPositions[1]&&(this.stopFading(),0===n&&(this.enabled=!1))}}return this._effectiveWeight=t,t},_updateTimeScale:function(e){var t=0;if(!this.paused){t=this.timeScale;var r=this._timeScaleInterpolant;if(null!==r){var n=r.evaluate(e)[0];t*=n,e>r.parameterPositions[1]&&(this.stopWarping(),0===t?this.paused=!0:this.timeScale=t)}}return this._effectiveTimeScale=t,t},_updateTime:function(e){var t=this.time+e;if(0===e)return t;var r=this._clip.duration,n=this.loop,i=this._loopCount;if(n===THREE.LoopOnce){-1===i&&(this.loopCount=0,this._setEndings(!0,!0,!1));e:{if(t>=r)t=r;else{if(!(0>t))break e;t=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this._mixer.dispatchEvent({type:"finished",action:this,direction:0>e?-1:1})}}else{var a=n===THREE.LoopPingPong;if(-1===i&&(e>=0?(i=0,this._setEndings(!0,0===this.repetitions,a)):this._setEndings(0===this.repetitions,!0,a)),t>=r||0>t){var o=Math.floor(t/r);t-=r*o,i+=Math.abs(o);var s=this.repetitions-i;if(0>s)this.clampWhenFinished?this.paused=!0:this.enabled=!1,t=e>0?r:0,this._mixer.dispatchEvent({type:"finished",action:this,direction:e>0?1:-1});else{if(0===s){var c=0>e;this._setEndings(c,!c,a)}else this._setEndings(!1,!1,a);this._loopCount=i,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:o})}}if(a&&1===(1&i))return this.time=t,r-t}return this.time=t,t},_setEndings:function(e,t,r){var n=this._interpolantSettings;r?(n.endingStart=THREE.ZeroSlopeEnding,n.endingEnd=THREE.ZeroSlopeEnding):(e?n.endingStart=this.zeroSlopeAtStart?THREE.ZeroSlopeEnding:THREE.ZeroCurvatureEnding:n.endingStart=THREE.WrapAroundEnding,t?n.endingEnd=this.zeroSlopeAtEnd?THREE.ZeroSlopeEnding:THREE.ZeroCurvatureEnding:n.endingEnd=THREE.WrapAroundEnding)},_scheduleFading:function(e,t,r){var n=this._mixer,i=n.time,a=this._weightInterpolant;null===a&&(a=n._lendControlInterpolant(),this._weightInterpolant=a);var o=a.parameterPositions,s=a.sampleValues;return o[0]=i,s[0]=t,o[1]=i+e,s[1]=r,this}},THREE.AnimationClip=function(e,t,r){this.name=e,this.tracks=r,this.duration=void 0!==t?t:-1,this.uuid=THREE.Math.generateUUID(),this.duration<0&&this.resetDuration(),this.trim(),this.optimize()},THREE.AnimationClip.prototype={constructor:THREE.AnimationClip,resetDuration:function(){for(var e=this.tracks,t=0,r=0,n=e.length;r!==n;++r){var i=this.tracks[r];t=Math.max(t,i.times[i.times.length-1]);
}this.duration=t},trim:function(){for(var e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this},optimize:function(){for(var e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this}},Object.assign(THREE.AnimationClip,{parse:function(e){for(var t=[],r=e.tracks,n=1/(e.fps||1),i=0,a=r.length;i!==a;++i)t.push(THREE.KeyframeTrack.parse(r[i]).scale(n));return new THREE.AnimationClip(e.name,e.duration,t)},toJSON:function(e){for(var t=[],r=e.tracks,n={name:e.name,duration:e.duration,tracks:t},i=0,a=r.length;i!==a;++i)t.push(THREE.KeyframeTrack.toJSON(r[i]));return n},CreateFromMorphTargetSequence:function(e,t,r,n){for(var i=t.length,a=[],o=0;i>o;o++){var s=[],c=[];s.push((o+i-1)%i,o,(o+1)%i),c.push(0,1,0);var l=THREE.AnimationUtils.getKeyframeOrder(s);s=THREE.AnimationUtils.sortedArray(s,1,l),c=THREE.AnimationUtils.sortedArray(c,1,l),n||0!==s[0]||(s.push(i),c.push(c[0])),a.push(new THREE.NumberKeyframeTrack(".morphTargetInfluences["+t[o].name+"]",s,c).scale(1/r))}return new THREE.AnimationClip(e,-1,a)},findByName:function(e,t){var r=e;if(!Array.isArray(e)){var n=e;r=n.geometry&&n.geometry.animations||n.animations}for(var i=0;i<r.length;i++)if(r[i].name===t)return r[i];return null},CreateClipsFromMorphTargetSequences:function(e,t,r){for(var n={},i=/^([\w-]*?)([\d]+)$/,a=0,o=e.length;o>a;a++){var s=e[a],c=s.name.match(i);if(c&&c.length>1){var l=c[1],h=n[l];h||(n[l]=h=[]),h.push(s)}}var u=[];for(var l in n)u.push(THREE.AnimationClip.CreateFromMorphTargetSequence(l,n[l],t,r));return u},parseAnimation:function(e,t,r){if(!e)return console.error("  no animation in JSONLoader data"),null;for(var n=function(e,t,r,n,i){if(0!==r.length){var a=[],o=[];THREE.AnimationUtils.flattenJSON(r,a,o,n),0!==a.length&&i.push(new e(t,a,o))}},i=[],a=e.name||"default",o=e.length||-1,s=e.fps||30,c=e.hierarchy||[],l=0;l<c.length;l++){var h=c[l].keys;if(h&&0!==h.length)if(h[0].morphTargets){for(var u={},d=0;d<h.length;d++)if(h[d].morphTargets)for(var p=0;p<h[d].morphTargets.length;p++)u[h[d].morphTargets[p]]=-1;for(var f in u){for(var E=[],m=[],p=0;p!==h[d].morphTargets.length;++p){var g=h[d];E.push(g.time),m.push(g.morphTarget===f?1:0)}i.push(new THREE.NumberKeyframeTrack(".morphTargetInfluence["+f+"]",E,m))}o=u.length*(s||1)}else{var v=".bones["+t[l].name+"]";n(THREE.VectorKeyframeTrack,v+".position",h,"pos",i),n(THREE.QuaternionKeyframeTrack,v+".quaternion",h,"rot",i),n(THREE.VectorKeyframeTrack,v+".scale",h,"scl",i)}}if(0===i.length)return null;var T=new THREE.AnimationClip(a,o,i);return T}}),THREE.AnimationMixer=function(e){this._root=e,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1},Object.assign(THREE.AnimationMixer.prototype,THREE.EventDispatcher.prototype,{clipAction:function(e,t){var r=t||this._root,n=r.uuid,i="string"==typeof e?THREE.AnimationClip.findByName(r,e):e,a=null!==i?i.uuid:e,o=this._actionsByClip[a],s=null;if(void 0!==o){var c=o.actionByRoot[n];if(void 0!==c)return c;s=o.knownActions[0],null===i&&(i=s._clip)}if(null===i)return null;var l=new THREE.AnimationMixer._Action(this,i,t);return this._bindAction(l,s),this._addInactiveAction(l,a,n),l},existingAction:function(e,t){var r=t||this._root,n=r.uuid,i="string"==typeof e?THREE.AnimationClip.findByName(r,e):e,a=i?i.uuid:e,o=this._actionsByClip[a];return void 0!==o?o.actionByRoot[n]||null:null},stopAllAction:function(){var e=this._actions,t=this._nActiveActions,r=this._bindings,n=this._nActiveBindings;this._nActiveActions=0,this._nActiveBindings=0;for(var i=0;i!==t;++i)e[i].reset();for(var i=0;i!==n;++i)r[i].useCount=0;return this},update:function(e){e*=this.timeScale;for(var t=this._actions,r=this._nActiveActions,n=this.time+=e,i=Math.sign(e),a=this._accuIndex^=1,o=0;o!==r;++o){var s=t[o];s.enabled&&s._update(n,e,i,a)}for(var c=this._bindings,l=this._nActiveBindings,o=0;o!==l;++o)c[o].apply(a);return this},getRoot:function(){return this._root},uncacheClip:function(e){var t=this._actions,r=e.uuid,n=this._actionsByClip,i=n[r];if(void 0!==i){for(var a=i.knownActions,o=0,s=a.length;o!==s;++o){var c=a[o];this._deactivateAction(c);var l=c._cacheIndex,h=t[t.length-1];c._cacheIndex=null,c._byClipCacheIndex=null,h._cacheIndex=l,t[l]=h,t.pop(),this._removeInactiveBindingsForAction(c)}delete n[r]}},uncacheRoot:function(e){var t=e.uuid,r=this._actionsByClip;for(var n in r){var i=r[n].actionByRoot,a=i[t];void 0!==a&&(this._deactivateAction(a),this._removeInactiveAction(a))}var o=this._bindingsByRootAndName,s=o[t];if(void 0!==s)for(var c in s){var l=s[c];l.restoreOriginalState(),this._removeInactiveBinding(l)}},uncacheAction:function(e,t){var r=this.existingAction(e,t);null!==r&&(this._deactivateAction(r),this._removeInactiveAction(r))}}),THREE.AnimationMixer._Action=THREE.AnimationAction._new,Object.assign(THREE.AnimationMixer.prototype,{_bindAction:function(e,t){var r=e._localRoot||this._root,n=e._clip.tracks,i=n.length,a=e._propertyBindings,o=e._interpolants,s=r.uuid,c=this._bindingsByRootAndName,l=c[s];void 0===l&&(l={},c[s]=l);for(var h=0;h!==i;++h){var u=n[h],d=u.name,p=l[d];if(void 0!==p)a[h]=p;else{if(p=a[h],void 0!==p){null===p._cacheIndex&&(++p.referenceCount,this._addInactiveBinding(p,s,d));continue}var f=t&&t._propertyBindings[h].binding.parsedPath;p=new THREE.PropertyMixer(THREE.PropertyBinding.create(r,d,f),u.ValueTypeName,u.getValueSize()),++p.referenceCount,this._addInactiveBinding(p,s,d),a[h]=p}o[h].resultBuffer=p.buffer}},_activateAction:function(e){if(!this._isActiveAction(e)){if(null===e._cacheIndex){var t=(e._localRoot||this._root).uuid,r=e._clip.uuid,n=this._actionsByClip[r];this._bindAction(e,n&&n.knownActions[0]),this._addInactiveAction(e,r,t)}for(var i=e._propertyBindings,a=0,o=i.length;a!==o;++a){var s=i[a];0===s.useCount++&&(this._lendBinding(s),s.saveOriginalState())}this._lendAction(e)}},_deactivateAction:function(e){if(this._isActiveAction(e)){for(var t=e._propertyBindings,r=0,n=t.length;r!==n;++r){var i=t[r];0===--i.useCount&&(i.restoreOriginalState(),this._takeBackBinding(i))}this._takeBackAction(e)}},_initMemoryManager:function(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;var e=this;this.stats={actions:{get total(){return e._actions.length},get inUse(){return e._nActiveActions}},bindings:{get total(){return e._bindings.length},get inUse(){return e._nActiveBindings}},controlInterpolants:{get total(){return e._controlInterpolants.length},get inUse(){return e._nActiveControlInterpolants}}}},_isActiveAction:function(e){var t=e._cacheIndex;return null!==t&&t<this._nActiveActions},_addInactiveAction:function(e,t,r){var n=this._actions,i=this._actionsByClip,a=i[t];if(void 0===a)a={knownActions:[e],actionByRoot:{}},e._byClipCacheIndex=0,i[t]=a;else{var o=a.knownActions;e._byClipCacheIndex=o.length,o.push(e)}e._cacheIndex=n.length,n.push(e),a.actionByRoot[r]=e},_removeInactiveAction:function(e){var t=this._actions,r=t[t.length-1],n=e._cacheIndex;r._cacheIndex=n,t[n]=r,t.pop(),e._cacheIndex=null;var i=e._clip.uuid,a=this._actionsByClip,o=a[i],s=o.knownActions,c=s[s.length-1],l=e._byClipCacheIndex;c._byClipCacheIndex=l,s[l]=c,s.pop(),e._byClipCacheIndex=null;var h=o.actionByRoot,u=(t._localRoot||this._root).uuid;delete h[u],0===s.length&&delete a[i],this._removeInactiveBindingsForAction(e)},_removeInactiveBindingsForAction:function(e){for(var t=e._propertyBindings,r=0,n=t.length;r!==n;++r){var i=t[r];0===--i.referenceCount&&this._removeInactiveBinding(i)}},_lendAction:function(e){var t=this._actions,r=e._cacheIndex,n=this._nActiveActions++,i=t[n];e._cacheIndex=n,t[n]=e,i._cacheIndex=r,t[r]=i},_takeBackAction:function(e){var t=this._actions,r=e._cacheIndex,n=--this._nActiveActions,i=t[n];e._cacheIndex=n,t[n]=e,i._cacheIndex=r,t[r]=i},_addInactiveBinding:function(e,t,r){var n=this._bindingsByRootAndName,i=n[t],a=this._bindings;void 0===i&&(i={},n[t]=i),i[r]=e,e._cacheIndex=a.length,a.push(e)},_removeInactiveBinding:function(e){var t=this._bindings,r=e.binding,n=r.rootNode.uuid,i=r.path,a=this._bindingsByRootAndName,o=a[n],s=t[t.length-1],c=e._cacheIndex;s._cacheIndex=c,t[c]=s,t.pop(),delete o[i];e:{for(var l in o)break e;delete a[n]}},_lendBinding:function(e){var t=this._bindings,r=e._cacheIndex,n=this._nActiveBindings++,i=t[n];e._cacheIndex=n,t[n]=e,i._cacheIndex=r,t[r]=i},_takeBackBinding:function(e){var t=this._bindings,r=e._cacheIndex,n=--this._nActiveBindings,i=t[n];e._cacheIndex=n,t[n]=e,i._cacheIndex=r,t[r]=i},_lendControlInterpolant:function(){var e=this._controlInterpolants,t=this._nActiveControlInterpolants++,r=e[t];return void 0===r&&(r=new THREE.LinearInterpolant(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),r.__cacheIndex=t,e[t]=r),r},_takeBackControlInterpolant:function(e){var t=this._controlInterpolants,r=e.__cacheIndex,n=--this._nActiveControlInterpolants,i=t[n];e.__cacheIndex=n,t[n]=e,i.__cacheIndex=r,t[r]=i},_controlInterpolantsResultBuffer:new Float32Array(1)}),THREE.AnimationObjectGroup=function(e){this.uuid=THREE.Math.generateUUID(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;var t={};this._indicesByUUID=t;for(var r=0,n=arguments.length;r!==n;++r)t[arguments[r].uuid]=r;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};var i=this;this.stats={objects:{get total(){return i._objects.length},get inUse(){return this.total-i.nCachedObjects_}},get bindingsPerObject(){return i._bindings.length}}},THREE.AnimationObjectGroup.prototype={constructor:THREE.AnimationObjectGroup,add:function(e){for(var t=this._objects,r=t.length,n=this.nCachedObjects_,i=this._indicesByUUID,a=this._paths,o=this._parsedPaths,s=this._bindings,c=s.length,l=0,h=arguments.length;l!==h;++l){var u=arguments[l],d=u.uuid,p=i[d];if(void 0===p){p=r++,i[d]=p,t.push(u);for(var f=0,E=c;f!==E;++f)s[f].push(new THREE.PropertyBinding(u,a[f],o[f]))}else if(n>p){var m=t[p],g=--n,v=t[g];i[v.uuid]=p,t[p]=v,i[d]=g,t[g]=u;for(var f=0,E=c;f!==E;++f){var T=s[f],y=T[g],R=T[p];T[p]=y,void 0===R&&(R=new THREE.PropertyBinding(u,a[f],o[f])),T[g]=R}}else t[p]!==m&&console.error("Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes...")}this.nCachedObjects_=n},remove:function(e){for(var t=this._objects,r=(t.length,this.nCachedObjects_),n=this._indicesByUUID,i=this._bindings,a=i.length,o=0,s=arguments.length;o!==s;++o){var c=arguments[o],l=c.uuid,h=n[l];if(void 0!==h&&h>=r){var u=r++,d=t[u];n[d.uuid]=h,t[h]=d,n[l]=u,t[u]=c;for(var p=0,f=a;p!==f;++p){var E=i[p],m=E[u],g=E[h];E[h]=m,E[u]=g}}}this.nCachedObjects_=r},uncache:function(e){for(var t=this._objects,r=t.length,n=this.nCachedObjects_,i=this._indicesByUUID,a=this._bindings,o=a.length,s=0,c=arguments.length;s!==c;++s){var l=arguments[s],h=l.uuid,u=i[h];if(void 0!==u)if(delete i[h],n>u){var d=--n,p=t[d],f=--r,E=t[f];i[p.uuid]=u,t[u]=p,i[E.uuid]=d,t[d]=E,t.pop();for(var m=0,g=o;m!==g;++m){var v=a[m],T=v[d],y=v[f];v[u]=T,v[d]=y,v.pop()}}else{var f=--r,E=t[f];i[E.uuid]=u,t[u]=E,t.pop();for(var m=0,g=o;m!==g;++m){var v=a[m];v[u]=v[f],v.pop()}}}this.nCachedObjects_=n},subscribe_:function(e,t){var r=this._bindingsIndicesByPath,n=r[e],i=this._bindings;if(void 0!==n)return i[n];var a=this._paths,o=this._parsedPaths,s=this._objects,c=s.length,l=this.nCachedObjects_,h=new Array(c);n=i.length,r[e]=n,a.push(e),o.push(t),i.push(h);for(var u=l,d=s.length;u!==d;++u){var p=s[u];h[u]=new THREE.PropertyBinding(p,e,t)}return h},unsubscribe_:function(e){var t=this._bindingsIndicesByPath,r=t[e];if(void 0!==r){var n=this._paths,i=this._parsedPaths,a=this._bindings,o=a.length-1,s=a[o],c=e[o];t[c]=r,a[r]=s,a.pop(),i[r]=i[o],i.pop(),n[r]=n[o],n.pop()}}},THREE.AnimationUtils={arraySlice:function(e,t,r){return THREE.AnimationUtils.isTypedArray(e)?new e.constructor(e.subarray(t,r)):e.slice(t,r)},convertArray:function(e,t,r){return!e||!r&&e.constructor===t?e:"number"==typeof t.BYTES_PER_ELEMENT?new t(e):Array.prototype.slice.call(e)},isTypedArray:function(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)},getKeyframeOrder:function(e){function t(t,r){return e[t]-e[r]}for(var r=e.length,n=new Array(r),i=0;i!==r;++i)n[i]=i;return n.sort(t),n},sortedArray:function(e,t,r){for(var n=e.length,i=new e.constructor(n),a=0,o=0;o!==n;++a)for(var s=r[a]*t,c=0;c!==t;++c)i[o++]=e[s+c];return i},flattenJSON:function(e,t,r,n){for(var i=1,a=e[0];void 0!==a&&void 0===a[n];)a=e[i++];if(void 0!==a){var o=a[n];if(void 0!==o)if(Array.isArray(o)){do o=a[n],void 0!==o&&(t.push(a.time),r.push.apply(r,o)),a=e[i++];while(void 0!==a)}else if(void 0!==o.toArray){do o=a[n],void 0!==o&&(t.push(a.time),o.toArray(r,r.length)),a=e[i++];while(void 0!==a)}else do o=a[n],void 0!==o&&(t.push(a.time),r.push(o)),a=e[i++];while(void 0!==a)}}},THREE.KeyframeTrack=function(e,t,r,n){if(void 0===e)throw new Error("track name is undefined");if(void 0===t||0===t.length)throw new Error("no keyframes in track named "+e);this.name=e,this.times=THREE.AnimationUtils.convertArray(t,this.TimeBufferType),this.values=THREE.AnimationUtils.convertArray(r,this.ValueBufferType),this.setInterpolation(n||this.DefaultInterpolation),this.validate(),this.optimize()},THREE.KeyframeTrack.prototype={constructor:THREE.KeyframeTrack,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:THREE.InterpolateLinear,InterpolantFactoryMethodDiscrete:function(e){return new THREE.DiscreteInterpolant(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodLinear:function(e){return new THREE.LinearInterpolant(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodSmooth:function(e){return new THREE.CubicInterpolant(this.times,this.values,this.getValueSize(),e)},setInterpolation:function(e){var t;switch(e){case THREE.InterpolateDiscrete:t=this.InterpolantFactoryMethodDiscrete;break;case THREE.InterpolateLinear:t=this.InterpolantFactoryMethodLinear;break;case THREE.InterpolateSmooth:t=this.InterpolantFactoryMethodSmooth}if(void 0===t){var r="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(e===this.DefaultInterpolation)throw new Error(r);this.setInterpolation(this.DefaultInterpolation)}return void console.warn(r)}this.createInterpolant=t},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return THREE.InterpolateDiscrete;case this.InterpolantFactoryMethodLinear:return THREE.InterpolateLinear;case this.InterpolantFactoryMethodSmooth:return THREE.InterpolateSmooth}},getValueSize:function(){return this.values.length/this.times.length},shift:function(e){if(0!==e)for(var t=this.times,r=0,n=t.length;r!==n;++r)t[r]+=e;return this},scale:function(e){if(1!==e)for(var t=this.times,r=0,n=t.length;r!==n;++r)t[r]*=e;return this},trim:function(e,t){for(var r=this.times,n=r.length,i=0,a=n-1;i!==n&&r[i]<e;)++i;for(;-1!==a&&r[a]>t;)--a;if(++a,0!==i||a!==n){i>=a&&(a=Math.max(a,1),i=a-1);var o=this.getValueSize();this.times=THREE.AnimationUtils.arraySlice(r,i,a),this.values=THREE.AnimationUtils.arraySlice(this.values,i*o,a*o)}return this},validate:function(){var e=!0,t=this.getValueSize();t-Math.floor(t)!==0&&(console.error("invalid value size in track",this),e=!1);var r=this.times,n=this.values,i=r.length;0===i&&(console.error("track is empty",this),e=!1);for(var a=null,o=0;o!==i;o++){var s=r[o];if("number"==typeof s&&isNaN(s)){console.error("time is not a valid number",this,o,s),e=!1;break}if(null!==a&&a>s){console.error("out of order keys",this,o,s,a),e=!1;break}a=s}if(void 0!==n&&THREE.AnimationUtils.isTypedArray(n))for(var o=0,c=n.length;o!==c;++o){var l=n[o];if(isNaN(l)){console.error("value is not a valid number",this,o,l),e=!1;break}}return e},optimize:function(){for(var e=this.times,t=this.values,r=this.getValueSize(),n=1,i=1,a=e.length-1;a>=i;++i){var o=!1,s=e[i],c=e[i+1];if(s!==c&&(1!==i||s!==s[0]))for(var l=i*r,h=l-r,u=l+r,d=0;d!==r;++d){var p=t[l+d];if(p!==t[h+d]||p!==t[u+d]){o=!0;break}}if(o){if(i!==n){e[n]=e[i];for(var f=i*r,E=n*r,d=0;d!==r;++d)t[E+d]=t[f+d]}++n}}return n!==e.length&&(this.times=THREE.AnimationUtils.arraySlice(e,0,n),this.values=THREE.AnimationUtils.arraySlice(t,0,n*r)),this}},Object.assign(THREE.KeyframeTrack,{parse:function(e){if(void 0===e.type)throw new Error("track type undefined, can not parse");var t=THREE.KeyframeTrack._getTrackTypeForValueTypeName(e.type);if(void 0===e.times){var r=[],n=[];THREE.AnimationUtils.flattenJSON(e.keys,r,n,"value"),e.times=r,e.values=n}return void 0!==t.parse?t.parse(e):new t(e.name,e.times,e.values,e.interpolation)},toJSON:function(e){var t,r=e.constructor;if(void 0!==r.toJSON)t=r.toJSON(e);else{t={name:e.name,times:THREE.AnimationUtils.convertArray(e.times,Array),values:THREE.AnimationUtils.convertArray(e.values,Array)};var n=e.getInterpolation();n!==e.DefaultInterpolation&&(t.interpolation=n)}return t.type=e.ValueTypeName,t},_getTrackTypeForValueTypeName:function(e){switch(e.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return THREE.NumberKeyframeTrack;case"vector":case"vector2":case"vector3":case"vector4":return THREE.VectorKeyframeTrack;case"color":return THREE.ColorKeyframeTrack;case"quaternion":return THREE.QuaternionKeyframeTrack;case"bool":case"boolean":return THREE.BooleanKeyframeTrack;case"string":return THREE.StringKeyframeTrack}throw new Error("Unsupported typeName: "+e)}}),THREE.PropertyBinding=function(e,t,r){this.path=t,this.parsedPath=r||THREE.PropertyBinding.parseTrackName(t),this.node=THREE.PropertyBinding.findNode(e,this.parsedPath.nodeName)||e,this.rootNode=e},THREE.PropertyBinding.prototype={constructor:THREE.PropertyBinding,getValue:function(e,t){this.bind(),this.getValue(e,t)},setValue:function(e,t){this.bind(),this.setValue(e,t)},bind:function(){var e=this.node,t=this.parsedPath,r=t.objectName,n=t.propertyName,i=t.propertyIndex;if(e||(e=THREE.PropertyBinding.findNode(this.rootNode,t.nodeName)||this.rootNode,this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!e)return void console.error("  trying to update node for track: "+this.path+" but it wasn't found.");if(r){var a=t.objectIndex;switch(r){case"materials":if(!e.material)return void console.error("  can not bind to material as node does not have a material",this);if(!e.material.materials)return void console.error("  can not bind to material.materials as node.material does not have a materials array",this);e=e.material.materials;break;case"bones":if(!e.skeleton)return void console.error("  can not bind to bones as node does not have a skeleton",this);e=e.skeleton.bones;for(var o=0;o<e.length;o++)if(e[o].name===a){a=o;break}break;default:if(void 0===e[r])return void console.error("  can not bind to objectName of node, undefined",this);e=e[r]}if(void 0!==a){if(void 0===e[a])return void console.error("  trying to bind to objectIndex of objectName, but is undefined:",this,e);e=e[a]}}var s=e[n];if(!s){var c=t.nodeName;return void console.error("  trying to update property for track: "+c+"."+n+" but it wasn't found.",e)}var l=this.Versioning.None;void 0!==e.needsUpdate?(l=this.Versioning.NeedsUpdate,this.targetObject=e):void 0!==e.matrixWorldNeedsUpdate&&(l=this.Versioning.MatrixWorldNeedsUpdate,this.targetObject=e);var h=this.BindingType.Direct;if(void 0!==i){if("morphTargetInfluences"===n){if(!e.geometry)return void console.error("  can not bind to morphTargetInfluences becasuse node does not have a geometry",this);if(!e.geometry.morphTargets)return void console.error("  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets",this);for(var o=0;o<this.node.geometry.morphTargets.length;o++)if(e.geometry.morphTargets[o].name===i){i=o;break}}h=this.BindingType.ArrayElement,this.resolvedProperty=s,this.propertyIndex=i}else void 0!==s.fromArray&&void 0!==s.toArray?(h=this.BindingType.HasFromToArray,this.resolvedProperty=s):void 0!==s.length?(h=this.BindingType.EntireArray,this.resolvedProperty=s):this.propertyName=n;this.getValue=this.GetterByBindingType[h],this.setValue=this.SetterByBindingTypeAndVersioning[h][l]},unbind:function(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}},Object.assign(THREE.PropertyBinding.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},_getValue_unbound:THREE.PropertyBinding.prototype.getValue,_setValue_unbound:THREE.PropertyBinding.prototype.setValue,BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function(e,t){e[t]=this.node[this.propertyName]},function(e,t){for(var r=this.resolvedProperty,n=0,i=r.length;n!==i;++n)e[t++]=r[n]},function(e,t){e[t]=this.resolvedProperty[this.propertyIndex]},function(e,t){this.resolvedProperty.toArray(e,t)}],SetterByBindingTypeAndVersioning:[[function(e,t){this.node[this.propertyName]=e[t]},function(e,t){this.node[this.propertyName]=e[t],this.targetObject.needsUpdate=!0},function(e,t){this.node[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){for(var r=this.resolvedProperty,n=0,i=r.length;n!==i;++n)r[n]=e[t++]},function(e,t){for(var r=this.resolvedProperty,n=0,i=r.length;n!==i;++n)r[n]=e[t++];this.targetObject.needsUpdate=!0},function(e,t){for(var r=this.resolvedProperty,n=0,i=r.length;n!==i;++n)r[n]=e[t++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){this.resolvedProperty[this.propertyIndex]=e[t]},function(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0},function(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){this.resolvedProperty.fromArray(e,t)},function(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0},function(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.matrixWorldNeedsUpdate=!0}]]}),THREE.PropertyBinding.Composite=function(e,t,r){var n=r||THREE.PropertyBinding.parseTrackName(t);this._targetGroup=e,this._bindings=e.subscribe_(t,n)},THREE.PropertyBinding.Composite.prototype={constructor:THREE.PropertyBinding.Composite,getValue:function(e,t){this.bind();var r=this._targetGroup.nCachedObjects_,n=this._bindings[r];void 0!==n&&n.getValue(e,t)},setValue:function(e,t){for(var r=this._bindings,n=this._targetGroup.nCachedObjects_,i=r.length;n!==i;++n)r[n].setValue(e,t)},bind:function(){for(var e=this._bindings,t=this._targetGroup.nCachedObjects_,r=e.length;t!==r;++t)e[t].bind()},unbind:function(){for(var e=this._bindings,t=this._targetGroup.nCachedObjects_,r=e.length;t!==r;++t)e[t].unbind()}},THREE.PropertyBinding.create=function(e,t,r){return e instanceof THREE.AnimationObjectGroup?new THREE.PropertyBinding.Composite(e,t,r):new THREE.PropertyBinding(e,t,r)},THREE.PropertyBinding.parseTrackName=function(e){var t=/^(([\w]+\/)*)([\w-\d]+)?(\.([\w]+)(\[([\w\d\[\]\_.:\- ]+)\])?)?(\.([\w.]+)(\[([\w\d\[\]\_. ]+)\])?)$/,r=t.exec(e);if(!r)throw new Error("cannot parse trackName at all: "+e);r.index===t.lastIndex&&t.lastIndex++;var n={nodeName:r[3],objectName:r[5],objectIndex:r[7],propertyName:r[9],propertyIndex:r[11]};if(null===n.propertyName||0===n.propertyName.length)throw new Error("can not parse propertyName from trackName: "+e);return n},THREE.PropertyBinding.findNode=function(e,t){if(!t||""===t||"root"===t||"."===t||-1===t||t===e.name||t===e.uuid)return e;if(e.skeleton){var r=function(e){for(var r=0;r<e.bones.length;r++){var n=e.bones[r];if(n.name===t)return n}return null},n=r(e.skeleton);if(n)return n}if(e.children){var i=function(e){for(var r=0;r<e.length;r++){var n=e[r];if(n.name===t||n.uuid===t)return n;var a=i(n.children);if(a)return a}return null},a=i(e.children);if(a)return a}return null},THREE.PropertyMixer=function(e,t,r){this.binding=e,this.valueSize=r;var n,i=Float64Array;switch(t){case"quaternion":n=this._slerp;break;case"string":case"bool":i=Array,n=this._select;break;default:n=this._lerp}this.buffer=new i(4*r),this._mixBufferRegion=n,this.cumulativeWeight=0,this.useCount=0,this.referenceCount=0},THREE.PropertyMixer.prototype={constructor:THREE.PropertyMixer,accumulate:function(e,t){var r=this.buffer,n=this.valueSize,i=e*n+n,a=this.cumulativeWeight;if(0===a){for(var o=0;o!==n;++o)r[i+o]=r[o];a=t}else{a+=t;var s=t/a;this._mixBufferRegion(r,i,0,s,n)}this.cumulativeWeight=a},apply:function(e){var t=this.valueSize,r=this.buffer,n=e*t+t,i=this.cumulativeWeight,a=this.binding;if(this.cumulativeWeight=0,1>i){var o=3*t;this._mixBufferRegion(r,n,o,1-i,t)}for(var s=t,c=t+t;s!==c;++s)if(r[s]!==r[s+t]){a.setValue(r,n);break}},saveOriginalState:function(){var e=this.binding,t=this.buffer,r=this.valueSize,n=3*r;e.getValue(t,n);for(var i=r,a=n;i!==a;++i)t[i]=t[n+i%r];this.cumulativeWeight=0},restoreOriginalState:function(){var e=3*this.valueSize;this.binding.setValue(this.buffer,e)},_select:function(e,t,r,n,i){if(n>=.5)for(var a=0;a!==i;++a)e[t+a]=e[r+a]},_slerp:function(e,t,r,n,i){THREE.Quaternion.slerpFlat(e,t,e,t,e,r,n)},_lerp:function(e,t,r,n,i){for(var a=1-n,o=0;o!==i;++o){var s=t+o;e[s]=e[s]*a+e[r+o]*n}}},THREE.BooleanKeyframeTrack=function(e,t,r){THREE.KeyframeTrack.call(this,e,t,r)},THREE.BooleanKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.BooleanKeyframeTrack,ValueTypeName:"bool",ValueBufferType:Array,DefaultInterpolation:THREE.InterpolateDiscrete,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),THREE.ColorKeyframeTrack=function(e,t,r,n){THREE.KeyframeTrack.call(this,e,t,r,n)},THREE.ColorKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.ColorKeyframeTrack,ValueTypeName:"color"}),THREE.NumberKeyframeTrack=function(e,t,r,n){THREE.KeyframeTrack.call(this,e,t,r,n)},THREE.NumberKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.NumberKeyframeTrack,ValueTypeName:"number"}),THREE.QuaternionKeyframeTrack=function(e,t,r,n){THREE.KeyframeTrack.call(this,e,t,r,n)},THREE.QuaternionKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.QuaternionKeyframeTrack,ValueTypeName:"quaternion",DefaultInterpolation:THREE.InterpolateLinear,InterpolantFactoryMethodLinear:function(e){return new THREE.QuaternionLinearInterpolant(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodSmooth:void 0}),THREE.StringKeyframeTrack=function(e,t,r,n){THREE.KeyframeTrack.call(this,e,t,r,n)},THREE.StringKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.StringKeyframeTrack,ValueTypeName:"string",ValueBufferType:Array,DefaultInterpolation:THREE.InterpolateDiscrete,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),THREE.VectorKeyframeTrack=function(e,t,r,n){THREE.KeyframeTrack.call(this,e,t,r,n)},THREE.VectorKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.VectorKeyframeTrack,ValueTypeName:"vector"}),THREE.Audio=function(e){THREE.Object3D.call(this),this.type="Audio",this.context=e.context,this.source=this.context.createBufferSource(),this.source.onended=this.onEnded.bind(this),this.gain=this.context.createGain(),this.gain.connect(e.getInput()),this.autoplay=!1,this.startTime=0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.sourceType="empty",this.filters=[]},THREE.Audio.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Audio,getOutput:function(){return this.gain},setNodeSource:function(e){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=e,this.connect(),this},setBuffer:function(e){return this.source.buffer=e,this.sourceType="buffer",this.autoplay&&this.play(),this},play:function(){if(this.isPlaying===!0)return void console.warn("THREE.Audio: Audio is already playing.");if(this.hasPlaybackControl===!1)return void console.warn("THREE.Audio: this Audio has no playback control.");var e=this.context.createBufferSource();return e.buffer=this.source.buffer,e.loop=this.source.loop,e.onended=this.source.onended,e.start(0,this.startTime),e.playbackRate.value=this.playbackRate,this.isPlaying=!0,this.source=e,this.connect()},pause:function(){return this.hasPlaybackControl===!1?void console.warn("THREE.Audio: this Audio has no playback control."):(this.source.stop(),this.startTime=this.context.currentTime,this)},stop:function(){return this.hasPlaybackControl===!1?void console.warn("THREE.Audio: this Audio has no playback control."):(this.source.stop(),this.startTime=0,this)},connect:function(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(var e=1,t=this.filters.length;t>e;e++)this.filters[e-1].connect(this.filters[e]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this},disconnect:function(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(var e=1,t=this.filters.length;t>e;e++)this.filters[e-1].disconnect(this.filters[e]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this},getFilters:function(){return this.filters},setFilters:function(e){return e||(e=[]),this.isPlaying===!0?(this.disconnect(),this.filters=e,this.connect()):this.filters=e,this},getFilter:function(){return this.getFilters()[0]},setFilter:function(e){return this.setFilters(e?[e]:[])},setPlaybackRate:function(e){return this.hasPlaybackControl===!1?void console.warn("THREE.Audio: this Audio has no playback control."):(this.playbackRate=e,this.isPlaying===!0&&(this.source.playbackRate.value=this.playbackRate),this)},getPlaybackRate:function(){return this.playbackRate},onEnded:function(){this.isPlaying=!1},getLoop:function(){return this.hasPlaybackControl===!1?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.source.loop},setLoop:function(e){return this.hasPlaybackControl===!1?void console.warn("THREE.Audio: this Audio has no playback control."):void(this.source.loop=e)},getVolume:function(){return this.gain.gain.value},setVolume:function(e){return this.gain.gain.value=e,this}}),THREE.AudioAnalyser=function(e,t){this.analyser=e.context.createAnalyser(),this.analyser.fftSize=void 0!==t?t:2048,this.data=new Uint8Array(this.analyser.frequencyBinCount),e.getOutput().connect(this.analyser)},Object.assign(THREE.AudioAnalyser.prototype,{getFrequencyData:function(){return this.analyser.getByteFrequencyData(this.data),this.data},getAverageFrequency:function(){for(var e=0,t=this.getFrequencyData(),r=0;r<t.length;r++)e+=t[r];return e/t.length}}),Object.defineProperty(THREE,"AudioContext",{get:function(){var e;return function(){return void 0===e&&(e=new(window.AudioContext||window.webkitAudioContext)),e}}()}),THREE.PositionalAudio=function(e){THREE.Audio.call(this,e),this.panner=this.context.createPanner(),this.panner.connect(this.gain)},THREE.PositionalAudio.prototype=Object.assign(Object.create(THREE.Audio.prototype),{constructor:THREE.PositionalAudio,getOutput:function(){return this.panner},getRefDistance:function(){return this.panner.refDistance},setRefDistance:function(e){this.panner.refDistance=e},getRolloffFactor:function(){return this.panner.rolloffFactor},setRolloffFactor:function(e){this.panner.rolloffFactor=e},getDistanceModel:function(){return this.panner.distanceModel},setDistanceModel:function(e){this.panner.distanceModel=e},getMaxDistance:function(){return this.panner.maxDistance},setMaxDistance:function(e){this.panner.maxDistance=e},updateMatrixWorld:function(){var e=new THREE.Vector3;return function(t){THREE.Object3D.prototype.updateMatrixWorld.call(this,t),e.setFromMatrixPosition(this.matrixWorld),this.panner.setPosition(e.x,e.y,e.z)}}()}),THREE.AudioListener=function(){
THREE.Object3D.call(this),this.type="AudioListener",this.context=THREE.AudioContext,this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null},THREE.AudioListener.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.AudioListener,getInput:function(){return this.gain},removeFilter:function(){null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null)},getFilter:function(){return this.filter},setFilter:function(e){null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=e,this.gain.connect(this.filter),this.filter.connect(this.context.destination)},getMasterVolume:function(){return this.gain.gain.value},setMasterVolume:function(e){this.gain.gain.value=e},updateMatrixWorld:function(){var e=new THREE.Vector3,t=new THREE.Quaternion,r=new THREE.Vector3,n=new THREE.Vector3;return function(i){THREE.Object3D.prototype.updateMatrixWorld.call(this,i);var a=this.context.listener,o=this.up;this.matrixWorld.decompose(e,t,r),n.set(0,0,-1).applyQuaternion(t),a.setPosition(e.x,e.y,e.z),a.setOrientation(n.x,n.y,n.z,o.x,o.y,o.z)}}()}),THREE.Camera=function(){THREE.Object3D.call(this),this.type="Camera",this.matrixWorldInverse=new THREE.Matrix4,this.projectionMatrix=new THREE.Matrix4},THREE.Camera.prototype=Object.create(THREE.Object3D.prototype),THREE.Camera.prototype.constructor=THREE.Camera,THREE.Camera.prototype.getWorldDirection=function(){var e=new THREE.Quaternion;return function(t){var r=t||new THREE.Vector3;return this.getWorldQuaternion(e),r.set(0,0,-1).applyQuaternion(e)}}(),THREE.Camera.prototype.lookAt=function(){var e=new THREE.Matrix4;return function(t){e.lookAt(this.position,t,this.up),this.quaternion.setFromRotationMatrix(e)}}(),THREE.Camera.prototype.clone=function(){return(new this.constructor).copy(this)},THREE.Camera.prototype.copy=function(e){return THREE.Object3D.prototype.copy.call(this,e),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this},THREE.CubeCamera=function(e,t,r){THREE.Object3D.call(this),this.type="CubeCamera";var n=90,i=1,a=new THREE.PerspectiveCamera(n,i,e,t);a.up.set(0,-1,0),a.lookAt(new THREE.Vector3(1,0,0)),this.add(a);var o=new THREE.PerspectiveCamera(n,i,e,t);o.up.set(0,-1,0),o.lookAt(new THREE.Vector3(-1,0,0)),this.add(o);var s=new THREE.PerspectiveCamera(n,i,e,t);s.up.set(0,0,1),s.lookAt(new THREE.Vector3(0,1,0)),this.add(s);var c=new THREE.PerspectiveCamera(n,i,e,t);c.up.set(0,0,-1),c.lookAt(new THREE.Vector3(0,-1,0)),this.add(c);var l=new THREE.PerspectiveCamera(n,i,e,t);l.up.set(0,-1,0),l.lookAt(new THREE.Vector3(0,0,1)),this.add(l);var h=new THREE.PerspectiveCamera(n,i,e,t);h.up.set(0,-1,0),h.lookAt(new THREE.Vector3(0,0,-1)),this.add(h);var u={format:THREE.RGBFormat,magFilter:THREE.LinearFilter,minFilter:THREE.LinearFilter};this.renderTarget=new THREE.WebGLRenderTargetCube(r,r,u),this.updateCubeMap=function(e,t){null===this.parent&&this.updateMatrixWorld();var r=this.renderTarget,n=r.texture.generateMipmaps;r.texture.generateMipmaps=!1,r.activeCubeFace=0,e.render(t,a,r),r.activeCubeFace=1,e.render(t,o,r),r.activeCubeFace=2,e.render(t,s,r),r.activeCubeFace=3,e.render(t,c,r),r.activeCubeFace=4,e.render(t,l,r),r.texture.generateMipmaps=n,r.activeCubeFace=5,e.render(t,h,r),e.setRenderTarget(null)}},THREE.CubeCamera.prototype=Object.create(THREE.Object3D.prototype),THREE.CubeCamera.prototype.constructor=THREE.CubeCamera,THREE.OrthographicCamera=function(e,t,r,n,i,a){THREE.Camera.call(this),this.type="OrthographicCamera",this.zoom=1,this.left=e,this.right=t,this.top=r,this.bottom=n,this.near=void 0!==i?i:.1,this.far=void 0!==a?a:2e3,this.updateProjectionMatrix()},THREE.OrthographicCamera.prototype=Object.assign(Object.create(THREE.Camera.prototype),{constructor:THREE.OrthographicCamera,copy:function(e){return THREE.Camera.prototype.copy.call(this,e),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this},updateProjectionMatrix:function(){var e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),r=(this.right+this.left)/2,n=(this.top+this.bottom)/2;this.projectionMatrix.makeOrthographic(r-e,r+e,n+t,n-t,this.near,this.far)},toJSON:function(e){var t=THREE.Object3D.prototype.toJSON.call(this,e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,t}}),THREE.PerspectiveCamera=function(e,t,r,n){THREE.Camera.call(this),this.type="PerspectiveCamera",this.fov=void 0!==e?e:50,this.zoom=1,this.near=void 0!==r?r:.1,this.far=void 0!==n?n:2e3,this.focus=10,this.aspect=void 0!==t?t:1,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()},THREE.PerspectiveCamera.prototype=Object.assign(Object.create(THREE.Camera.prototype),{constructor:THREE.PerspectiveCamera,copy:function(e){return THREE.Camera.prototype.copy.call(this,e),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=null===e.view?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this},setFocalLength:function(e){var t=.5*this.getFilmHeight()/e;this.fov=2*THREE.Math.RAD2DEG*Math.atan(t),this.updateProjectionMatrix()},getFocalLength:function(){var e=Math.tan(.5*THREE.Math.DEG2RAD*this.fov);return.5*this.getFilmHeight()/e},getEffectiveFOV:function(){return 2*THREE.Math.RAD2DEG*Math.atan(Math.tan(.5*THREE.Math.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(e,t,r,n,i,a){this.aspect=e/t,this.view={fullWidth:e,fullHeight:t,offsetX:r,offsetY:n,width:i,height:a},this.updateProjectionMatrix()},clearViewOffset:function(){this.view=null,this.updateProjectionMatrix()},updateProjectionMatrix:function(){var e=this.near,t=e*Math.tan(.5*THREE.Math.DEG2RAD*this.fov)/this.zoom,r=2*t,n=this.aspect*r,i=-.5*n,a=this.view;if(null!==a){var o=a.fullWidth,s=a.fullHeight;i+=a.offsetX*n/o,t-=a.offsetY*r/s,n*=a.width/o,r*=a.height/s}var c=this.filmOffset;0!==c&&(i+=e*c/this.getFilmWidth()),this.projectionMatrix.makeFrustum(i,i+n,t-r,t,e,this.far)},toJSON:function(e){var t=THREE.Object3D.prototype.toJSON.call(this,e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,null!==this.view&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}),THREE.StereoCamera=function(){this.type="StereoCamera",this.aspect=1,this.cameraL=new THREE.PerspectiveCamera,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new THREE.PerspectiveCamera,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1},Object.assign(THREE.StereoCamera.prototype,{update:function(){var e,t,r,n,i,a=new THREE.Matrix4,o=new THREE.Matrix4;return function(s){var c=e!==s.focus||t!==s.fov||r!==s.aspect*this.aspect||n!==s.near||i!==s.far;if(c){e=s.focus,t=s.fov,r=s.aspect*this.aspect,n=s.near,i=s.far;var l,h,u=s.projectionMatrix.clone(),d=.032,p=d*n/e,f=n*Math.tan(THREE.Math.DEG2RAD*t*.5);o.elements[12]=-d,a.elements[12]=d,l=-f*r+p,h=f*r+p,u.elements[0]=2*n/(h-l),u.elements[8]=(h+l)/(h-l),this.cameraL.projectionMatrix.copy(u),l=-f*r-p,h=f*r-p,u.elements[0]=2*n/(h-l),u.elements[8]=(h+l)/(h-l),this.cameraR.projectionMatrix.copy(u)}this.cameraL.matrixWorld.copy(s.matrixWorld).multiply(o),this.cameraR.matrixWorld.copy(s.matrixWorld).multiply(a)}}()}),THREE.Light=function(e,t){THREE.Object3D.call(this),this.type="Light",this.color=new THREE.Color(e),this.intensity=void 0!==t?t:1,this.receiveShadow=void 0},THREE.Light.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Light,copy:function(e){return THREE.Object3D.prototype.copy.call(this,e),this.color.copy(e.color),this.intensity=e.intensity,this},toJSON:function(e){var t=THREE.Object3D.prototype.toJSON.call(this,e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,void 0!==this.groundColor&&(t.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(t.object.distance=this.distance),void 0!==this.angle&&(t.object.angle=this.angle),void 0!==this.decay&&(t.object.decay=this.decay),void 0!==this.penumbra&&(t.object.penumbra=this.penumbra),t}}),THREE.LightShadow=function(e){this.camera=e,this.bias=0,this.radius=1,this.mapSize=new THREE.Vector2(512,512),this.map=null,this.matrix=new THREE.Matrix4},Object.assign(THREE.LightShadow.prototype,{copy:function(e){return this.camera=e.camera.clone(),this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this},clone:function(){return(new this.constructor).copy(this)}}),THREE.AmbientLight=function(e,t){THREE.Light.call(this,e,t),this.type="AmbientLight",this.castShadow=void 0},THREE.AmbientLight.prototype=Object.assign(Object.create(THREE.Light.prototype),{constructor:THREE.AmbientLight}),THREE.DirectionalLight=function(e,t){THREE.Light.call(this,e,t),this.type="DirectionalLight",this.position.set(0,1,0),this.updateMatrix(),this.target=new THREE.Object3D,this.shadow=new THREE.DirectionalLightShadow},THREE.DirectionalLight.prototype=Object.assign(Object.create(THREE.Light.prototype),{constructor:THREE.DirectionalLight,copy:function(e){return THREE.Light.prototype.copy.call(this,e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}),THREE.DirectionalLightShadow=function(e){THREE.LightShadow.call(this,new THREE.OrthographicCamera(-5,5,5,-5,.5,500))},THREE.DirectionalLightShadow.prototype=Object.assign(Object.create(THREE.LightShadow.prototype),{constructor:THREE.DirectionalLightShadow}),THREE.HemisphereLight=function(e,t,r){THREE.Light.call(this,e,r),this.type="HemisphereLight",this.castShadow=void 0,this.position.set(0,1,0),this.updateMatrix(),this.groundColor=new THREE.Color(t)},THREE.HemisphereLight.prototype=Object.assign(Object.create(THREE.Light.prototype),{constructor:THREE.HemisphereLight,copy:function(e){return THREE.Light.prototype.copy.call(this,e),this.groundColor.copy(e.groundColor),this}}),THREE.PointLight=function(e,t,r,n){THREE.Light.call(this,e,t),this.type="PointLight",Object.defineProperty(this,"power",{get:function(){return 4*this.intensity*Math.PI},set:function(e){this.intensity=e/(4*Math.PI)}}),this.distance=void 0!==r?r:0,this.decay=void 0!==n?n:1,this.shadow=new THREE.LightShadow(new THREE.PerspectiveCamera(90,1,.5,500))},THREE.PointLight.prototype=Object.assign(Object.create(THREE.Light.prototype),{constructor:THREE.PointLight,copy:function(e){return THREE.Light.prototype.copy.call(this,e),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}),THREE.SpotLight=function(e,t,r,n,i,a){THREE.Light.call(this,e,t),this.type="SpotLight",this.position.set(0,1,0),this.updateMatrix(),this.target=new THREE.Object3D,Object.defineProperty(this,"power",{get:function(){return this.intensity*Math.PI},set:function(e){this.intensity=e/Math.PI}}),this.distance=void 0!==r?r:0,this.angle=void 0!==n?n:Math.PI/3,this.penumbra=void 0!==i?i:0,this.decay=void 0!==a?a:1,this.shadow=new THREE.SpotLightShadow},THREE.SpotLight.prototype=Object.assign(Object.create(THREE.Light.prototype),{constructor:THREE.SpotLight,copy:function(e){return THREE.Light.prototype.copy.call(this,e),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}),THREE.SpotLightShadow=function(){THREE.LightShadow.call(this,new THREE.PerspectiveCamera(50,1,.5,500))},THREE.SpotLightShadow.prototype=Object.assign(Object.create(THREE.LightShadow.prototype),{constructor:THREE.SpotLightShadow,update:function(e){var t=2*THREE.Math.RAD2DEG*e.angle,r=this.mapSize.width/this.mapSize.height,n=e.distance||500,i=this.camera;t===i.fov&&r===i.aspect&&n===i.far||(i.fov=t,i.aspect=r,i.far=n,i.updateProjectionMatrix())}}),THREE.AudioLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager},THREE.AudioLoader.prototype={constructor:THREE.AudioLoader,load:function(e,t,r,n){var i=new THREE.XHRLoader(this.manager);i.setResponseType("arraybuffer"),i.load(e,function(e){var r=THREE.AudioContext;r.decodeAudioData(e,function(e){t(e)})},r,n)}},THREE.Cache={enabled:!1,files:{},add:function(e,t){this.enabled!==!1&&(this.files[e]=t)},get:function(e){return this.enabled!==!1?this.files[e]:void 0},remove:function(e){delete this.files[e]},clear:function(){this.files={}}},THREE.Loader=function(){this.onLoadStart=function(){},this.onLoadProgress=function(){},this.onLoadComplete=function(){}},THREE.Loader.prototype={constructor:THREE.Loader,crossOrigin:void 0,extractUrlBase:function(e){var t=e.split("/");return 1===t.length?"./":(t.pop(),t.join("/")+"/")},initMaterials:function(e,t,r){for(var n=[],i=0;i<e.length;++i)n[i]=this.createMaterial(e[i],t,r);return n},createMaterial:function(){var e,t,r;return function(n,i,a){function o(e,r,n,o,c){var l,h=i+e,u=THREE.Loader.Handlers.get(h);null!==u?l=u.load(h):(t.setCrossOrigin(a),l=t.load(h)),void 0!==r&&(l.repeat.fromArray(r),1!==r[0]&&(l.wrapS=THREE.RepeatWrapping),1!==r[1]&&(l.wrapT=THREE.RepeatWrapping)),void 0!==n&&l.offset.fromArray(n),void 0!==o&&("repeat"===o[0]&&(l.wrapS=THREE.RepeatWrapping),"mirror"===o[0]&&(l.wrapS=THREE.MirroredRepeatWrapping),"repeat"===o[1]&&(l.wrapT=THREE.RepeatWrapping),"mirror"===o[1]&&(l.wrapT=THREE.MirroredRepeatWrapping)),void 0!==c&&(l.anisotropy=c);var d=THREE.Math.generateUUID();return s[d]=l,d}void 0===e&&(e=new THREE.Color),void 0===t&&(t=new THREE.TextureLoader),void 0===r&&(r=new THREE.MaterialLoader);var s={},c={uuid:THREE.Math.generateUUID(),type:"MeshLambertMaterial"};for(var l in n){var h=n[l];switch(l){case"DbgColor":case"DbgIndex":case"opticalDensity":case"illumination":break;case"DbgName":c.name=h;break;case"blending":c.blending=THREE[h];break;case"colorAmbient":case"mapAmbient":console.warn("THREE.Loader.createMaterial:",l,"is no longer supported.");break;case"colorDiffuse":c.color=e.fromArray(h).getHex();break;case"colorSpecular":c.specular=e.fromArray(h).getHex();break;case"colorEmissive":c.emissive=e.fromArray(h).getHex();break;case"specularCoef":c.shininess=h;break;case"shading":"basic"===h.toLowerCase()&&(c.type="MeshBasicMaterial"),"phong"===h.toLowerCase()&&(c.type="MeshPhongMaterial");break;case"mapDiffuse":c.map=o(h,n.mapDiffuseRepeat,n.mapDiffuseOffset,n.mapDiffuseWrap,n.mapDiffuseAnisotropy);break;case"mapDiffuseRepeat":case"mapDiffuseOffset":case"mapDiffuseWrap":case"mapDiffuseAnisotropy":break;case"mapLight":c.lightMap=o(h,n.mapLightRepeat,n.mapLightOffset,n.mapLightWrap,n.mapLightAnisotropy);break;case"mapLightRepeat":case"mapLightOffset":case"mapLightWrap":case"mapLightAnisotropy":break;case"mapAO":c.aoMap=o(h,n.mapAORepeat,n.mapAOOffset,n.mapAOWrap,n.mapAOAnisotropy);break;case"mapAORepeat":case"mapAOOffset":case"mapAOWrap":case"mapAOAnisotropy":break;case"mapBump":c.bumpMap=o(h,n.mapBumpRepeat,n.mapBumpOffset,n.mapBumpWrap,n.mapBumpAnisotropy);break;case"mapBumpScale":c.bumpScale=h;break;case"mapBumpRepeat":case"mapBumpOffset":case"mapBumpWrap":case"mapBumpAnisotropy":break;case"mapNormal":c.normalMap=o(h,n.mapNormalRepeat,n.mapNormalOffset,n.mapNormalWrap,n.mapNormalAnisotropy);break;case"mapNormalFactor":c.normalScale=[h,h];break;case"mapNormalRepeat":case"mapNormalOffset":case"mapNormalWrap":case"mapNormalAnisotropy":break;case"mapSpecular":c.specularMap=o(h,n.mapSpecularRepeat,n.mapSpecularOffset,n.mapSpecularWrap,n.mapSpecularAnisotropy);break;case"mapSpecularRepeat":case"mapSpecularOffset":case"mapSpecularWrap":case"mapSpecularAnisotropy":break;case"mapAlpha":c.alphaMap=o(h,n.mapAlphaRepeat,n.mapAlphaOffset,n.mapAlphaWrap,n.mapAlphaAnisotropy);break;case"mapAlphaRepeat":case"mapAlphaOffset":case"mapAlphaWrap":case"mapAlphaAnisotropy":break;case"flipSided":c.side=THREE.BackSide;break;case"doubleSided":c.side=THREE.DoubleSide;break;case"transparency":console.warn("THREE.Loader.createMaterial: transparency has been renamed to opacity"),c.opacity=h;break;case"depthTest":case"depthWrite":case"colorWrite":case"opacity":case"reflectivity":case"transparent":case"visible":case"wireframe":c[l]=h;break;case"vertexColors":h===!0&&(c.vertexColors=THREE.VertexColors),"face"===h&&(c.vertexColors=THREE.FaceColors);break;default:console.error("THREE.Loader.createMaterial: Unsupported",l,h)}}return"MeshBasicMaterial"===c.type&&delete c.emissive,"MeshPhongMaterial"!==c.type&&delete c.specular,c.opacity<1&&(c.transparent=!0),r.setTextures(s),r.parse(c)}}()},THREE.Loader.Handlers={handlers:[],add:function(e,t){this.handlers.push(e,t)},get:function(e){for(var t=this.handlers,r=0,n=t.length;n>r;r+=2){var i=t[r],a=t[r+1];if(i.test(e))return a}return null}},THREE.XHRLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager},THREE.XHRLoader.prototype={constructor:THREE.XHRLoader,load:function(e,t,r,n){void 0!==this.path&&(e=this.path+e);var i=this,a=THREE.Cache.get(e);if(void 0!==a)return t&&setTimeout(function(){t(a)},0),a;var o=new XMLHttpRequest;return o.overrideMimeType("text/plain"),o.open("GET",e,!0),o.addEventListener("load",function(r){var a=r.target.response;THREE.Cache.add(e,a),200===this.status?(t&&t(a),i.manager.itemEnd(e)):0===this.status?(console.warn("THREE.XHRLoader: HTTP Status 0 received."),t&&t(a),i.manager.itemEnd(e)):(n&&n(r),i.manager.itemError(e))},!1),void 0!==r&&o.addEventListener("progress",function(e){r(e)},!1),o.addEventListener("error",function(t){n&&n(t),i.manager.itemError(e)},!1),void 0!==this.responseType&&(o.responseType=this.responseType),void 0!==this.withCredentials&&(o.withCredentials=this.withCredentials),o.send(null),i.manager.itemStart(e),o},setPath:function(e){this.path=e},setResponseType:function(e){this.responseType=e},setWithCredentials:function(e){this.withCredentials=e}},THREE.FontLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager},THREE.FontLoader.prototype={constructor:THREE.FontLoader,load:function(e,t,r,n){var i=this,a=new THREE.XHRLoader(this.manager);a.load(e,function(e){var r;try{r=JSON.parse(e)}catch(n){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),r=JSON.parse(e.substring(65,e.length-2))}var a=i.parse(r);t&&t(a)},r,n)},parse:function(e){return new THREE.Font(e)}},THREE.ImageLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager},THREE.ImageLoader.prototype={constructor:THREE.ImageLoader,load:function(e,t,r,n){void 0!==this.path&&(e=this.path+e);var i=this,a=THREE.Cache.get(e);if(void 0!==a)return i.manager.itemStart(e),t?setTimeout(function(){t(a),i.manager.itemEnd(e)},0):i.manager.itemEnd(e),a;var o=document.createElement("img");return o.addEventListener("load",function(r){THREE.Cache.add(e,this),t&&t(this),i.manager.itemEnd(e)},!1),void 0!==r&&o.addEventListener("progress",function(e){r(e)},!1),o.addEventListener("error",function(t){n&&n(t),i.manager.itemError(e)},!1),void 0!==this.crossOrigin&&(o.crossOrigin=this.crossOrigin),i.manager.itemStart(e),o.src=e,o},setCrossOrigin:function(e){this.crossOrigin=e},setPath:function(e){this.path=e}},THREE.JSONLoader=function(e){"boolean"==typeof e&&(console.warn("THREE.JSONLoader: showStatus parameter has been removed from constructor."),e=void 0),this.manager=void 0!==e?e:THREE.DefaultLoadingManager,this.withCredentials=!1},THREE.JSONLoader.prototype={constructor:THREE.JSONLoader,get statusDomElement(){return void 0===this._statusDomElement&&(this._statusDomElement=document.createElement("div")),console.warn("THREE.JSONLoader: .statusDomElement has been removed."),this._statusDomElement},load:function(e,t,r,n){var i=this,a=this.texturePath&&"string"==typeof this.texturePath?this.texturePath:THREE.Loader.prototype.extractUrlBase(e),o=new THREE.XHRLoader(this.manager);o.setWithCredentials(this.withCredentials),o.load(e,function(r){var n=JSON.parse(r),o=n.metadata;if(void 0!==o){var s=o.type;if(void 0!==s){if("object"===s.toLowerCase())return void console.error("THREE.JSONLoader: "+e+" should be loaded with THREE.ObjectLoader instead.");if("scene"===s.toLowerCase())return void console.error("THREE.JSONLoader: "+e+" should be loaded with THREE.SceneLoader instead.")}}var c=i.parse(n,a);t(c.geometry,c.materials)},r,n)},setTexturePath:function(e){this.texturePath=e},parse:function(e,t){function r(t){function r(e,t){return e&1<<t}var n,i,a,s,c,l,h,u,d,p,f,E,m,g,v,T,y,R,x,H,b,_,M,w,S,A,L,C=e.faces,P=e.vertices,I=e.normals,B=e.colors,D=0;if(void 0!==e.uvs){for(n=0;n<e.uvs.length;n++)e.uvs[n].length&&D++;for(n=0;D>n;n++)o.faceVertexUvs[n]=[]}for(s=0,c=P.length;c>s;)R=new THREE.Vector3,R.x=P[s++]*t,R.y=P[s++]*t,R.z=P[s++]*t,o.vertices.push(R);for(s=0,c=C.length;c>s;)if(p=C[s++],f=r(p,0),E=r(p,1),m=r(p,3),g=r(p,4),v=r(p,5),T=r(p,6),y=r(p,7),f){if(H=new THREE.Face3,H.a=C[s],H.b=C[s+1],H.c=C[s+3],b=new THREE.Face3,b.a=C[s+1],b.b=C[s+2],b.c=C[s+3],s+=4,E&&(d=C[s++],H.materialIndex=d,b.materialIndex=d),a=o.faces.length,m)for(n=0;D>n;n++)for(w=e.uvs[n],o.faceVertexUvs[n][a]=[],o.faceVertexUvs[n][a+1]=[],i=0;4>i;i++)u=C[s++],A=w[2*u],L=w[2*u+1],S=new THREE.Vector2(A,L),2!==i&&o.faceVertexUvs[n][a].push(S),0!==i&&o.faceVertexUvs[n][a+1].push(S);if(g&&(h=3*C[s++],H.normal.set(I[h++],I[h++],I[h]),b.normal.copy(H.normal)),v)for(n=0;4>n;n++)h=3*C[s++],M=new THREE.Vector3(I[h++],I[h++],I[h]),2!==n&&H.vertexNormals.push(M),0!==n&&b.vertexNormals.push(M);if(T&&(l=C[s++],_=B[l],H.color.setHex(_),b.color.setHex(_)),y)for(n=0;4>n;n++)l=C[s++],_=B[l],2!==n&&H.vertexColors.push(new THREE.Color(_)),0!==n&&b.vertexColors.push(new THREE.Color(_));o.faces.push(H),o.faces.push(b)}else{if(x=new THREE.Face3,x.a=C[s++],x.b=C[s++],x.c=C[s++],E&&(d=C[s++],x.materialIndex=d),a=o.faces.length,m)for(n=0;D>n;n++)for(w=e.uvs[n],o.faceVertexUvs[n][a]=[],i=0;3>i;i++)u=C[s++],A=w[2*u],L=w[2*u+1],S=new THREE.Vector2(A,L),o.faceVertexUvs[n][a].push(S);if(g&&(h=3*C[s++],x.normal.set(I[h++],I[h++],I[h])),v)for(n=0;3>n;n++)h=3*C[s++],M=new THREE.Vector3(I[h++],I[h++],I[h]),x.vertexNormals.push(M);if(T&&(l=C[s++],x.color.setHex(B[l])),y)for(n=0;3>n;n++)l=C[s++],x.vertexColors.push(new THREE.Color(B[l]));o.faces.push(x)}}function n(){var t=void 0!==e.influencesPerVertex?e.influencesPerVertex:2;if(e.skinWeights)for(var r=0,n=e.skinWeights.length;n>r;r+=t){var i=e.skinWeights[r],a=t>1?e.skinWeights[r+1]:0,s=t>2?e.skinWeights[r+2]:0,c=t>3?e.skinWeights[r+3]:0;o.skinWeights.push(new THREE.Vector4(i,a,s,c))}if(e.skinIndices)for(var r=0,n=e.skinIndices.length;n>r;r+=t){var l=e.skinIndices[r],h=t>1?e.skinIndices[r+1]:0,u=t>2?e.skinIndices[r+2]:0,d=t>3?e.skinIndices[r+3]:0;o.skinIndices.push(new THREE.Vector4(l,h,u,d))}o.bones=e.bones,o.bones&&o.bones.length>0&&(o.skinWeights.length!==o.skinIndices.length||o.skinIndices.length!==o.vertices.length)&&console.warn("When skinning, number of vertices ("+o.vertices.length+"), skinIndices ("+o.skinIndices.length+"), and skinWeights ("+o.skinWeights.length+") should match.")}function i(t){if(void 0!==e.morphTargets)for(var r=0,n=e.morphTargets.length;n>r;r++){o.morphTargets[r]={},o.morphTargets[r].name=e.morphTargets[r].name,o.morphTargets[r].vertices=[];for(var i=o.morphTargets[r].vertices,a=e.morphTargets[r].vertices,s=0,c=a.length;c>s;s+=3){var l=new THREE.Vector3;l.x=a[s]*t,l.y=a[s+1]*t,l.z=a[s+2]*t,i.push(l)}}if(void 0!==e.morphColors&&e.morphColors.length>0){console.warn('THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.');for(var h=o.faces,u=e.morphColors[0].colors,r=0,n=h.length;n>r;r++)h[r].color.fromArray(u,3*r)}}function a(){var t=[],r=[];void 0!==e.animation&&r.push(e.animation),void 0!==e.animations&&(e.animations.length?r=r.concat(e.animations):r.push(e.animations));for(var n=0;n<r.length;n++){var i=THREE.AnimationClip.parseAnimation(r[n],o.bones);i&&t.push(i)}if(o.morphTargets){var a=THREE.AnimationClip.CreateClipsFromMorphTargetSequences(o.morphTargets,10);t=t.concat(a)}t.length>0&&(o.animations=t)}var o=new THREE.Geometry,s=void 0!==e.scale?1/e.scale:1;if(r(s),n(),i(s),a(),o.computeFaceNormals(),o.computeBoundingSphere(),void 0===e.materials||0===e.materials.length)return{geometry:o};var c=THREE.Loader.prototype.initMaterials(e.materials,t,this.crossOrigin);return{geometry:o,materials:c}}},THREE.LoadingManager=function(e,t,r){var n=this,i=!1,a=0,o=0;this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=r,this.itemStart=function(e){o++,i===!1&&void 0!==n.onStart&&n.onStart(e,a,o),i=!0},this.itemEnd=function(e){a++,void 0!==n.onProgress&&n.onProgress(e,a,o),a===o&&(i=!1,void 0!==n.onLoad&&n.onLoad())},this.itemError=function(e){void 0!==n.onError&&n.onError(e)}},THREE.DefaultLoadingManager=new THREE.LoadingManager,THREE.BufferGeometryLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager},THREE.BufferGeometryLoader.prototype={constructor:THREE.BufferGeometryLoader,load:function(e,t,r,n){var i=this,a=new THREE.XHRLoader(i.manager);a.load(e,function(e){t(i.parse(JSON.parse(e)))},r,n)},parse:function(e){var t=new THREE.BufferGeometry,r=e.data.index,n={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:Uint8ClampedArray,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};if(void 0!==r){var i=new n[r.type](r.array);t.setIndex(new THREE.BufferAttribute(i,1))}var a=e.data.attributes;for(var o in a){var s=a[o],i=new n[s.type](s.array);t.addAttribute(o,new THREE.BufferAttribute(i,s.itemSize,s.normalized))}var c=e.data.groups||e.data.drawcalls||e.data.offsets;if(void 0!==c)for(var l=0,h=c.length;l!==h;++l){var u=c[l];t.addGroup(u.start,u.count,u.materialIndex)}var d=e.data.boundingSphere;if(void 0!==d){var p=new THREE.Vector3;void 0!==d.center&&p.fromArray(d.center),t.boundingSphere=new THREE.Sphere(p,d.radius)}return t}},THREE.MaterialLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager,this.textures={}},THREE.MaterialLoader.prototype={constructor:THREE.MaterialLoader,load:function(e,t,r,n){var i=this,a=new THREE.XHRLoader(i.manager);a.load(e,function(e){t(i.parse(JSON.parse(e)))},r,n)},setTextures:function(e){this.textures=e},getTexture:function(e){var t=this.textures;return void 0===t[e]&&console.warn("THREE.MaterialLoader: Undefined texture",e),t[e]},parse:function(e){var t=new THREE[e.type];if(void 0!==e.uuid&&(t.uuid=e.uuid),void 0!==e.name&&(t.name=e.name),void 0!==e.color&&t.color.setHex(e.color),void 0!==e.roughness&&(t.roughness=e.roughness),void 0!==e.metalness&&(t.metalness=e.metalness),void 0!==e.emissive&&t.emissive.setHex(e.emissive),void 0!==e.specular&&t.specular.setHex(e.specular),void 0!==e.shininess&&(t.shininess=e.shininess),void 0!==e.uniforms&&(t.uniforms=e.uniforms),void 0!==e.vertexShader&&(t.vertexShader=e.vertexShader),void 0!==e.fragmentShader&&(t.fragmentShader=e.fragmentShader),void 0!==e.vertexColors&&(t.vertexColors=e.vertexColors),void 0!==e.shading&&(t.shading=e.shading),void 0!==e.blending&&(t.blending=e.blending),void 0!==e.side&&(t.side=e.side),void 0!==e.opacity&&(t.opacity=e.opacity),void 0!==e.transparent&&(t.transparent=e.transparent),void 0!==e.alphaTest&&(t.alphaTest=e.alphaTest),void 0!==e.depthTest&&(t.depthTest=e.depthTest),void 0!==e.depthWrite&&(t.depthWrite=e.depthWrite),void 0!==e.colorWrite&&(t.colorWrite=e.colorWrite),void 0!==e.wireframe&&(t.wireframe=e.wireframe),void 0!==e.wireframeLinewidth&&(t.wireframeLinewidth=e.wireframeLinewidth),void 0!==e.size&&(t.size=e.size),void 0!==e.sizeAttenuation&&(t.sizeAttenuation=e.sizeAttenuation),void 0!==e.map&&(t.map=this.getTexture(e.map)),void 0!==e.alphaMap&&(t.alphaMap=this.getTexture(e.alphaMap),t.transparent=!0),void 0!==e.bumpMap&&(t.bumpMap=this.getTexture(e.bumpMap)),void 0!==e.bumpScale&&(t.bumpScale=e.bumpScale),void 0!==e.normalMap&&(t.normalMap=this.getTexture(e.normalMap)),void 0!==e.normalScale){var r=e.normalScale;Array.isArray(r)===!1&&(r=[r,r]),t.normalScale=(new THREE.Vector2).fromArray(r)}if(void 0!==e.displacementMap&&(t.displacementMap=this.getTexture(e.displacementMap)),void 0!==e.displacementScale&&(t.displacementScale=e.displacementScale),void 0!==e.displacementBias&&(t.displacementBias=e.displacementBias),void 0!==e.roughnessMap&&(t.roughnessMap=this.getTexture(e.roughnessMap)),void 0!==e.metalnessMap&&(t.metalnessMap=this.getTexture(e.metalnessMap)),void 0!==e.emissiveMap&&(t.emissiveMap=this.getTexture(e.emissiveMap)),void 0!==e.emissiveIntensity&&(t.emissiveIntensity=e.emissiveIntensity),void 0!==e.specularMap&&(t.specularMap=this.getTexture(e.specularMap)),void 0!==e.envMap&&(t.envMap=this.getTexture(e.envMap),t.combine=THREE.MultiplyOperation),e.reflectivity&&(t.reflectivity=e.reflectivity),void 0!==e.lightMap&&(t.lightMap=this.getTexture(e.lightMap)),void 0!==e.lightMapIntensity&&(t.lightMapIntensity=e.lightMapIntensity),void 0!==e.aoMap&&(t.aoMap=this.getTexture(e.aoMap)),void 0!==e.aoMapIntensity&&(t.aoMapIntensity=e.aoMapIntensity),void 0!==e.materials)for(var n=0,i=e.materials.length;i>n;n++)t.materials.push(this.parse(e.materials[n]));return t}},THREE.ObjectLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager,this.texturePath=""},THREE.ObjectLoader.prototype={constructor:THREE.ObjectLoader,load:function(e,t,r,n){""===this.texturePath&&(this.texturePath=e.substring(0,e.lastIndexOf("/")+1));var i=this,a=new THREE.XHRLoader(i.manager);a.load(e,function(e){i.parse(JSON.parse(e),t)},r,n)},setTexturePath:function(e){this.texturePath=e},setCrossOrigin:function(e){this.crossOrigin=e},parse:function(e,t){var r=this.parseGeometries(e.geometries),n=this.parseImages(e.images,function(){void 0!==t&&t(o)}),i=this.parseTextures(e.textures,n),a=this.parseMaterials(e.materials,i),o=this.parseObject(e.object,r,a);return e.animations&&(o.animations=this.parseAnimations(e.animations)),void 0!==e.images&&0!==e.images.length||void 0!==t&&t(o),o},parseGeometries:function(e){var t={};if(void 0!==e)for(var r=new THREE.JSONLoader,n=new THREE.BufferGeometryLoader,i=0,a=e.length;a>i;i++){var o,s=e[i];switch(s.type){case"PlaneGeometry":case"PlaneBufferGeometry":o=new THREE[s.type](s.width,s.height,s.widthSegments,s.heightSegments);break;case"BoxGeometry":case"BoxBufferGeometry":case"CubeGeometry":o=new THREE[s.type](s.width,s.height,s.depth,s.widthSegments,s.heightSegments,s.depthSegments);break;case"CircleGeometry":case"CircleBufferGeometry":o=new THREE[s.type](s.radius,s.segments,s.thetaStart,s.thetaLength);break;case"CylinderGeometry":case"CylinderBufferGeometry":o=new THREE[s.type](s.radiusTop,s.radiusBottom,s.height,s.radialSegments,s.heightSegments,s.openEnded,s.thetaStart,s.thetaLength);break;case"ConeGeometry":case"ConeBufferGeometry":o=new THREE[s.type](s.radius,s.height,s.radialSegments,s.heightSegments,s.openEnded,s.thetaStart,s.thetaLength);break;case"SphereGeometry":case"SphereBufferGeometry":o=new THREE[s.type](s.radius,s.widthSegments,s.heightSegments,s.phiStart,s.phiLength,s.thetaStart,s.thetaLength);break;case"DodecahedronGeometry":case"IcosahedronGeometry":case"OctahedronGeometry":case"TetrahedronGeometry":o=new THREE[s.type](s.radius,s.detail);break;case"RingGeometry":case"RingBufferGeometry":o=new THREE[s.type](s.innerRadius,s.outerRadius,s.thetaSegments,s.phiSegments,s.thetaStart,s.thetaLength);break;case"TorusGeometry":case"TorusBufferGeometry":o=new THREE[s.type](s.radius,s.tube,s.radialSegments,s.tubularSegments,s.arc);break;case"TorusKnotGeometry":case"TorusKnotBufferGeometry":o=new THREE[s.type](s.radius,s.tube,s.tubularSegments,s.radialSegments,s.p,s.q);break;case"LatheGeometry":case"LatheBufferGeometry":o=new THREE[s.type](s.points,s.segments,s.phiStart,s.phiLength);
break;case"BufferGeometry":o=n.parse(s);break;case"Geometry":o=r.parse(s.data,this.texturePath).geometry;break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+s.type+'"');continue}o.uuid=s.uuid,void 0!==s.name&&(o.name=s.name),t[s.uuid]=o}return t},parseMaterials:function(e,t){var r={};if(void 0!==e){var n=new THREE.MaterialLoader;n.setTextures(t);for(var i=0,a=e.length;a>i;i++){var o=n.parse(e[i]);r[o.uuid]=o}}return r},parseAnimations:function(e){for(var t=[],r=0;r<e.length;r++){var n=THREE.AnimationClip.parse(e[r]);t.push(n)}return t},parseImages:function(e,t){function r(e){return n.manager.itemStart(e),o.load(e,function(){n.manager.itemEnd(e)})}var n=this,i={};if(void 0!==e&&e.length>0){var a=new THREE.LoadingManager(t),o=new THREE.ImageLoader(a);o.setCrossOrigin(this.crossOrigin);for(var s=0,c=e.length;c>s;s++){var l=e[s],h=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(l.url)?l.url:n.texturePath+l.url;i[l.uuid]=r(h)}}return i},parseTextures:function(e,t){function r(e){return"number"==typeof e?e:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",e),THREE[e])}var n={};if(void 0!==e)for(var i=0,a=e.length;a>i;i++){var o=e[i];void 0===o.image&&console.warn('THREE.ObjectLoader: No "image" specified for',o.uuid),void 0===t[o.image]&&console.warn("THREE.ObjectLoader: Undefined image",o.image);var s=new THREE.Texture(t[o.image]);s.needsUpdate=!0,s.uuid=o.uuid,void 0!==o.name&&(s.name=o.name),void 0!==o.mapping&&(s.mapping=r(o.mapping)),void 0!==o.offset&&(s.offset=new THREE.Vector2(o.offset[0],o.offset[1])),void 0!==o.repeat&&(s.repeat=new THREE.Vector2(o.repeat[0],o.repeat[1])),void 0!==o.minFilter&&(s.minFilter=r(o.minFilter)),void 0!==o.magFilter&&(s.magFilter=r(o.magFilter)),void 0!==o.anisotropy&&(s.anisotropy=o.anisotropy),Array.isArray(o.wrap)&&(s.wrapS=r(o.wrap[0]),s.wrapT=r(o.wrap[1])),n[o.uuid]=s}return n},parseObject:function(){var e=new THREE.Matrix4;return function(t,r,n){function i(e){return void 0===r[e]&&console.warn("THREE.ObjectLoader: Undefined geometry",e),r[e]}function a(e){return void 0!==e?(void 0===n[e]&&console.warn("THREE.ObjectLoader: Undefined material",e),n[e]):void 0}var o;switch(t.type){case"Scene":o=new THREE.Scene;break;case"PerspectiveCamera":o=new THREE.PerspectiveCamera(t.fov,t.aspect,t.near,t.far),void 0!==t.focus&&(o.focus=t.focus),void 0!==t.zoom&&(o.zoom=t.zoom),void 0!==t.filmGauge&&(o.filmGauge=t.filmGauge),void 0!==t.filmOffset&&(o.filmOffset=t.filmOffset),void 0!==t.view&&(o.view=Object.assign({},t.view));break;case"OrthographicCamera":o=new THREE.OrthographicCamera(t.left,t.right,t.top,t.bottom,t.near,t.far);break;case"AmbientLight":o=new THREE.AmbientLight(t.color,t.intensity);break;case"DirectionalLight":o=new THREE.DirectionalLight(t.color,t.intensity);break;case"PointLight":o=new THREE.PointLight(t.color,t.intensity,t.distance,t.decay);break;case"SpotLight":o=new THREE.SpotLight(t.color,t.intensity,t.distance,t.angle,t.penumbra,t.decay);break;case"HemisphereLight":o=new THREE.HemisphereLight(t.color,t.groundColor,t.intensity);break;case"Mesh":var s=i(t.geometry),c=a(t.material);o=s.bones&&s.bones.length>0?new THREE.SkinnedMesh(s,c):new THREE.Mesh(s,c);break;case"LOD":o=new THREE.LOD;break;case"Line":o=new THREE.Line(i(t.geometry),a(t.material),t.mode);break;case"PointCloud":case"Points":o=new THREE.Points(i(t.geometry),a(t.material));break;case"Sprite":o=new THREE.Sprite(a(t.material));break;case"Group":o=new THREE.Group;break;default:o=new THREE.Object3D}if(o.uuid=t.uuid,void 0!==t.name&&(o.name=t.name),void 0!==t.matrix?(e.fromArray(t.matrix),e.decompose(o.position,o.quaternion,o.scale)):(void 0!==t.position&&o.position.fromArray(t.position),void 0!==t.rotation&&o.rotation.fromArray(t.rotation),void 0!==t.scale&&o.scale.fromArray(t.scale)),void 0!==t.castShadow&&(o.castShadow=t.castShadow),void 0!==t.receiveShadow&&(o.receiveShadow=t.receiveShadow),void 0!==t.visible&&(o.visible=t.visible),void 0!==t.userData&&(o.userData=t.userData),void 0!==t.children)for(var l in t.children)o.add(this.parseObject(t.children[l],r,n));if("LOD"===t.type)for(var h=t.levels,u=0;u<h.length;u++){var d=h[u],l=o.getObjectByProperty("uuid",d.object);void 0!==l&&o.addLevel(l,d.distance)}return o}}()},THREE.TextureLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager},THREE.TextureLoader.prototype={constructor:THREE.TextureLoader,load:function(e,t,r,n){var i=new THREE.Texture,a=new THREE.ImageLoader(this.manager);return a.setCrossOrigin(this.crossOrigin),a.setPath(this.path),a.load(e,function(e){i.image=e,i.needsUpdate=!0,void 0!==t&&t(i)},r,n),i},setCrossOrigin:function(e){this.crossOrigin=e},setPath:function(e){this.path=e}},THREE.CubeTextureLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager},THREE.CubeTextureLoader.prototype={constructor:THREE.CubeTextureLoader,load:function(e,t,r,n){function i(r){o.load(e[r],function(e){a.images[r]=e,s++,6===s&&(a.needsUpdate=!0,t&&t(a))},void 0,n)}var a=new THREE.CubeTexture,o=new THREE.ImageLoader(this.manager);o.setCrossOrigin(this.crossOrigin),o.setPath(this.path);for(var s=0,c=0;c<e.length;++c)i(c);return a},setCrossOrigin:function(e){this.crossOrigin=e},setPath:function(e){this.path=e}},THREE.DataTextureLoader=THREE.BinaryTextureLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager,this._parser=null},THREE.BinaryTextureLoader.prototype={constructor:THREE.BinaryTextureLoader,load:function(e,t,r,n){var i=this,a=new THREE.DataTexture,o=new THREE.XHRLoader(this.manager);return o.setResponseType("arraybuffer"),o.load(e,function(e){var r=i._parser(e);r&&(void 0!==r.image?a.image=r.image:void 0!==r.data&&(a.image.width=r.width,a.image.height=r.height,a.image.data=r.data),a.wrapS=void 0!==r.wrapS?r.wrapS:THREE.ClampToEdgeWrapping,a.wrapT=void 0!==r.wrapT?r.wrapT:THREE.ClampToEdgeWrapping,a.magFilter=void 0!==r.magFilter?r.magFilter:THREE.LinearFilter,a.minFilter=void 0!==r.minFilter?r.minFilter:THREE.LinearMipMapLinearFilter,a.anisotropy=void 0!==r.anisotropy?r.anisotropy:1,void 0!==r.format&&(a.format=r.format),void 0!==r.type&&(a.type=r.type),void 0!==r.mipmaps&&(a.mipmaps=r.mipmaps),1===r.mipmapCount&&(a.minFilter=THREE.LinearFilter),a.needsUpdate=!0,t&&t(a,r))},r,n),a}},THREE.CompressedTextureLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager,this._parser=null},THREE.CompressedTextureLoader.prototype={constructor:THREE.CompressedTextureLoader,load:function(e,t,r,n){function i(i){c.load(e[i],function(e){var r=a._parser(e,!0);o[i]={width:r.width,height:r.height,format:r.format,mipmaps:r.mipmaps},l+=1,6===l&&(1===r.mipmapCount&&(s.minFilter=THREE.LinearFilter),s.format=r.format,s.needsUpdate=!0,t&&t(s))},r,n)}var a=this,o=[],s=new THREE.CompressedTexture;s.image=o;var c=new THREE.XHRLoader(this.manager);if(c.setPath(this.path),c.setResponseType("arraybuffer"),Array.isArray(e))for(var l=0,h=0,u=e.length;u>h;++h)i(h);else c.load(e,function(e){var r=a._parser(e,!0);if(r.isCubemap)for(var n=r.mipmaps.length/r.mipmapCount,i=0;n>i;i++){o[i]={mipmaps:[]};for(var c=0;c<r.mipmapCount;c++)o[i].mipmaps.push(r.mipmaps[i*r.mipmapCount+c]),o[i].format=r.format,o[i].width=r.width,o[i].height=r.height}else s.image.width=r.width,s.image.height=r.height,s.mipmaps=r.mipmaps;1===r.mipmapCount&&(s.minFilter=THREE.LinearFilter),s.format=r.format,s.needsUpdate=!0,t&&t(s)},r,n);return s},setPath:function(e){this.path=e}},THREE.Material=function(){Object.defineProperty(this,"id",{value:THREE.MaterialIdCount++}),this.uuid=THREE.Math.generateUUID(),this.name="",this.type="Material",this.fog=!0,this.lights=!0,this.blending=THREE.NormalBlending,this.side=THREE.FrontSide,this.shading=THREE.SmoothShading,this.vertexColors=THREE.NoColors,this.opacity=1,this.transparent=!1,this.blendSrc=THREE.SrcAlphaFactor,this.blendDst=THREE.OneMinusSrcAlphaFactor,this.blendEquation=THREE.AddEquation,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=THREE.LessEqualDepth,this.depthTest=!0,this.depthWrite=!0,this.clippingPlanes=null,this.clipShadows=!1,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.alphaTest=0,this.premultipliedAlpha=!1,this.overdraw=0,this.visible=!0,this._needsUpdate=!0},THREE.Material.prototype={constructor:THREE.Material,get needsUpdate(){return this._needsUpdate},set needsUpdate(e){e===!0&&this.update(),this._needsUpdate=e},setValues:function(e){if(void 0!==e)for(var t in e){var r=e[t];if(void 0!==r){var n=this[t];void 0!==n?n instanceof THREE.Color?n.set(r):n instanceof THREE.Vector3&&r instanceof THREE.Vector3?n.copy(r):"overdraw"===t?this[t]=Number(r):this[t]=r:console.warn("THREE."+this.type+": '"+t+"' is not a property of this material.")}else console.warn("THREE.Material: '"+t+"' parameter is undefined.")}},toJSON:function(e){function t(e){var t=[];for(var r in e){var n=e[r];delete n.metadata,t.push(n)}return t}var r=void 0===e;r&&(e={textures:{},images:{}});var n={metadata:{version:4.4,type:"Material",generator:"Material.toJSON"}};if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),this.color instanceof THREE.Color&&(n.color=this.color.getHex()),.5!==this.roughness&&(n.roughness=this.roughness),.5!==this.metalness&&(n.metalness=this.metalness),this.emissive instanceof THREE.Color&&(n.emissive=this.emissive.getHex()),this.specular instanceof THREE.Color&&(n.specular=this.specular.getHex()),void 0!==this.shininess&&(n.shininess=this.shininess),this.map instanceof THREE.Texture&&(n.map=this.map.toJSON(e).uuid),this.alphaMap instanceof THREE.Texture&&(n.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap instanceof THREE.Texture&&(n.lightMap=this.lightMap.toJSON(e).uuid),this.bumpMap instanceof THREE.Texture&&(n.bumpMap=this.bumpMap.toJSON(e).uuid,n.bumpScale=this.bumpScale),this.normalMap instanceof THREE.Texture&&(n.normalMap=this.normalMap.toJSON(e).uuid,n.normalScale=this.normalScale.toArray()),this.displacementMap instanceof THREE.Texture&&(n.displacementMap=this.displacementMap.toJSON(e).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap instanceof THREE.Texture&&(n.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap instanceof THREE.Texture&&(n.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap instanceof THREE.Texture&&(n.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap instanceof THREE.Texture&&(n.specularMap=this.specularMap.toJSON(e).uuid),this.envMap instanceof THREE.Texture&&(n.envMap=this.envMap.toJSON(e).uuid,n.reflectivity=this.reflectivity),void 0!==this.size&&(n.size=this.size),void 0!==this.sizeAttenuation&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==THREE.NormalBlending&&(n.blending=this.blending),this.shading!==THREE.SmoothShading&&(n.shading=this.shading),this.side!==THREE.FrontSide&&(n.side=this.side),this.vertexColors!==THREE.NoColors&&(n.vertexColors=this.vertexColors),this.opacity<1&&(n.opacity=this.opacity),this.transparent===!0&&(n.transparent=this.transparent),this.alphaTest>0&&(n.alphaTest=this.alphaTest),this.premultipliedAlpha===!0&&(n.premultipliedAlpha=this.premultipliedAlpha),this.wireframe===!0&&(n.wireframe=this.wireframe),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),r){var i=t(e.textures),a=t(e.images);i.length>0&&(n.textures=i),a.length>0&&(n.images=a)}return n},clone:function(){return(new this.constructor).copy(this)},copy:function(e){this.name=e.name,this.fog=e.fog,this.lights=e.lights,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.alphaTest=e.alphaTest,this.premultipliedAlpha=e.premultipliedAlpha,this.overdraw=e.overdraw,this.visible=e.visible,this.clipShadows=e.clipShadows;var t=e.clippingPlanes,r=null;if(null!==t){var n=t.length;r=new Array(n);for(var i=0;i!==n;++i)r[i]=t[i].clone()}return this.clippingPlanes=r,this},update:function(){this.dispatchEvent({type:"update"})},dispose:function(){this.dispatchEvent({type:"dispose"})}},Object.assign(THREE.Material.prototype,THREE.EventDispatcher.prototype),THREE.MaterialIdCount=0,THREE.LineBasicMaterial=function(e){THREE.Material.call(this),this.type="LineBasicMaterial",this.color=new THREE.Color(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.lights=!1,this.setValues(e)},THREE.LineBasicMaterial.prototype=Object.create(THREE.Material.prototype),THREE.LineBasicMaterial.prototype.constructor=THREE.LineBasicMaterial,THREE.LineBasicMaterial.prototype.copy=function(e){return THREE.Material.prototype.copy.call(this,e),this.color.copy(e.color),this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this},THREE.LineDashedMaterial=function(e){THREE.Material.call(this),this.type="LineDashedMaterial",this.color=new THREE.Color(16777215),this.linewidth=1,this.scale=1,this.dashSize=3,this.gapSize=1,this.lights=!1,this.setValues(e)},THREE.LineDashedMaterial.prototype=Object.create(THREE.Material.prototype),THREE.LineDashedMaterial.prototype.constructor=THREE.LineDashedMaterial,THREE.LineDashedMaterial.prototype.copy=function(e){return THREE.Material.prototype.copy.call(this,e),this.color.copy(e.color),this.linewidth=e.linewidth,this.scale=e.scale,this.dashSize=e.dashSize,this.gapSize=e.gapSize,this},THREE.MeshBasicMaterial=function(e){THREE.Material.call(this),this.type="MeshBasicMaterial",this.color=new THREE.Color(16777215),this.map=null,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=THREE.MultiplyOperation,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.lights=!1,this.setValues(e)},THREE.MeshBasicMaterial.prototype=Object.create(THREE.Material.prototype),THREE.MeshBasicMaterial.prototype.constructor=THREE.MeshBasicMaterial,THREE.MeshBasicMaterial.prototype.copy=function(e){return THREE.Material.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this},THREE.MeshDepthMaterial=function(e){THREE.Material.call(this),this.type="MeshDepthMaterial",this.depthPacking=THREE.BasicDepthPacking,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.setValues(e)},THREE.MeshDepthMaterial.prototype=Object.create(THREE.Material.prototype),THREE.MeshDepthMaterial.prototype.constructor=THREE.MeshDepthMaterial,THREE.MeshDepthMaterial.prototype.copy=function(e){return THREE.Material.prototype.copy.call(this,e),this.depthPacking=e.depthPacking,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this},THREE.MeshLambertMaterial=function(e){THREE.Material.call(this),this.type="MeshLambertMaterial",this.color=new THREE.Color(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new THREE.Color(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=THREE.MultiplyOperation,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)},THREE.MeshLambertMaterial.prototype=Object.create(THREE.Material.prototype),THREE.MeshLambertMaterial.prototype.constructor=THREE.MeshLambertMaterial,THREE.MeshLambertMaterial.prototype.copy=function(e){return THREE.Material.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},THREE.MeshNormalMaterial=function(e){THREE.Material.call(this,e),this.type="MeshNormalMaterial",this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.morphTargets=!1,this.setValues(e)},THREE.MeshNormalMaterial.prototype=Object.create(THREE.Material.prototype),THREE.MeshNormalMaterial.prototype.constructor=THREE.MeshNormalMaterial,THREE.MeshNormalMaterial.prototype.copy=function(e){return THREE.Material.prototype.copy.call(this,e),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this},THREE.MeshPhongMaterial=function(e){THREE.Material.call(this),this.type="MeshPhongMaterial",this.color=new THREE.Color(16777215),this.specular=new THREE.Color(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new THREE.Color(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalScale=new THREE.Vector2(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=THREE.MultiplyOperation,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)},THREE.MeshPhongMaterial.prototype=Object.create(THREE.Material.prototype),THREE.MeshPhongMaterial.prototype.constructor=THREE.MeshPhongMaterial,THREE.MeshPhongMaterial.prototype.copy=function(e){return THREE.Material.prototype.copy.call(this,e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},THREE.MeshStandardMaterial=function(e){THREE.Material.call(this),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new THREE.Color(16777215),this.roughness=.5,this.metalness=.5,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new THREE.Color(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalScale=new THREE.Vector2(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)},THREE.MeshStandardMaterial.prototype=Object.create(THREE.Material.prototype),THREE.MeshStandardMaterial.prototype.constructor=THREE.MeshStandardMaterial,THREE.MeshStandardMaterial.prototype.copy=function(e){return THREE.Material.prototype.copy.call(this,e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapIntensity=e.envMapIntensity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},THREE.MeshPhysicalMaterial=function(e){THREE.MeshStandardMaterial.call(this),this.defines={PHYSICAL:""},this.type="MeshPhysicalMaterial",this.reflectivity=.5,this.setValues(e)},THREE.MeshPhysicalMaterial.prototype=Object.create(THREE.MeshStandardMaterial.prototype),THREE.MeshPhysicalMaterial.prototype.constructor=THREE.MeshPhysicalMaterial,THREE.MeshPhysicalMaterial.prototype.copy=function(e){return THREE.MeshStandardMaterial.prototype.copy.call(this,e),this.defines={PHYSICAL:""},this.reflectivity=e.reflectivity,this},THREE.MultiMaterial=function(e){this.uuid=THREE.Math.generateUUID(),this.type="MultiMaterial",this.materials=e instanceof Array?e:[],this.visible=!0},THREE.MultiMaterial.prototype={constructor:THREE.MultiMaterial,toJSON:function(e){for(var t={metadata:{version:4.2,type:"material",generator:"MaterialExporter"},uuid:this.uuid,type:this.type,materials:[]},r=this.materials,n=0,i=r.length;i>n;n++){var a=r[n].toJSON(e);delete a.metadata,t.materials.push(a)}return t.visible=this.visible,t},clone:function(){for(var e=new this.constructor,t=0;t<this.materials.length;t++)e.materials.push(this.materials[t].clone());return e.visible=this.visible,e}},THREE.PointsMaterial=function(e){THREE.Material.call(this),this.type="PointsMaterial",this.color=new THREE.Color(16777215),this.map=null,this.size=1,this.sizeAttenuation=!0,this.lights=!1,this.setValues(e)},THREE.PointsMaterial.prototype=Object.create(THREE.Material.prototype),THREE.PointsMaterial.prototype.constructor=THREE.PointsMaterial,THREE.PointsMaterial.prototype.copy=function(e){return THREE.Material.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this},THREE.ShaderMaterial=function(e){THREE.Material.call(this),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,void 0!==e&&(void 0!==e.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(e))},THREE.ShaderMaterial.prototype=Object.create(THREE.Material.prototype),THREE.ShaderMaterial.prototype.constructor=THREE.ShaderMaterial,THREE.ShaderMaterial.prototype.copy=function(e){return THREE.Material.prototype.copy.call(this,e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=THREE.UniformsUtils.clone(e.uniforms),this.defines=e.defines,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.lights=e.lights,this.clipping=e.clipping,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this.extensions=e.extensions,this},THREE.ShaderMaterial.prototype.toJSON=function(e){var t=THREE.Material.prototype.toJSON.call(this,e);return t.uniforms=this.uniforms,t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader,t},THREE.RawShaderMaterial=function(e){THREE.ShaderMaterial.call(this,e),this.type="RawShaderMaterial"},THREE.RawShaderMaterial.prototype=Object.create(THREE.ShaderMaterial.prototype),THREE.RawShaderMaterial.prototype.constructor=THREE.RawShaderMaterial,THREE.SpriteMaterial=function(e){THREE.Material.call(this),this.type="SpriteMaterial",this.color=new THREE.Color(16777215),this.map=null,this.rotation=0,this.fog=!1,this.lights=!1,this.setValues(e)},THREE.SpriteMaterial.prototype=Object.create(THREE.Material.prototype),THREE.SpriteMaterial.prototype.constructor=THREE.SpriteMaterial,THREE.SpriteMaterial.prototype.copy=function(e){return THREE.Material.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.rotation=e.rotation,this},THREE.ShadowMaterial=function(){THREE.ShaderMaterial.call(this,{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.lights,{opacity:{value:1}}]),vertexShader:THREE.ShaderChunk.shadow_vert,fragmentShader:THREE.ShaderChunk.shadow_frag}),this.lights=!0,this.transparent=!0,Object.defineProperties(this,{opacity:{enumerable:!0,get:function(){return this.uniforms.opacity.value},set:function(e){this.uniforms.opacity.value=e}}})},THREE.ShadowMaterial.prototype=Object.create(THREE.ShaderMaterial.prototype),THREE.ShadowMaterial.prototype.constructor=THREE.ShadowMaterial,THREE.Texture=function(e,t,r,n,i,a,o,s,c,l){Object.defineProperty(this,"id",{value:THREE.TextureIdCount++}),this.uuid=THREE.Math.generateUUID(),this.name="",this.sourceFile="",this.image=void 0!==e?e:THREE.Texture.DEFAULT_IMAGE,this.mipmaps=[],this.mapping=void 0!==t?t:THREE.Texture.DEFAULT_MAPPING,this.wrapS=void 0!==r?r:THREE.ClampToEdgeWrapping,this.wrapT=void 0!==n?n:THREE.ClampToEdgeWrapping,this.magFilter=void 0!==i?i:THREE.LinearFilter,this.minFilter=void 0!==a?a:THREE.LinearMipMapLinearFilter,this.anisotropy=void 0!==c?c:1,this.format=void 0!==o?o:THREE.RGBAFormat,this.type=void 0!==s?s:THREE.UnsignedByteType,this.offset=new THREE.Vector2(0,0),this.repeat=new THREE.Vector2(1,1),this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=void 0!==l?l:THREE.LinearEncoding,this.version=0,this.onUpdate=null},THREE.Texture.DEFAULT_IMAGE=void 0,THREE.Texture.DEFAULT_MAPPING=THREE.UVMapping,THREE.Texture.prototype={constructor:THREE.Texture,set needsUpdate(e){e===!0&&this.version++},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.image=e.image,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.encoding=e.encoding,this},toJSON:function(e){function t(e){var t;return void 0!==e.toDataURL?t=e:(t=document.createElement("canvas"),t.width=e.width,t.height=e.height,t.getContext("2d").drawImage(e,0,0,e.width,e.height)),t.width>2048||t.height>2048?t.toDataURL("image/jpeg",.6):t.toDataURL("image/png")}if(void 0!==e.textures[this.uuid])return e.textures[this.uuid];var r={metadata:{version:4.4,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],wrap:[this.wrapS,this.wrapT],minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy};if(void 0!==this.image){var n=this.image;void 0===n.uuid&&(n.uuid=THREE.Math.generateUUID()),void 0===e.images[n.uuid]&&(e.images[n.uuid]={uuid:n.uuid,url:t(n)}),r.image=n.uuid}return e.textures[this.uuid]=r,r},dispose:function(){this.dispatchEvent({type:"dispose"})},transformUv:function(e){if(this.mapping===THREE.UVMapping){if(e.multiply(this.repeat),e.add(this.offset),e.x<0||e.x>1)switch(this.wrapS){case THREE.RepeatWrapping:e.x=e.x-Math.floor(e.x);break;case THREE.ClampToEdgeWrapping:e.x=e.x<0?0:1;break;case THREE.MirroredRepeatWrapping:1===Math.abs(Math.floor(e.x)%2)?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x)}if(e.y<0||e.y>1)switch(this.wrapT){case THREE.RepeatWrapping:e.y=e.y-Math.floor(e.y);break;case THREE.ClampToEdgeWrapping:e.y=e.y<0?0:1;break;case THREE.MirroredRepeatWrapping:1===Math.abs(Math.floor(e.y)%2)?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y)}this.flipY&&(e.y=1-e.y)}}},Object.assign(THREE.Texture.prototype,THREE.EventDispatcher.prototype),THREE.TextureIdCount=0,THREE.DepthTexture=function(e,t,r,n,i,a,o,s,c){THREE.Texture.call(this,null,n,i,a,o,s,THREE.DepthFormat,r,c),this.image={width:e,height:t},this.type=void 0!==r?r:THREE.UnsignedShortType,this.magFilter=void 0!==o?o:THREE.NearestFilter,this.minFilter=void 0!==s?s:THREE.NearestFilter,this.flipY=!1,this.generateMipmaps=!1},THREE.DepthTexture.prototype=Object.create(THREE.Texture.prototype),THREE.DepthTexture.prototype.constructor=THREE.DepthTexture,THREE.CanvasTexture=function(e,t,r,n,i,a,o,s,c){THREE.Texture.call(this,e,t,r,n,i,a,o,s,c),this.needsUpdate=!0},THREE.CanvasTexture.prototype=Object.create(THREE.Texture.prototype),THREE.CanvasTexture.prototype.constructor=THREE.CanvasTexture,THREE.CubeTexture=function(e,t,r,n,i,a,o,s,c,l){e=void 0!==e?e:[],t=void 0!==t?t:THREE.CubeReflectionMapping,THREE.Texture.call(this,e,t,r,n,i,a,o,s,c,l),this.flipY=!1},THREE.CubeTexture.prototype=Object.create(THREE.Texture.prototype),THREE.CubeTexture.prototype.constructor=THREE.CubeTexture,Object.defineProperty(THREE.CubeTexture.prototype,"images",{get:function(){return this.image},set:function(e){this.image=e}}),THREE.CompressedTexture=function(e,t,r,n,i,a,o,s,c,l,h,u){THREE.Texture.call(this,null,a,o,s,c,l,n,i,h,u),this.image={width:t,height:r},this.mipmaps=e,this.flipY=!1,this.generateMipmaps=!1},THREE.CompressedTexture.prototype=Object.create(THREE.Texture.prototype),THREE.CompressedTexture.prototype.constructor=THREE.CompressedTexture,THREE.DataTexture=function(e,t,r,n,i,a,o,s,c,l,h,u){THREE.Texture.call(this,null,a,o,s,c,l,n,i,h,u),this.image={data:e,width:t,height:r},this.magFilter=void 0!==c?c:THREE.NearestFilter,this.minFilter=void 0!==l?l:THREE.NearestFilter,this.flipY=!1,this.generateMipmaps=!1},THREE.DataTexture.prototype=Object.create(THREE.Texture.prototype),
THREE.DataTexture.prototype.constructor=THREE.DataTexture,THREE.VideoTexture=function(e,t,r,n,i,a,o,s,c){function l(){requestAnimationFrame(l),e.readyState>=e.HAVE_CURRENT_DATA&&(h.needsUpdate=!0)}THREE.Texture.call(this,e,t,r,n,i,a,o,s,c),this.generateMipmaps=!1;var h=this;l()},THREE.VideoTexture.prototype=Object.create(THREE.Texture.prototype),THREE.VideoTexture.prototype.constructor=THREE.VideoTexture,THREE.Group=function(){THREE.Object3D.call(this),this.type="Group"},THREE.Group.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Group}),THREE.Points=function(e,t){THREE.Object3D.call(this),this.type="Points",this.geometry=void 0!==e?e:new THREE.BufferGeometry,this.material=void 0!==t?t:new THREE.PointsMaterial({color:16777215*Math.random()})},THREE.Points.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Points,raycast:function(){var e=new THREE.Matrix4,t=new THREE.Ray,r=new THREE.Sphere;return function(n,i){function a(e,r){var a=t.distanceSqToPoint(e);if(u>a){var s=t.closestPointToPoint(e);s.applyMatrix4(c);var l=n.ray.origin.distanceTo(s);if(l<n.near||l>n.far)return;i.push({distance:l,distanceToRay:Math.sqrt(a),point:s.clone(),index:r,face:null,object:o})}}var o=this,s=this.geometry,c=this.matrixWorld,l=n.params.Points.threshold;if(null===s.boundingSphere&&s.computeBoundingSphere(),r.copy(s.boundingSphere),r.applyMatrix4(c),n.ray.intersectsSphere(r)!==!1){e.getInverse(c),t.copy(n.ray).applyMatrix4(e);var h=l/((this.scale.x+this.scale.y+this.scale.z)/3),u=h*h,d=new THREE.Vector3;if(s instanceof THREE.BufferGeometry){var p=s.index,f=s.attributes,E=f.position.array;if(null!==p)for(var m=p.array,g=0,v=m.length;v>g;g++){var T=m[g];d.fromArray(E,3*T),a(d,T)}else for(var g=0,y=E.length/3;y>g;g++)d.fromArray(E,3*g),a(d,g)}else for(var R=s.vertices,g=0,y=R.length;y>g;g++)a(R[g],g)}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),THREE.Line=function(e,t,r){return 1===r?(console.warn("THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead."),new THREE.LineSegments(e,t)):(THREE.Object3D.call(this),this.type="Line",this.geometry=void 0!==e?e:new THREE.BufferGeometry,void(this.material=void 0!==t?t:new THREE.LineBasicMaterial({color:16777215*Math.random()})))},THREE.Line.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Line,raycast:function(){var e=new THREE.Matrix4,t=new THREE.Ray,r=new THREE.Sphere;return function(n,i){var a=n.linePrecision,o=a*a,s=this.geometry,c=this.matrixWorld;if(null===s.boundingSphere&&s.computeBoundingSphere(),r.copy(s.boundingSphere),r.applyMatrix4(c),n.ray.intersectsSphere(r)!==!1){e.getInverse(c),t.copy(n.ray).applyMatrix4(e);var l=new THREE.Vector3,h=new THREE.Vector3,u=new THREE.Vector3,d=new THREE.Vector3,p=this instanceof THREE.LineSegments?2:1;if(s instanceof THREE.BufferGeometry){var f=s.index,E=s.attributes,m=E.position.array;if(null!==f)for(var g=f.array,v=0,T=g.length-1;T>v;v+=p){var y=g[v],R=g[v+1];l.fromArray(m,3*y),h.fromArray(m,3*R);var x=t.distanceSqToSegment(l,h,d,u);if(!(x>o)){d.applyMatrix4(this.matrixWorld);var H=n.ray.origin.distanceTo(d);H<n.near||H>n.far||i.push({distance:H,point:u.clone().applyMatrix4(this.matrixWorld),index:v,face:null,faceIndex:null,object:this})}}else for(var v=0,T=m.length/3-1;T>v;v+=p){l.fromArray(m,3*v),h.fromArray(m,3*v+3);var x=t.distanceSqToSegment(l,h,d,u);if(!(x>o)){d.applyMatrix4(this.matrixWorld);var H=n.ray.origin.distanceTo(d);H<n.near||H>n.far||i.push({distance:H,point:u.clone().applyMatrix4(this.matrixWorld),index:v,face:null,faceIndex:null,object:this})}}}else if(s instanceof THREE.Geometry)for(var b=s.vertices,_=b.length,v=0;_-1>v;v+=p){var x=t.distanceSqToSegment(b[v],b[v+1],d,u);if(!(x>o)){d.applyMatrix4(this.matrixWorld);var H=n.ray.origin.distanceTo(d);H<n.near||H>n.far||i.push({distance:H,point:u.clone().applyMatrix4(this.matrixWorld),index:v,face:null,faceIndex:null,object:this})}}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),THREE.LineSegments=function(e,t){THREE.Line.call(this,e,t),this.type="LineSegments"},THREE.LineSegments.prototype=Object.assign(Object.create(THREE.Line.prototype),{constructor:THREE.LineSegments}),THREE.Mesh=function(e,t){THREE.Object3D.call(this),this.type="Mesh",this.geometry=void 0!==e?e:new THREE.BufferGeometry,this.material=void 0!==t?t:new THREE.MeshBasicMaterial({color:16777215*Math.random()}),this.drawMode=THREE.TrianglesDrawMode,this.updateMorphTargets()},THREE.Mesh.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Mesh,setDrawMode:function(e){this.drawMode=e},updateMorphTargets:function(){if(void 0!==this.geometry.morphTargets&&this.geometry.morphTargets.length>0){this.morphTargetBase=-1,this.morphTargetInfluences=[],this.morphTargetDictionary={};for(var e=0,t=this.geometry.morphTargets.length;t>e;e++)this.morphTargetInfluences.push(0),this.morphTargetDictionary[this.geometry.morphTargets[e].name]=e}},getMorphTargetIndexByName:function(e){return void 0!==this.morphTargetDictionary[e]?this.morphTargetDictionary[e]:(console.warn("THREE.Mesh.getMorphTargetIndexByName: morph target "+e+" does not exist. Returning 0."),0)},raycast:function(){function e(e,t,r,n,i,a,o){return THREE.Triangle.barycoordFromPoint(e,t,r,n,E),i.multiplyScalar(E.x),a.multiplyScalar(E.y),o.multiplyScalar(E.z),i.add(a).add(o),i.clone()}function t(e,t,r,n,i,a,o){var s,c=e.material;if(s=c.side===THREE.BackSide?r.intersectTriangle(a,i,n,!0,o):r.intersectTriangle(n,i,a,c.side!==THREE.DoubleSide,o),null===s)return null;g.copy(o),g.applyMatrix4(e.matrixWorld);var l=t.ray.origin.distanceTo(g);return l<t.near||l>t.far?null:{distance:l,point:g.clone(),object:e}}function r(r,n,i,a,l,h,u,E){o.fromArray(a,3*h),s.fromArray(a,3*u),c.fromArray(a,3*E);var g=t(r,n,i,o,s,c,m);return g&&(l&&(d.fromArray(l,2*h),p.fromArray(l,2*u),f.fromArray(l,2*E),g.uv=e(m,o,s,c,d,p,f)),g.face=new THREE.Face3(h,u,E,THREE.Triangle.normal(o,s,c)),g.faceIndex=h),g}var n=new THREE.Matrix4,i=new THREE.Ray,a=new THREE.Sphere,o=new THREE.Vector3,s=new THREE.Vector3,c=new THREE.Vector3,l=new THREE.Vector3,h=new THREE.Vector3,u=new THREE.Vector3,d=new THREE.Vector2,p=new THREE.Vector2,f=new THREE.Vector2,E=new THREE.Vector3,m=new THREE.Vector3,g=new THREE.Vector3;return function(E,g){var v=this.geometry,T=this.material,y=this.matrixWorld;if(void 0!==T&&(null===v.boundingSphere&&v.computeBoundingSphere(),a.copy(v.boundingSphere),a.applyMatrix4(y),E.ray.intersectsSphere(a)!==!1&&(n.getInverse(y),i.copy(E.ray).applyMatrix4(n),null===v.boundingBox||i.intersectsBox(v.boundingBox)!==!1))){var R,x;if(v instanceof THREE.BufferGeometry){var H,b,_,M=v.index,w=v.attributes,S=w.position.array;if(void 0!==w.uv&&(R=w.uv.array),null!==M)for(var A=M.array,L=0,C=A.length;C>L;L+=3)H=A[L],b=A[L+1],_=A[L+2],x=r(this,E,i,S,R,H,b,_),x&&(x.faceIndex=Math.floor(L/3),g.push(x));else for(var L=0,C=S.length;C>L;L+=9)H=L/3,b=H+1,_=H+2,x=r(this,E,i,S,R,H,b,_),x&&(x.index=H,g.push(x))}else if(v instanceof THREE.Geometry){var P,I,B,D=T instanceof THREE.MultiMaterial,O=D===!0?T.materials:null,U=v.vertices,N=v.faces,F=v.faceVertexUvs[0];F.length>0&&(R=F);for(var V=0,G=N.length;G>V;V++){var k=N[V],z=D===!0?O[k.materialIndex]:T;if(void 0!==z){if(P=U[k.a],I=U[k.b],B=U[k.c],z.morphTargets===!0){var j=v.morphTargets,W=this.morphTargetInfluences;o.set(0,0,0),s.set(0,0,0),c.set(0,0,0);for(var X=0,q=j.length;q>X;X++){var Y=W[X];if(0!==Y){var Z=j[X].vertices;o.addScaledVector(l.subVectors(Z[k.a],P),Y),s.addScaledVector(h.subVectors(Z[k.b],I),Y),c.addScaledVector(u.subVectors(Z[k.c],B),Y)}}o.add(P),s.add(I),c.add(B),P=o,I=s,B=c}if(x=t(this,E,i,P,I,B,m)){if(R){var K=R[V];d.copy(K[0]),p.copy(K[1]),f.copy(K[2]),x.uv=e(m,P,I,B,d,p,f)}x.face=k,x.faceIndex=V,g.push(x)}}}}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),THREE.Bone=function(e){THREE.Object3D.call(this),this.type="Bone",this.skin=e},THREE.Bone.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Bone,copy:function(e){return THREE.Object3D.prototype.copy.call(this,e),this.skin=e.skin,this}}),THREE.Skeleton=function(e,t,r){if(this.useVertexTexture=void 0!==r?r:!0,this.identityMatrix=new THREE.Matrix4,e=e||[],this.bones=e.slice(0),this.useVertexTexture){var n=Math.sqrt(4*this.bones.length);n=THREE.Math.nextPowerOfTwo(Math.ceil(n)),n=Math.max(n,4),this.boneTextureWidth=n,this.boneTextureHeight=n,this.boneMatrices=new Float32Array(this.boneTextureWidth*this.boneTextureHeight*4),this.boneTexture=new THREE.DataTexture(this.boneMatrices,this.boneTextureWidth,this.boneTextureHeight,THREE.RGBAFormat,THREE.FloatType)}else this.boneMatrices=new Float32Array(16*this.bones.length);if(void 0===t)this.calculateInverses();else if(this.bones.length===t.length)this.boneInverses=t.slice(0);else{console.warn("THREE.Skeleton bonInverses is the wrong length."),this.boneInverses=[];for(var i=0,a=this.bones.length;a>i;i++)this.boneInverses.push(new THREE.Matrix4)}},Object.assign(THREE.Skeleton.prototype,{calculateInverses:function(){this.boneInverses=[];for(var e=0,t=this.bones.length;t>e;e++){var r=new THREE.Matrix4;this.bones[e]&&r.getInverse(this.bones[e].matrixWorld),this.boneInverses.push(r)}},pose:function(){for(var e,t=0,r=this.bones.length;r>t;t++)e=this.bones[t],e&&e.matrixWorld.getInverse(this.boneInverses[t]);for(var t=0,r=this.bones.length;r>t;t++)e=this.bones[t],e&&(e.parent?(e.matrix.getInverse(e.parent.matrixWorld),e.matrix.multiply(e.matrixWorld)):e.matrix.copy(e.matrixWorld),e.matrix.decompose(e.position,e.quaternion,e.scale))},update:function(){var e=new THREE.Matrix4;return function(){for(var t=0,r=this.bones.length;r>t;t++){var n=this.bones[t]?this.bones[t].matrixWorld:this.identityMatrix;e.multiplyMatrices(n,this.boneInverses[t]),e.toArray(this.boneMatrices,16*t)}this.useVertexTexture&&(this.boneTexture.needsUpdate=!0)}}(),clone:function(){return new THREE.Skeleton(this.bones,this.boneInverses,this.useVertexTexture)}}),THREE.SkinnedMesh=function(e,t,r){THREE.Mesh.call(this,e,t),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new THREE.Matrix4,this.bindMatrixInverse=new THREE.Matrix4;var n=[];if(this.geometry&&void 0!==this.geometry.bones){for(var i,a,o=0,s=this.geometry.bones.length;s>o;++o)a=this.geometry.bones[o],i=new THREE.Bone(this),n.push(i),i.name=a.name,i.position.fromArray(a.pos),i.quaternion.fromArray(a.rotq),void 0!==a.scl&&i.scale.fromArray(a.scl);for(var o=0,s=this.geometry.bones.length;s>o;++o)a=this.geometry.bones[o],-1!==a.parent&&null!==a.parent&&void 0!==n[a.parent]?n[a.parent].add(n[o]):this.add(n[o])}this.normalizeSkinWeights(),this.updateMatrixWorld(!0),this.bind(new THREE.Skeleton(n,void 0,r),this.matrixWorld)},THREE.SkinnedMesh.prototype=Object.assign(Object.create(THREE.Mesh.prototype),{constructor:THREE.SkinnedMesh,bind:function(e,t){this.skeleton=e,void 0===t&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.getInverse(t)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){if(this.geometry instanceof THREE.Geometry)for(var e=0;e<this.geometry.skinWeights.length;e++){var t=this.geometry.skinWeights[e],r=1/t.lengthManhattan();r!==1/0?t.multiplyScalar(r):t.set(1,0,0,0)}else if(this.geometry instanceof THREE.BufferGeometry)for(var n=new THREE.Vector4,i=this.geometry.attributes.skinWeight,e=0;e<i.count;e++){n.x=i.getX(e),n.y=i.getY(e),n.z=i.getZ(e),n.w=i.getW(e);var r=1/n.lengthManhattan();r!==1/0?n.multiplyScalar(r):n.set(1,0,0,0),i.setXYZW(e,n.x,n.y,n.z,n.w)}},updateMatrixWorld:function(e){THREE.Mesh.prototype.updateMatrixWorld.call(this,!0),"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn("THREE.SkinnedMesh unrecognized bindMode: "+this.bindMode)},clone:function(){return new this.constructor(this.geometry,this.material,this.useVertexTexture).copy(this)}}),THREE.LOD=function(){THREE.Object3D.call(this),this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]}})},THREE.LOD.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.LOD,copy:function(e){THREE.Object3D.prototype.copy.call(this,e,!1);for(var t=e.levels,r=0,n=t.length;n>r;r++){var i=t[r];this.addLevel(i.object.clone(),i.distance)}return this},addLevel:function(e,t){void 0===t&&(t=0),t=Math.abs(t);for(var r=this.levels,n=0;n<r.length&&!(t<r[n].distance);n++);r.splice(n,0,{distance:t,object:e}),this.add(e)},getObjectForDistance:function(e){for(var t=this.levels,r=1,n=t.length;n>r&&!(e<t[r].distance);r++);return t[r-1].object},raycast:function(){var e=new THREE.Vector3;return function(t,r){e.setFromMatrixPosition(this.matrixWorld);var n=t.ray.origin.distanceTo(e);this.getObjectForDistance(n).raycast(t,r)}}(),update:function(){var e=new THREE.Vector3,t=new THREE.Vector3;return function(r){var n=this.levels;if(n.length>1){e.setFromMatrixPosition(r.matrixWorld),t.setFromMatrixPosition(this.matrixWorld);var i=e.distanceTo(t);n[0].object.visible=!0;for(var a=1,o=n.length;o>a&&i>=n[a].distance;a++)n[a-1].object.visible=!1,n[a].object.visible=!0;for(;o>a;a++)n[a].object.visible=!1}}}(),toJSON:function(e){var t=THREE.Object3D.prototype.toJSON.call(this,e);t.object.levels=[];for(var r=this.levels,n=0,i=r.length;i>n;n++){var a=r[n];t.object.levels.push({object:a.object.uuid,distance:a.distance})}return t}}),THREE.Sprite=function(e){THREE.Object3D.call(this),this.type="Sprite",this.material=void 0!==e?e:new THREE.SpriteMaterial},THREE.Sprite.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Sprite,raycast:function(){var e=new THREE.Vector3;return function(t,r){e.setFromMatrixPosition(this.matrixWorld);var n=t.ray.distanceSqToPoint(e),i=this.scale.x*this.scale.y/4;n>i||r.push({distance:Math.sqrt(n),point:this.position,face:null,object:this})}}(),clone:function(){return new this.constructor(this.material).copy(this)}}),THREE.LensFlare=function(e,t,r,n,i){THREE.Object3D.call(this),this.lensFlares=[],this.positionScreen=new THREE.Vector3,this.customUpdateCallback=void 0,void 0!==e&&this.add(e,t,r,n,i)},THREE.LensFlare.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.LensFlare,copy:function(e){THREE.Object3D.prototype.copy.call(this,e),this.positionScreen.copy(e.positionScreen),this.customUpdateCallback=e.customUpdateCallback;for(var t=0,r=e.lensFlares.length;r>t;t++)this.lensFlares.push(e.lensFlares[t]);return this},add:function(e,t,r,n,i,a){void 0===t&&(t=-1),void 0===r&&(r=0),void 0===a&&(a=1),void 0===i&&(i=new THREE.Color(16777215)),void 0===n&&(n=THREE.NormalBlending),r=Math.min(r,Math.max(0,r)),this.lensFlares.push({texture:e,size:t,distance:r,x:0,y:0,z:0,scale:1,rotation:0,opacity:a,color:i,blending:n})},updateLensFlares:function(){var e,t,r=this.lensFlares.length,n=2*-this.positionScreen.x,i=2*-this.positionScreen.y;for(e=0;r>e;e++)t=this.lensFlares[e],t.x=this.positionScreen.x+n*t.distance,t.y=this.positionScreen.y+i*t.distance,t.wantedRotation=t.x*Math.PI*.25,t.rotation+=.25*(t.wantedRotation-t.rotation)}}),THREE.Scene=function(){THREE.Object3D.call(this),this.type="Scene",this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0},THREE.Scene.prototype=Object.create(THREE.Object3D.prototype),THREE.Scene.prototype.constructor=THREE.Scene,THREE.Scene.prototype.copy=function(e,t){return THREE.Object3D.prototype.copy.call(this,e,t),null!==e.fog&&(this.fog=e.fog.clone()),null!==e.overrideMaterial&&(this.overrideMaterial=e.overrideMaterial.clone()),this.autoUpdate=e.autoUpdate,this.matrixAutoUpdate=e.matrixAutoUpdate,this},THREE.Fog=function(e,t,r){this.name="",this.color=new THREE.Color(e),this.near=void 0!==t?t:1,this.far=void 0!==r?r:1e3},THREE.Fog.prototype.clone=function(){return new THREE.Fog(this.color.getHex(),this.near,this.far)},THREE.FogExp2=function(e,t){this.name="",this.color=new THREE.Color(e),this.density=void 0!==t?t:25e-5},THREE.FogExp2.prototype.clone=function(){return new THREE.FogExp2(this.color.getHex(),this.density)},THREE.ShaderChunk={},THREE.ShaderChunk.alphamap_fragment="#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n",THREE.ShaderChunk.alphamap_pars_fragment="#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif\n",THREE.ShaderChunk.alphatest_fragment="#ifdef ALPHATEST\n	if ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n",THREE.ShaderChunk.aomap_fragment="#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n	#endif\n#endif\n",THREE.ShaderChunk.aomap_pars_fragment="#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif",THREE.ShaderChunk.begin_vertex="\nvec3 transformed = vec3( position );\n",THREE.ShaderChunk.beginnormal_vertex="\nvec3 objectNormal = vec3( normal );\n",THREE.ShaderChunk.bsdfs="bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\n	return any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n		if( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n			float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n			float maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n			return distanceFalloff * maxDistanceCutoffFactor;\n#else\n			return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n		}\n		return 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n	float fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n	return ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	float gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	return 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n	float dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n	vec3 F = F_Schlick( specularColor, dotLH );\n	float G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n	float D = D_GGX( alpha, dotNH );\n	return F * ( G * D );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n	return specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n	vec3 F = F_Schlick( specularColor, dotLH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n	return ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n	return sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n",THREE.ShaderChunk.bumpmap_pars_fragment="#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vUv );\n		vec2 dSTdy = dFdy( vUv );\n		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n		vec3 vSigmaX = dFdx( surf_pos );\n		vec3 vSigmaY = dFdy( surf_pos );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 );\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif\n",THREE.ShaderChunk.clipping_planes_fragment="#if NUM_CLIPPING_PLANES > 0\n	for ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\n		vec4 plane = clippingPlanes[ i ];\n		if ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n	}\n#endif\n",THREE.ShaderChunk.clipping_planes_pars_fragment="#if NUM_CLIPPING_PLANES > 0\n	#if ! defined( PHYSICAL ) && ! defined( PHONG )\n		varying vec3 vViewPosition;\n	#endif\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n",THREE.ShaderChunk.clipping_planes_pars_vertex="#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n	varying vec3 vViewPosition;\n#endif\n",THREE.ShaderChunk.clipping_planes_vertex="#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n	vViewPosition = - mvPosition.xyz;\n#endif\n",THREE.ShaderChunk.color_fragment="#ifdef USE_COLOR\n	diffuseColor.rgb *= vColor;\n#endif",THREE.ShaderChunk.color_pars_fragment="#ifdef USE_COLOR\n	varying vec3 vColor;\n#endif\n",THREE.ShaderChunk.color_pars_vertex="#ifdef USE_COLOR\n	varying vec3 vColor;\n#endif",THREE.ShaderChunk.color_vertex="#ifdef USE_COLOR\n	vColor.xyz = color.xyz;\n#endif",THREE.ShaderChunk.common="#define PI 3.14159265359\n#define PI2 6.28318530718\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract(sin(sn) * c);\n}\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\nstruct GeometricContext {\n	vec3 position;\n	vec3 normal;\n	vec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	float distance = dot( planeNormal, point - pointOnPlane );\n	return - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	return sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	return lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\n",THREE.ShaderChunk.cube_uv_reflection_fragment="#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n	vec3 absDirection = abs(direction);\n	int face = -1;\n	if( absDirection.x > absDirection.z ) {\n		if(absDirection.x > absDirection.y )\n			face = direction.x > 0.0 ? 0 : 3;\n		else\n			face = direction.y > 0.0 ? 1 : 4;\n	}\n	else {\n		if(absDirection.z > absDirection.y )\n			face = direction.z > 0.0 ? 2 : 5;\n		else\n			face = direction.y > 0.0 ? 1 : 4;\n	}\n	return face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n	float scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n	float dxRoughness = dFdx(roughness);\n	float dyRoughness = dFdy(roughness);\n	vec3 dx = dFdx( vec * scale * dxRoughness );\n	vec3 dy = dFdy( vec * scale * dyRoughness );\n	float d = max( dot( dx, dx ), dot( dy, dy ) );\n	d = clamp(d, 1.0, cubeUV_rangeClamp);\n	float mipLevel = 0.5 * log2(d);\n	return vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n	mipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n	float a = 16.0 * cubeUV_rcpTextureSize;\n	vec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n	vec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n	float powScale = exp2_packed.x * exp2_packed.y;\n	float scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n	float mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n	bool bRes = mipLevel == 0.0;\n	scale =  bRes && (scale < a) ? a : scale;\n	vec3 r;\n	vec2 offset;\n	int face = getFaceFromDirection(direction);\n	float rcpPowScale = 1.0 / powScale;\n	if( face == 0) {\n		r = vec3(direction.x, -direction.z, direction.y);\n		offset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n	}\n	else if( face == 1) {\n		r = vec3(direction.y, direction.x, direction.z);\n		offset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n	}\n	else if( face == 2) {\n		r = vec3(direction.z, direction.x, direction.y);\n		offset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n	}\n	else if( face == 3) {\n		r = vec3(direction.x, direction.z, direction.y);\n		offset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n	}\n	else if( face == 4) {\n		r = vec3(direction.y, direction.x, -direction.z);\n		offset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n	}\n	else {\n		r = vec3(direction.z, -direction.x, direction.y);\n		offset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n	}\n	r = normalize(r);\n	float texelOffset = 0.5 * cubeUV_rcpTextureSize;\n	vec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n	vec2 base = offset + vec2( texelOffset );\n	return base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n	float roughnessVal = roughness* cubeUV_maxLods3;\n	float r1 = floor(roughnessVal);\n	float r2 = r1 + 1.0;\n	float t = fract(roughnessVal);\n	vec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n	float s = mipInfo.y;\n	float level0 = mipInfo.x;\n	float level1 = level0 + 1.0;\n	level1 = level1 > 5.0 ? 5.0 : level1;\n	level0 += min( floor( s + 0.5 ), 5.0 );\n	vec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n	vec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n	vec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n	vec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n	vec4 result = mix(color10, color20, t);\n	return vec4(result.rgb, 1.0);\n}\n#endif\n",THREE.ShaderChunk.defaultnormal_vertex="#ifdef FLIP_SIDED\n	objectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;\n",THREE.ShaderChunk.displacementmap_vertex="#ifdef USE_DISPLACEMENTMAP\n	transformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n",THREE.ShaderChunk.displacementmap_pars_vertex="#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif\n",THREE.ShaderChunk.emissivemap_fragment="#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vUv );\n	emissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n",THREE.ShaderChunk.emissivemap_pars_fragment="#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif\n",THREE.ShaderChunk.encodings_pars_fragment="\nvec4 LinearToLinear( in vec4 value ) {\n  return value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n  float maxComponent = max( max( value.r, value.g ), value.b );\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n  float maxRGB = max( value.x, max( value.g, value.b ) );\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n  M            = ceil( M * 255.0 ) / 255.0;\n  return vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n    float maxRGB = max( value.x, max( value.g, value.b ) );\n    float D      = max( maxRange / maxRGB, 1.0 );\n    D            = min( floor( D ) / 255.0, 1.0 );\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n  vec4 vResult;\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n  vResult.w = fract(Le);\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n  return vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n  float Le = value.z * 255.0 + value.w;\n  vec3 Xp_Y_XYZp;\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n  return vec4( max(vRGB, 0.0), 1.0 );\n}\n",
THREE.ShaderChunk.encodings_fragment="  gl_FragColor = linearToOutputTexel( gl_FragColor );\n",THREE.ShaderChunk.envmap_fragment="#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToVertex, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef DOUBLE_SIDED\n		float flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n	#else\n		float flipNormal = 1.0;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#elif defined( ENVMAP_TYPE_EQUIREC )\n		vec2 sampleUV;\n		sampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n		sampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n		vec4 envColor = texture2D( envMap, sampleUV );\n	#elif defined( ENVMAP_TYPE_SPHERE )\n		vec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\n		vec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n	#endif\n	envColor = envMapTexelToLinear( envColor );\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif\n",THREE.ShaderChunk.envmap_pars_fragment="#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n	uniform float reflectivity;\n	uniform float envMapIntenstiy;\n#endif\n#ifdef USE_ENVMAP\n	#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n		varying vec3 vWorldPosition;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	uniform float flipEnvMap;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif\n",THREE.ShaderChunk.envmap_pars_vertex="#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif\n",THREE.ShaderChunk.envmap_vertex="#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif\n",THREE.ShaderChunk.fog_fragment="#ifdef USE_FOG\n	#ifdef USE_LOGDEPTHBUF_EXT\n		float depth = gl_FragDepthEXT / gl_FragCoord.w;\n	#else\n		float depth = gl_FragCoord.z / gl_FragCoord.w;\n	#endif\n	#ifdef FOG_EXP2\n		float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, depth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n",THREE.ShaderChunk.fog_pars_fragment="#ifdef USE_FOG\n	uniform vec3 fogColor;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif",THREE.ShaderChunk.lightmap_fragment="#ifdef USE_LIGHTMAP\n	reflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n",THREE.ShaderChunk.lightmap_pars_fragment="#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif",THREE.ShaderChunk.lights_lambert_vertex="vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n	vLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		getPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		getSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_DIR_LIGHTS > 0\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		getDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n		vLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n		#ifdef DOUBLE_SIDED\n			vLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n		#endif\n	}\n#endif\n",THREE.ShaderChunk.lights_pars="uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	return irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n		int shadow;\n		float shadowBias;\n		float shadowRadius;\n		vec2 shadowMapSize;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n		directLight.color = directionalLight.color;\n		directLight.direction = directionalLight.direction;\n		directLight.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n		int shadow;\n		float shadowBias;\n		float shadowRadius;\n		vec2 shadowMapSize;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n		vec3 lVector = pointLight.position - geometry.position;\n		directLight.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		if ( testLightInRange( lightDistance, pointLight.distance ) ) {\n			directLight.color = pointLight.color;\n			directLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n			directLight.visible = true;\n		} else {\n			directLight.color = vec3( 0.0 );\n			directLight.visible = false;\n		}\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n		int shadow;\n		float shadowBias;\n		float shadowRadius;\n		vec2 shadowMapSize;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n		vec3 lVector = spotLight.position - geometry.position;\n		directLight.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		float angleCos = dot( directLight.direction, spotLight.direction );\n		if ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\n			float spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n			directLight.color = spotLight.color;\n			directLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n			directLight.visible = true;\n		} else {\n			directLight.color = vec3( 0.0 );\n			directLight.visible = false;\n		}\n	}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n		float dotNL = dot( geometry.normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			irradiance *= PI;\n		#endif\n		return irradiance;\n	}\n#endif\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n	vec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n		#ifdef DOUBLE_SIDED\n			float flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n		#else\n			float flipNormal = 1.0;\n		#endif\n		vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n		#ifdef ENVMAP_TYPE_CUBE\n			vec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n			#else\n				vec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\n			vec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n			vec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n		#else\n			vec4 envMapColor = vec4( 0.0 );\n		#endif\n		return PI * envMapColor.rgb * envMapIntensity;\n	}\n	float getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n		float maxMIPLevelScalar = float( maxMIPLevel );\n		float desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n		return clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n	}\n	vec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n		#else\n			vec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n		#endif\n		#ifdef DOUBLE_SIDED\n			float flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n		#else\n			float flipNormal = 1.0;\n		#endif\n		reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n		float specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n		#ifdef ENVMAP_TYPE_CUBE\n			vec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n			#else\n				vec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\n			vec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n			vec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n		#elif defined( ENVMAP_TYPE_EQUIREC )\n			vec2 sampleUV;\n			sampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n			sampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n			#else\n				vec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_SPHERE )\n			vec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n			#else\n				vec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#endif\n		return envMapColor.rgb * envMapIntensity;\n	}\n#endif\n",THREE.ShaderChunk.lights_phong_fragment="BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n",THREE.ShaderChunk.lights_phong_pars_fragment="varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n	vec3	diffuseColor;\n	vec3	specularColor;\n	float	specularShininess;\n	float	specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )	(0)\n",THREE.ShaderChunk.lights_physical_fragment="PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( 0.16 * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#endif\n",THREE.ShaderChunk.lights_physical_pars_fragment="struct PhysicalMaterial {\n	vec3	diffuseColor;\n	float	specularRoughness;\n	vec3	specularColor;\n	#ifndef STANDARD\n	#endif\n};\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectSpecular += radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n",THREE.ShaderChunk.lights_template="\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointDirectLightIrradiance( pointLight, geometry, directLight );\n		#ifdef USE_SHADOWMAP\n		directLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotDirectLightIrradiance( spotLight, geometry, directLight );\n		#ifdef USE_SHADOWMAP\n		directLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n		#ifdef USE_SHADOWMAP\n		directLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	#ifdef USE_LIGHTMAP\n		vec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			lightMapIrradiance *= PI;\n		#endif\n		irradiance += lightMapIrradiance;\n	#endif\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n		}\n	#endif\n	#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n	 	irradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n	#endif\n	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	vec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n	RE_IndirectSpecular( radiance, geometry, material, reflectedLight );\n#endif\n",THREE.ShaderChunk.logdepthbuf_fragment="#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n	gl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n#endif",THREE.ShaderChunk.logdepthbuf_pars_fragment="#ifdef USE_LOGDEPTHBUF\n	uniform float logDepthBufFC;\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n	#endif\n#endif\n",THREE.ShaderChunk.logdepthbuf_pars_vertex="#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n	#endif\n	uniform float logDepthBufFC;\n#endif",THREE.ShaderChunk.logdepthbuf_vertex="#ifdef USE_LOGDEPTHBUF\n	gl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n	#else\n		gl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n	#endif\n#endif\n",THREE.ShaderChunk.map_fragment="#ifdef USE_MAP\n	vec4 texelColor = texture2D( map, vUv );\n	texelColor = mapTexelToLinear( texelColor );\n	diffuseColor *= texelColor;\n#endif\n",THREE.ShaderChunk.map_pars_fragment="#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n",THREE.ShaderChunk.map_particle_fragment="#ifdef USE_MAP\n	vec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n	diffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n",THREE.ShaderChunk.map_particle_pars_fragment="#ifdef USE_MAP\n	uniform vec4 offsetRepeat;\n	uniform sampler2D map;\n#endif\n",THREE.ShaderChunk.metalnessmap_fragment="float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vUv );\n	metalnessFactor *= texelMetalness.r;\n#endif\n",THREE.ShaderChunk.metalnessmap_pars_fragment="#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif",THREE.ShaderChunk.morphnormal_vertex="#ifdef USE_MORPHNORMALS\n	objectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n	objectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n	objectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n	objectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n",THREE.ShaderChunk.morphtarget_pars_vertex="#ifdef USE_MORPHTARGETS\n	#ifndef USE_MORPHNORMALS\n	uniform float morphTargetInfluences[ 8 ];\n	#else\n	uniform float morphTargetInfluences[ 4 ];\n	#endif\n#endif",THREE.ShaderChunk.morphtarget_vertex="#ifdef USE_MORPHTARGETS\n	transformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n	transformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n	transformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n	transformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n	#ifndef USE_MORPHNORMALS\n	transformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n	transformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n	transformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n	transformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n	#endif\n#endif\n",THREE.ShaderChunk.normal_fragment="#ifdef FLAT_SHADED\n	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n	#endif\n#endif\n#ifdef USE_NORMALMAP\n	normal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n",THREE.ShaderChunk.normalmap_pars_fragment="#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n		vec3 q0 = dFdx( eye_pos.xyz );\n		vec3 q1 = dFdy( eye_pos.xyz );\n		vec2 st0 = dFdx( vUv.st );\n		vec2 st1 = dFdy( vUv.st );\n		vec3 S = normalize( q0 * st1.t - q1 * st0.t );\n		vec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n		vec3 N = normalize( surf_norm );\n		vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n		mapN.xy = normalScale * mapN.xy;\n		mat3 tsn = mat3( S, T, N );\n		return normalize( tsn * mapN );\n	}\n#endif\n",THREE.ShaderChunk.packing="vec3 packNormalToRGB( const in vec3 normal ) {\n  return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n  return 1.0 - 2.0 * rgb.xyz;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n	vec4 r = vec4( fract( v * PackFactors ), v );\n	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors );\n}\nfloat viewZToOrthoDepth( const in float viewZ, const in float near, const in float far ) {\n  return ( viewZ + near ) / ( near - far );\n}\nfloat OrthoDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n  return linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n",THREE.ShaderChunk.premultiplied_alpha_fragment="#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif\n",THREE.ShaderChunk.project_vertex="#ifdef USE_SKINNING\n	vec4 mvPosition = modelViewMatrix * skinned;\n#else\n	vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;\n",THREE.ShaderChunk.roughnessmap_fragment="float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vUv );\n	roughnessFactor *= texelRoughness.r;\n#endif\n",THREE.ShaderChunk.roughnessmap_pars_fragment="#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif",THREE.ShaderChunk.shadowmap_pars_fragment="#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	float texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n		const vec2 offset = vec2( 0.0, 1.0 );\n		vec2 texelSize = vec2( 1.0 ) / size;\n		vec2 centroidUV = floor( uv * size + 0.5 ) / size;\n		float lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n		float lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n		float rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n		float rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n		vec2 f = fract( uv * size + 0.5 );\n		float a = mix( lb, lt, f.y );\n		float b = mix( rb, rt, f.y );\n		float c = mix( a, b, f.x );\n		return c;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n		bool inFrustum = all( inFrustumVec );\n		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n		bool frustumTest = all( frustumTestVec );\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			return (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			return (\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return 1.0;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n		vec3 lightToPosition = shadowCoord.xyz;\n		vec3 bd3D = normalize( lightToPosition );\n		float dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n			return (\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n		#endif\n	}\n#endif\n",
THREE.ShaderChunk.shadowmap_pars_vertex="#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n	#endif\n#endif\n",THREE.ShaderChunk.shadowmap_vertex="#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n	}\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n	}\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n	}\n	#endif\n#endif\n",THREE.ShaderChunk.shadowmask_pars_fragment="float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n	DirectionalLight directionalLight;\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		shadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n	SpotLight spotLight;\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		shadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n	}\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n	PointLight pointLight;\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		shadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n	}\n	#endif\n	#endif\n	return shadow;\n}\n",THREE.ShaderChunk.skinbase_vertex="#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",THREE.ShaderChunk.skinning_pars_vertex="#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	#ifdef BONE_TEXTURE\n		uniform sampler2D boneTexture;\n		uniform int boneTextureWidth;\n		uniform int boneTextureHeight;\n		mat4 getBoneMatrix( const in float i ) {\n			float j = i * 4.0;\n			float x = mod( j, float( boneTextureWidth ) );\n			float y = floor( j / float( boneTextureWidth ) );\n			float dx = 1.0 / float( boneTextureWidth );\n			float dy = 1.0 / float( boneTextureHeight );\n			y = dy * ( y + 0.5 );\n			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n			mat4 bone = mat4( v1, v2, v3, v4 );\n			return bone;\n		}\n	#else\n		uniform mat4 boneMatrices[ MAX_BONES ];\n		mat4 getBoneMatrix( const in float i ) {\n			mat4 bone = boneMatrices[ int(i) ];\n			return bone;\n		}\n	#endif\n#endif\n",THREE.ShaderChunk.skinning_vertex="#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	skinned  = bindMatrixInverse * skinned;\n#endif\n",THREE.ShaderChunk.skinnormal_vertex="#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n",THREE.ShaderChunk.specularmap_fragment="float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif",THREE.ShaderChunk.specularmap_pars_fragment="#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif",THREE.ShaderChunk.tonemapping_fragment="#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n",THREE.ShaderChunk.tonemapping_pars_fragment="#define saturate(a) clamp( a, 0.0, 1.0 )\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n  return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  return saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  color = max( vec3( 0.0 ), color - 0.004 );\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n",THREE.ShaderChunk.uv2_pars_fragment="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	varying vec2 vUv2;\n#endif",THREE.ShaderChunk.uv2_pars_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	attribute vec2 uv2;\n	varying vec2 vUv2;\n#endif",THREE.ShaderChunk.uv2_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	vUv2 = uv2;\n#endif",THREE.ShaderChunk.uv_pars_fragment="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n	varying vec2 vUv;\n#endif",THREE.ShaderChunk.uv_pars_vertex="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n	varying vec2 vUv;\n	uniform vec4 offsetRepeat;\n#endif\n",THREE.ShaderChunk.uv_vertex="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n	vUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif",THREE.ShaderChunk.worldpos_vertex="#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n	#ifdef USE_SKINNING\n		vec4 worldPosition = modelMatrix * skinned;\n	#else\n		vec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n	#endif\n#endif\n",THREE.UniformsUtils={merge:function(e){for(var t={},r=0;r<e.length;r++){var n=this.clone(e[r]);for(var i in n)t[i]=n[i]}return t},clone:function(e){var t={};for(var r in e){t[r]={};for(var n in e[r]){var i=e[r][n];i instanceof THREE.Color||i instanceof THREE.Vector2||i instanceof THREE.Vector3||i instanceof THREE.Vector4||i instanceof THREE.Matrix3||i instanceof THREE.Matrix4||i instanceof THREE.Texture?t[r][n]=i.clone():Array.isArray(i)?t[r][n]=i.slice():t[r][n]=i}}return t}},THREE.UniformsLib={common:{diffuse:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"1f",value:1},map:{type:"t",value:null},offsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)},specularMap:{type:"t",value:null},alphaMap:{type:"t",value:null},envMap:{type:"t",value:null},flipEnvMap:{type:"1f",value:-1},reflectivity:{type:"1f",value:1},refractionRatio:{type:"1f",value:.98}},aomap:{aoMap:{type:"t",value:null},aoMapIntensity:{type:"1f",value:1}},lightmap:{lightMap:{type:"t",value:null},lightMapIntensity:{type:"1f",value:1}},emissivemap:{emissiveMap:{type:"t",value:null}},bumpmap:{bumpMap:{type:"t",value:null},bumpScale:{type:"1f",value:1}},normalmap:{normalMap:{type:"t",value:null},normalScale:{type:"v2",value:new THREE.Vector2(1,1)}},displacementmap:{displacementMap:{type:"t",value:null},displacementScale:{type:"1f",value:1},displacementBias:{type:"1f",value:0}},roughnessmap:{roughnessMap:{type:"t",value:null}},metalnessmap:{metalnessMap:{type:"t",value:null}},fog:{fogDensity:{type:"1f",value:25e-5},fogNear:{type:"1f",value:1},fogFar:{type:"1f",value:2e3},fogColor:{type:"c",value:new THREE.Color(16777215)}},lights:{ambientLightColor:{type:"3fv",value:[]},directionalLights:{type:"sa",value:[],properties:{direction:{type:"v3"},color:{type:"c"},shadow:{type:"1i"},shadowBias:{type:"1f"},shadowRadius:{type:"1f"},shadowMapSize:{type:"v2"}}},directionalShadowMap:{type:"tv",value:[]},directionalShadowMatrix:{type:"m4v",value:[]},spotLights:{type:"sa",value:[],properties:{color:{type:"c"},position:{type:"v3"},direction:{type:"v3"},distance:{type:"1f"},coneCos:{type:"1f"},penumbraCos:{type:"1f"},decay:{type:"1f"},shadow:{type:"1i"},shadowBias:{type:"1f"},shadowRadius:{type:"1f"},shadowMapSize:{type:"v2"}}},spotShadowMap:{type:"tv",value:[]},spotShadowMatrix:{type:"m4v",value:[]},pointLights:{type:"sa",value:[],properties:{color:{type:"c"},position:{type:"v3"},decay:{type:"1f"},distance:{type:"1f"},shadow:{type:"1i"},shadowBias:{type:"1f"},shadowRadius:{type:"1f"},shadowMapSize:{type:"v2"}}},pointShadowMap:{type:"tv",value:[]},pointShadowMatrix:{type:"m4v",value:[]},hemisphereLights:{type:"sa",value:[],properties:{direction:{type:"v3"},skyColor:{type:"c"},groundColor:{type:"c"}}}},points:{diffuse:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"1f",value:1},size:{type:"1f",value:1},scale:{type:"1f",value:1},map:{type:"t",value:null},offsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)}}},THREE.ShaderChunk.cube_frag="uniform samplerCube tCube;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n	#include <logdepthbuf_fragment>\n}\n",THREE.ShaderChunk.cube_vert="varying vec3 vWorldPosition;\n#include <common>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vWorldPosition = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n}\n",THREE.ShaderChunk.depth_frag="#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <logdepthbuf_fragment>\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n	#endif\n}\n",THREE.ShaderChunk.depth_vert="#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#include <begin_vertex>\n	#include <displacementmap_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n}\n",THREE.ShaderChunk.distanceRGBA_frag="uniform vec3 lightPos;\nvarying vec4 vWorldPosition;\n#include <common>\n#include <packing>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	#include <clipping_planes_fragment>\n	gl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\n}\n",THREE.ShaderChunk.distanceRGBA_vert="varying vec4 vWorldPosition;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <skinbase_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition;\n}\n",THREE.ShaderChunk.equirect_frag="uniform sampler2D tEquirect;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 direction = normalize( vWorldPosition );\n	vec2 sampleUV;\n	sampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\n	sampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n	gl_FragColor = texture2D( tEquirect, sampleUV );\n	#include <logdepthbuf_fragment>\n}\n",THREE.ShaderChunk.equirect_vert="varying vec3 vWorldPosition;\n#include <common>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vWorldPosition = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n}\n",THREE.ShaderChunk.linedashed_frag="uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n",THREE.ShaderChunk.linedashed_vert="uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <color_vertex>\n	vLineDistance = scale * lineDistance;\n	vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n}\n",THREE.ShaderChunk.meshbasic_frag="uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight;\n	reflectedLight.directDiffuse = vec3( 0.0 );\n	reflectedLight.directSpecular = vec3( 0.0 );\n	reflectedLight.indirectDiffuse = diffuseColor.rgb;\n	reflectedLight.indirectSpecular = vec3( 0.0 );\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n",THREE.ShaderChunk.meshbasic_vert="#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_ENVMAP\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	#include <envmap_vertex>\n}\n",THREE.ShaderChunk.meshlambert_frag="uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <emissivemap_fragment>\n	reflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n	#include <lightmap_fragment>\n	reflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n	#ifdef DOUBLE_SIDED\n		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n	#else\n		reflectedLight.directDiffuse = vLightFront;\n	#endif\n	reflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n",THREE.ShaderChunk.meshlambert_vert="#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <lights_lambert_vertex>\n	#include <shadowmap_vertex>\n}\n",THREE.ShaderChunk.meshphong_frag="#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_template>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n",THREE.ShaderChunk.meshphong_vert="#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n#endif\n	#include <begin_vertex>\n	#include <displacementmap_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n}\n",THREE.ShaderChunk.meshphysical_frag="#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\nuniform float envMapIntensity;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_template>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n",THREE.ShaderChunk.meshphysical_vert="#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n#endif\n	#include <begin_vertex>\n	#include <displacementmap_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n}\n",THREE.ShaderChunk.normal_frag="uniform float opacity;\nvarying vec3 vNormal;\n#include <common>\n#include <packing>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	gl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\n	#include <logdepthbuf_fragment>\n}\n",THREE.ShaderChunk.normal_vert="varying vec3 vNormal;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vNormal = normalize( normalMatrix * normal );\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n}\n",THREE.ShaderChunk.points_frag="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n",THREE.ShaderChunk.points_vert="uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <color_vertex>\n	#include <begin_vertex>\n	#include <project_vertex>\n	#ifdef USE_SIZEATTENUATION\n		gl_PointSize = size * ( scale / - mvPosition.z );\n	#else\n		gl_PointSize = size;\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n}\n",THREE.ShaderChunk.shadow_frag="uniform float opacity;\n#include <common>\n#include <packing>\n#include <bsdfs>\n#include <lights_pars>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	gl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\n}\n",THREE.ShaderChunk.shadow_vert="#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <begin_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n}\n",THREE.ShaderLib={basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.aomap,THREE.UniformsLib.fog]),vertexShader:THREE.ShaderChunk.meshbasic_vert,fragmentShader:THREE.ShaderChunk.meshbasic_frag},lambert:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.aomap,THREE.UniformsLib.lightmap,THREE.UniformsLib.emissivemap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,{emissive:{type:"c",value:new THREE.Color(0)}}]),vertexShader:THREE.ShaderChunk.meshlambert_vert,fragmentShader:THREE.ShaderChunk.meshlambert_frag},phong:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.aomap,THREE.UniformsLib.lightmap,THREE.UniformsLib.emissivemap,THREE.UniformsLib.bumpmap,THREE.UniformsLib.normalmap,THREE.UniformsLib.displacementmap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,{emissive:{type:"c",value:new THREE.Color(0)},specular:{type:"c",value:new THREE.Color(1118481)},shininess:{type:"1f",value:30}}]),vertexShader:THREE.ShaderChunk.meshphong_vert,fragmentShader:THREE.ShaderChunk.meshphong_frag},standard:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.aomap,THREE.UniformsLib.lightmap,THREE.UniformsLib.emissivemap,THREE.UniformsLib.bumpmap,THREE.UniformsLib.normalmap,THREE.UniformsLib.displacementmap,THREE.UniformsLib.roughnessmap,THREE.UniformsLib.metalnessmap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,{emissive:{type:"c",value:new THREE.Color(0)},roughness:{type:"1f",value:.5},metalness:{type:"1f",value:0},envMapIntensity:{type:"1f",value:1}}]),vertexShader:THREE.ShaderChunk.meshphysical_vert,fragmentShader:THREE.ShaderChunk.meshphysical_frag},points:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.points,THREE.UniformsLib.fog]),vertexShader:THREE.ShaderChunk.points_vert,fragmentShader:THREE.ShaderChunk.points_frag},dashed:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,{scale:{type:"1f",value:1},dashSize:{type:"1f",value:1},totalSize:{type:"1f",value:2}}]),vertexShader:THREE.ShaderChunk.linedashed_vert,fragmentShader:THREE.ShaderChunk.linedashed_frag},depth:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.displacementmap]),vertexShader:THREE.ShaderChunk.depth_vert,fragmentShader:THREE.ShaderChunk.depth_frag},normal:{uniforms:{opacity:{type:"1f",value:1}},vertexShader:THREE.ShaderChunk.normal_vert,fragmentShader:THREE.ShaderChunk.normal_frag},cube:{uniforms:{
tCube:{type:"t",value:null},tFlip:{type:"1f",value:-1}},vertexShader:THREE.ShaderChunk.cube_vert,fragmentShader:THREE.ShaderChunk.cube_frag},equirect:{uniforms:{tEquirect:{type:"t",value:null},tFlip:{type:"1f",value:-1}},vertexShader:THREE.ShaderChunk.equirect_vert,fragmentShader:THREE.ShaderChunk.equirect_frag},distanceRGBA:{uniforms:{lightPos:{type:"v3",value:new THREE.Vector3}},vertexShader:THREE.ShaderChunk.distanceRGBA_vert,fragmentShader:THREE.ShaderChunk.distanceRGBA_frag}},THREE.ShaderLib.physical={uniforms:THREE.UniformsUtils.merge([THREE.ShaderLib.standard.uniforms,{}]),vertexShader:THREE.ShaderChunk.meshphysical_vert,fragmentShader:THREE.ShaderChunk.meshphysical_frag},THREE.WebGLRenderer=function(e){function t(){return null===ye?Ie:1}function r(e,t,r,n){ce===!0&&(e*=n,t*=n,r*=n),$e.clearColor(e,t,r,n)}function n(){$e.init(),$e.scissor(_e.copy(Be).multiplyScalar(Ie)),$e.viewport(we.copy(Oe).multiplyScalar(Ie)),r(Ae.r,Ae.g,Ae.b,Le)}function i(){Te=null,be=null,He="",xe=-1,$e.reset()}function a(e){e.preventDefault(),i(),n(),et.clear()}function o(e){var t=e.target;t.removeEventListener("dispose",o),l(t),We.textures--}function s(e){var t=e.target;t.removeEventListener("dispose",s),h(t),We.textures--}function c(e){var t=e.target;t.removeEventListener("dispose",c),u(t)}function l(e){var t=et.get(e);if(e.image&&t.__image__webglTextureCube)qe.deleteTexture(t.__image__webglTextureCube);else{if(void 0===t.__webglInit)return;qe.deleteTexture(t.__webglTexture)}et["delete"](e)}function h(e){var t=et.get(e),r=et.get(e.texture);if(e){if(void 0!==r.__webglTexture&&qe.deleteTexture(r.__webglTexture),e.depthTexture&&e.depthTexture.dispose(),e instanceof THREE.WebGLRenderTargetCube)for(var n=0;6>n;n++)qe.deleteFramebuffer(t.__webglFramebuffer[n]),t.__webglDepthbuffer&&qe.deleteRenderbuffer(t.__webglDepthbuffer[n]);else qe.deleteFramebuffer(t.__webglFramebuffer),t.__webglDepthbuffer&&qe.deleteRenderbuffer(t.__webglDepthbuffer);et["delete"](e.texture),et["delete"](e)}}function u(e){d(e),et["delete"](e)}function d(e){var t=et.get(e).program;e.program=void 0,void 0!==t&&rt.releaseProgram(t)}function p(e,t,r,n){var i;if(r instanceof THREE.InstancedBufferGeometry&&(i=Qe.get("ANGLE_instanced_arrays"),null===i))return void console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");void 0===n&&(n=0),$e.initAttributes();var a=r.attributes,o=t.getAttributes(),s=e.defaultAttributeValues;for(var c in o){var l=o[c];if(l>=0){var h=a[c];if(void 0!==h){var u=qe.FLOAT,d=h.array,p=h.normalized;d instanceof Float32Array?u=qe.FLOAT:d instanceof Float64Array?console.warn("Unsupported data buffer format: Float64Array"):d instanceof Uint16Array?u=qe.UNSIGNED_SHORT:d instanceof Int16Array?u=qe.SHORT:d instanceof Uint32Array?u=qe.UNSIGNED_INT:d instanceof Int32Array?u=qe.INT:d instanceof Int8Array?u=qe.BYTE:d instanceof Uint8Array&&(u=qe.UNSIGNED_BYTE);var f=h.itemSize,E=tt.getAttributeBuffer(h);if(h instanceof THREE.InterleavedBufferAttribute){var m=h.data,g=m.stride,v=h.offset;m instanceof THREE.InstancedInterleavedBuffer?($e.enableAttributeAndDivisor(l,m.meshPerAttribute,i),void 0===r.maxInstancedCount&&(r.maxInstancedCount=m.meshPerAttribute*m.count)):$e.enableAttribute(l),qe.bindBuffer(qe.ARRAY_BUFFER,E),qe.vertexAttribPointer(l,f,u,p,g*m.array.BYTES_PER_ELEMENT,(n*g+v)*m.array.BYTES_PER_ELEMENT)}else h instanceof THREE.InstancedBufferAttribute?($e.enableAttributeAndDivisor(l,h.meshPerAttribute,i),void 0===r.maxInstancedCount&&(r.maxInstancedCount=h.meshPerAttribute*h.count)):$e.enableAttribute(l),qe.bindBuffer(qe.ARRAY_BUFFER,E),qe.vertexAttribPointer(l,f,u,p,0,n*f*h.array.BYTES_PER_ELEMENT)}else if(void 0!==s){var T=s[c];if(void 0!==T)switch(T.length){case 2:qe.vertexAttrib2fv(l,T);break;case 3:qe.vertexAttrib3fv(l,T);break;case 4:qe.vertexAttrib4fv(l,T);break;default:qe.vertexAttrib1fv(l,T)}}}}$e.disableUnusedAttributes()}function f(e,t){return Math.abs(t[0])-Math.abs(e[0])}function E(e,t){return e.object.renderOrder!==t.object.renderOrder?e.object.renderOrder-t.object.renderOrder:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function m(e,t){return e.object.renderOrder!==t.object.renderOrder?e.object.renderOrder-t.object.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function g(e,t,r,n,i){var a,o;r.transparent?(a=pe,o=++fe):(a=ue,o=++de);var s=a[o];void 0!==s?(s.id=e.id,s.object=e,s.geometry=t,s.material=r,s.z=ze.z,s.group=i):(s={id:e.id,object:e,geometry:t,material:r,z:ze.z,group:i},a.push(s))}function v(e){var t=e.geometry;return null===t.boundingSphere&&t.computeBoundingSphere(),Ge.copy(t.boundingSphere).applyMatrix4(e.matrixWorld),y(Ge)}function T(e){return Ge.center.set(0,0,0),Ge.radius=.7071067811865476,Ge.applyMatrix4(e.matrixWorld),y(Ge)}function y(e){if(!Ue.intersectsSphere(e))return!1;var t=Ne.numPlanes;if(0===t)return!0;var r=ve.clippingPlanes,n=e.center,i=-e.radius,a=0;do if(r[a].distanceToPoint(n)<i)return!1;while(++a!==t);return!0}function R(e,t){if(e.visible!==!1){if(e.layers.test(t.layers))if(e instanceof THREE.Light)he.push(e);else if(e instanceof THREE.Sprite)e.frustumCulled!==!1&&T(e)!==!0||me.push(e);else if(e instanceof THREE.LensFlare)ge.push(e);else if(e instanceof THREE.ImmediateRenderObject)ve.sortObjects===!0&&(ze.setFromMatrixPosition(e.matrixWorld),ze.applyProjection(ke)),g(e,null,e.material,ze.z,null);else if((e instanceof THREE.Mesh||e instanceof THREE.Line||e instanceof THREE.Points)&&(e instanceof THREE.SkinnedMesh&&e.skeleton.update(),e.frustumCulled===!1||v(e)===!0)){var r=e.material;if(r.visible===!0){ve.sortObjects===!0&&(ze.setFromMatrixPosition(e.matrixWorld),ze.applyProjection(ke));var n=tt.update(e);if(r instanceof THREE.MultiMaterial)for(var i=n.groups,a=r.materials,o=0,s=i.length;s>o;o++){var c=i[o],l=a[c.materialIndex];l.visible===!0&&g(e,n,l,ze.z,c)}else g(e,n,r,ze.z,null)}}for(var h=e.children,o=0,s=h.length;s>o;o++)R(h[o],t)}}function x(e,t,r,n){for(var i=0,a=e.length;a>i;i++){var o=e[i],s=o.object,c=o.geometry,l=void 0===n?o.material:n,h=o.group;if(s.modelViewMatrix.multiplyMatrices(t.matrixWorldInverse,s.matrixWorld),s.normalMatrix.getNormalMatrix(s.modelViewMatrix),s instanceof THREE.ImmediateRenderObject){b(l);var u=_(t,r,l,s);He="",s.render(function(e){ve.renderBufferImmediate(e,u,l)})}else ve.renderBufferDirect(t,r,c,l,s,h)}}function H(e,t,r){var n=et.get(e),i=rt.getParameters(e,je,t,Ne.numPlanes,r),a=rt.getProgramCode(e,i),o=n.program,s=!0;if(void 0===o)e.addEventListener("dispose",c);else if(o.code!==a)d(e);else{if(void 0!==i.shaderID)return;s=!1}if(s){if(i.shaderID){var l=THREE.ShaderLib[i.shaderID];n.__webglShader={name:e.type,uniforms:THREE.UniformsUtils.clone(l.uniforms),vertexShader:l.vertexShader,fragmentShader:l.fragmentShader}}else n.__webglShader={name:e.type,uniforms:e.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader};e.__webglShader=n.__webglShader,o=rt.acquireProgram(e,i,a),n.program=o,e.program=o}var h=o.getAttributes();if(e.morphTargets){e.numSupportedMorphTargets=0;for(var u=0;u<ve.maxMorphTargets;u++)h["morphTarget"+u]>=0&&e.numSupportedMorphTargets++}if(e.morphNormals){e.numSupportedMorphNormals=0;for(var u=0;u<ve.maxMorphNormals;u++)h["morphNormal"+u]>=0&&e.numSupportedMorphNormals++}var p=n.__webglShader.uniforms;(e instanceof THREE.ShaderMaterial||e instanceof THREE.RawShaderMaterial)&&e.clipping!==!0||(n.numClippingPlanes=Ne.numPlanes,p.clippingPlanes=Ne.uniform),e.lights&&(n.lightsHash=je.hash,p.ambientLightColor.value=je.ambient,p.directionalLights.value=je.directional,p.spotLights.value=je.spot,p.pointLights.value=je.point,p.hemisphereLights.value=je.hemi,p.directionalShadowMap.value=je.directionalShadowMap,p.directionalShadowMatrix.value=je.directionalShadowMatrix,p.spotShadowMap.value=je.spotShadowMap,p.spotShadowMatrix.value=je.spotShadowMatrix,p.pointShadowMap.value=je.pointShadowMap,p.pointShadowMatrix.value=je.pointShadowMatrix);var f=n.program.getUniforms(),E=THREE.WebGLUniforms.seqWithValue(f.seq,p);n.uniformsList=E,n.dynamicUniforms=THREE.WebGLUniforms.splitDynamic(E,p)}function b(e){e.side!==THREE.DoubleSide?$e.enable(qe.CULL_FACE):$e.disable(qe.CULL_FACE),$e.setFlipSided(e.side===THREE.BackSide),e.transparent===!0?$e.setBlending(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.premultipliedAlpha):$e.setBlending(THREE.NoBlending),$e.setDepthFunc(e.depthFunc),$e.setDepthTest(e.depthTest),$e.setDepthWrite(e.depthWrite),$e.setColorWrite(e.colorWrite),$e.setPolygonOffset(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits)}function _(e,t,r,n){Se=0;var i=et.get(r);if(Fe){if(Ve||e!==be){var a=e===be&&r.id===xe;Ne.setState(r.clippingPlanes,r.clipShadows,e,i,a)}void 0!==i.numClippingPlanes&&i.numClippingPlanes!==Ne.numPlanes&&(r.needsUpdate=!0)}void 0===i.program&&(r.needsUpdate=!0),void 0!==i.lightsHash&&i.lightsHash!==je.hash&&(r.needsUpdate=!0),r.needsUpdate&&(H(r,t,n),r.needsUpdate=!1);var o=!1,s=!1,c=!1,l=i.program,h=l.getUniforms(),u=i.__webglShader.uniforms;if(l.id!==Te&&(qe.useProgram(l.program),Te=l.id,o=!0,s=!0,c=!0),r.id!==xe&&(xe=r.id,s=!0),o||e!==be){if(h.set(qe,e,"projectionMatrix"),Je.logarithmicDepthBuffer&&h.setValue(qe,"logDepthBufFC",2/(Math.log(e.far+1)/Math.LN2)),e!==be&&(be=e,s=!0,c=!0),r instanceof THREE.ShaderMaterial||r instanceof THREE.MeshPhongMaterial||r instanceof THREE.MeshStandardMaterial||r.envMap){var d=h.map.cameraPosition;void 0!==d&&d.setValue(qe,ze.setFromMatrixPosition(e.matrixWorld))}(r instanceof THREE.MeshPhongMaterial||r instanceof THREE.MeshLambertMaterial||r instanceof THREE.MeshBasicMaterial||r instanceof THREE.MeshStandardMaterial||r instanceof THREE.ShaderMaterial||r.skinning)&&h.setValue(qe,"viewMatrix",e.matrixWorldInverse),h.set(qe,ve,"toneMappingExposure"),h.set(qe,ve,"toneMappingWhitePoint")}if(r.skinning){h.setOptional(qe,n,"bindMatrix"),h.setOptional(qe,n,"bindMatrixInverse");var p=n.skeleton;p&&(Je.floatVertexTextures&&p.useVertexTexture?(h.set(qe,p,"boneTexture"),h.set(qe,p,"boneTextureWidth"),h.set(qe,p,"boneTextureHeight")):h.setOptional(qe,p,"boneMatrices"))}s&&(r.lights&&D(u,c),t&&r.fog&&L(u,t),(r instanceof THREE.MeshBasicMaterial||r instanceof THREE.MeshLambertMaterial||r instanceof THREE.MeshPhongMaterial||r instanceof THREE.MeshStandardMaterial||r instanceof THREE.MeshDepthMaterial)&&M(u,r),r instanceof THREE.LineBasicMaterial?w(u,r):r instanceof THREE.LineDashedMaterial?(w(u,r),S(u,r)):r instanceof THREE.PointsMaterial?A(u,r):r instanceof THREE.MeshLambertMaterial?C(u,r):r instanceof THREE.MeshPhongMaterial?P(u,r):r instanceof THREE.MeshPhysicalMaterial?B(u,r):r instanceof THREE.MeshStandardMaterial?I(u,r):r instanceof THREE.MeshDepthMaterial?r.displacementMap&&(u.displacementMap.value=r.displacementMap,u.displacementScale.value=r.displacementScale,u.displacementBias.value=r.displacementBias):r instanceof THREE.MeshNormalMaterial&&(u.opacity.value=r.opacity),THREE.WebGLUniforms.upload(qe,i.uniformsList,u,ve)),h.set(qe,n,"modelViewMatrix"),h.set(qe,n,"normalMatrix"),h.setValue(qe,"modelMatrix",n.matrixWorld);var f=i.dynamicUniforms;return null!==f&&(THREE.WebGLUniforms.evalDynamic(f,u,n,e),THREE.WebGLUniforms.upload(qe,f,u,ve)),l}function M(e,t){e.opacity.value=t.opacity,e.diffuse.value=t.color,t.emissive&&e.emissive.value.copy(t.emissive).multiplyScalar(t.emissiveIntensity),e.map.value=t.map,e.specularMap.value=t.specularMap,e.alphaMap.value=t.alphaMap,t.aoMap&&(e.aoMap.value=t.aoMap,e.aoMapIntensity.value=t.aoMapIntensity);var r;if(t.map?r=t.map:t.specularMap?r=t.specularMap:t.displacementMap?r=t.displacementMap:t.normalMap?r=t.normalMap:t.bumpMap?r=t.bumpMap:t.roughnessMap?r=t.roughnessMap:t.metalnessMap?r=t.metalnessMap:t.alphaMap?r=t.alphaMap:t.emissiveMap&&(r=t.emissiveMap),void 0!==r){r instanceof THREE.WebGLRenderTarget&&(r=r.texture);var n=r.offset,i=r.repeat;e.offsetRepeat.value.set(n.x,n.y,i.x,i.y)}e.envMap.value=t.envMap,e.flipEnvMap.value=t.envMap instanceof THREE.CubeTexture?-1:1,e.reflectivity.value=t.reflectivity,e.refractionRatio.value=t.refractionRatio}function w(e,t){e.diffuse.value=t.color,e.opacity.value=t.opacity}function S(e,t){e.dashSize.value=t.dashSize,e.totalSize.value=t.dashSize+t.gapSize,e.scale.value=t.scale}function A(e,t){if(e.diffuse.value=t.color,e.opacity.value=t.opacity,e.size.value=t.size*Ie,e.scale.value=.5*re.clientHeight,e.map.value=t.map,null!==t.map){var r=t.map.offset,n=t.map.repeat;e.offsetRepeat.value.set(r.x,r.y,n.x,n.y)}}function L(e,t){e.fogColor.value=t.color,t instanceof THREE.Fog?(e.fogNear.value=t.near,e.fogFar.value=t.far):t instanceof THREE.FogExp2&&(e.fogDensity.value=t.density)}function C(e,t){t.lightMap&&(e.lightMap.value=t.lightMap,e.lightMapIntensity.value=t.lightMapIntensity),t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap)}function P(e,t){e.specular.value=t.specular,e.shininess.value=Math.max(t.shininess,1e-4),t.lightMap&&(e.lightMap.value=t.lightMap,e.lightMapIntensity.value=t.lightMapIntensity),t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap),t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale),t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale)),t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}function I(e,t){e.roughness.value=t.roughness,e.metalness.value=t.metalness,t.roughnessMap&&(e.roughnessMap.value=t.roughnessMap),t.metalnessMap&&(e.metalnessMap.value=t.metalnessMap),t.lightMap&&(e.lightMap.value=t.lightMap,e.lightMapIntensity.value=t.lightMapIntensity),t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap),t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale),t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale)),t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias),t.envMap&&(e.envMapIntensity.value=t.envMapIntensity)}function B(e,t){I(e,t)}function D(e,t){e.ambientLightColor.needsUpdate=t,e.directionalLights.needsUpdate=t,e.pointLights.needsUpdate=t,e.spotLights.needsUpdate=t,e.hemisphereLights.needsUpdate=t}function O(e){for(var t=0,r=0,n=e.length;n>r;r++){var i=e[r];i.castShadow&&(je.shadows[t++]=i)}je.shadows.length=t}function U(e,t){var r,n,i,a,o,s,c,l=0,h=0,u=0,d=t.matrixWorldInverse,p=0,f=0,E=0,m=0;for(r=0,n=e.length;n>r;r++)if(i=e[r],a=i.color,o=i.intensity,s=i.distance,c=i.shadow&&i.shadow.map?i.shadow.map.texture:null,i instanceof THREE.AmbientLight)l+=a.r*o,h+=a.g*o,u+=a.b*o;else if(i instanceof THREE.DirectionalLight){var g=nt.get(i);g.color.copy(i.color).multiplyScalar(i.intensity),g.direction.setFromMatrixPosition(i.matrixWorld),ze.setFromMatrixPosition(i.target.matrixWorld),g.direction.sub(ze),g.direction.transformDirection(d),g.shadow=i.castShadow,i.castShadow&&(g.shadowBias=i.shadow.bias,g.shadowRadius=i.shadow.radius,g.shadowMapSize=i.shadow.mapSize),je.directionalShadowMap[p]=c,je.directionalShadowMatrix[p]=i.shadow.matrix,je.directional[p++]=g}else if(i instanceof THREE.SpotLight){var g=nt.get(i);g.position.setFromMatrixPosition(i.matrixWorld),g.position.applyMatrix4(d),g.color.copy(a).multiplyScalar(o),g.distance=s,g.direction.setFromMatrixPosition(i.matrixWorld),ze.setFromMatrixPosition(i.target.matrixWorld),g.direction.sub(ze),g.direction.transformDirection(d),g.coneCos=Math.cos(i.angle),g.penumbraCos=Math.cos(i.angle*(1-i.penumbra)),g.decay=0===i.distance?0:i.decay,g.shadow=i.castShadow,i.castShadow&&(g.shadowBias=i.shadow.bias,g.shadowRadius=i.shadow.radius,g.shadowMapSize=i.shadow.mapSize),je.spotShadowMap[E]=c,je.spotShadowMatrix[E]=i.shadow.matrix,je.spot[E++]=g}else if(i instanceof THREE.PointLight){var g=nt.get(i);g.position.setFromMatrixPosition(i.matrixWorld),g.position.applyMatrix4(d),g.color.copy(i.color).multiplyScalar(i.intensity),g.distance=i.distance,g.decay=0===i.distance?0:i.decay,g.shadow=i.castShadow,i.castShadow&&(g.shadowBias=i.shadow.bias,g.shadowRadius=i.shadow.radius,g.shadowMapSize=i.shadow.mapSize),je.pointShadowMap[f]=c,void 0===je.pointShadowMatrix[f]&&(je.pointShadowMatrix[f]=new THREE.Matrix4),ze.setFromMatrixPosition(i.matrixWorld).negate(),je.pointShadowMatrix[f].identity().setPosition(ze),je.point[f++]=g}else if(i instanceof THREE.HemisphereLight){var g=nt.get(i);g.direction.setFromMatrixPosition(i.matrixWorld),g.direction.transformDirection(d),g.direction.normalize(),g.skyColor.copy(i.color).multiplyScalar(o),g.groundColor.copy(i.groundColor).multiplyScalar(o),je.hemi[m++]=g}je.ambient[0]=l,je.ambient[1]=h,je.ambient[2]=u,je.directional.length=p,je.spot.length=E,je.point.length=f,je.hemi.length=m,je.hash=p+","+f+","+E+","+m+","+je.shadows.length}function N(){var e=Se;return e>=Je.maxTextures&&console.warn("WebGLRenderer: trying to use "+e+" texture units while this GPU supports only "+Je.maxTextures),Se+=1,e}function F(e,t,r){var n;if(r?(qe.texParameteri(e,qe.TEXTURE_WRAP_S,te(t.wrapS)),qe.texParameteri(e,qe.TEXTURE_WRAP_T,te(t.wrapT)),qe.texParameteri(e,qe.TEXTURE_MAG_FILTER,te(t.magFilter)),qe.texParameteri(e,qe.TEXTURE_MIN_FILTER,te(t.minFilter))):(qe.texParameteri(e,qe.TEXTURE_WRAP_S,qe.CLAMP_TO_EDGE),qe.texParameteri(e,qe.TEXTURE_WRAP_T,qe.CLAMP_TO_EDGE),t.wrapS===THREE.ClampToEdgeWrapping&&t.wrapT===THREE.ClampToEdgeWrapping||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.",t),qe.texParameteri(e,qe.TEXTURE_MAG_FILTER,ee(t.magFilter)),qe.texParameteri(e,qe.TEXTURE_MIN_FILTER,ee(t.minFilter)),t.minFilter!==THREE.NearestFilter&&t.minFilter!==THREE.LinearFilter&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.",t)),n=Qe.get("EXT_texture_filter_anisotropic")){if(t.type===THREE.FloatType&&null===Qe.get("OES_texture_float_linear"))return;if(t.type===THREE.HalfFloatType&&null===Qe.get("OES_texture_half_float_linear"))return;(t.anisotropy>1||et.get(t).__currentAnisotropy)&&(qe.texParameterf(e,n.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(t.anisotropy,ve.getMaxAnisotropy())),et.get(t).__currentAnisotropy=t.anisotropy)}}function V(e,t,r){void 0===e.__webglInit&&(e.__webglInit=!0,t.addEventListener("dispose",o),e.__webglTexture=qe.createTexture(),We.textures++),$e.activeTexture(qe.TEXTURE0+r),$e.bindTexture(qe.TEXTURE_2D,e.__webglTexture),qe.pixelStorei(qe.UNPACK_FLIP_Y_WEBGL,t.flipY),qe.pixelStorei(qe.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),qe.pixelStorei(qe.UNPACK_ALIGNMENT,t.unpackAlignment);var n=k(t.image,Je.maxTextureSize);j(t)&&z(n)===!1&&(n=W(n));var i=z(n),a=te(t.format),s=te(t.type);F(qe.TEXTURE_2D,t,i);var c,l=t.mipmaps;if(t instanceof THREE.DepthTexture){var h=qe.DEPTH_COMPONENT;if(t.type===THREE.FloatType){if(!Ke)throw new Error("Float Depth Texture only supported in WebGL2.0");h=qe.DEPTH_COMPONENT32F}else Ke&&(h=qe.DEPTH_COMPONENT16);$e.texImage2D(qe.TEXTURE_2D,0,h,n.width,n.height,0,a,s,null)}else if(t instanceof THREE.DataTexture)if(l.length>0&&i){for(var u=0,d=l.length;d>u;u++)c=l[u],$e.texImage2D(qe.TEXTURE_2D,u,a,c.width,c.height,0,a,s,c.data);t.generateMipmaps=!1}else $e.texImage2D(qe.TEXTURE_2D,0,a,n.width,n.height,0,a,s,n.data);else if(t instanceof THREE.CompressedTexture)for(var u=0,d=l.length;d>u;u++)c=l[u],t.format!==THREE.RGBAFormat&&t.format!==THREE.RGBFormat?$e.getCompressedTextureFormats().indexOf(a)>-1?$e.compressedTexImage2D(qe.TEXTURE_2D,u,a,c.width,c.height,0,c.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):$e.texImage2D(qe.TEXTURE_2D,u,a,c.width,c.height,0,a,s,c.data);else if(l.length>0&&i){for(var u=0,d=l.length;d>u;u++)c=l[u],$e.texImage2D(qe.TEXTURE_2D,u,a,a,s,c);t.generateMipmaps=!1}else $e.texImage2D(qe.TEXTURE_2D,0,a,a,s,n);t.generateMipmaps&&i&&qe.generateMipmap(qe.TEXTURE_2D),e.__version=t.version,t.onUpdate&&t.onUpdate(t)}function G(e,t){var r=et.get(e);if(e.version>0&&r.__version!==e.version){var n=e.image;return void 0===n?void console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined",e):n.complete===!1?void console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete",e):void V(r,e,t)}$e.activeTexture(qe.TEXTURE0+t),$e.bindTexture(qe.TEXTURE_2D,r.__webglTexture)}function k(e,t){if(e.width>t||e.height>t){var r=t/Math.max(e.width,e.height),n=document.createElement("canvas");n.width=Math.floor(e.width*r),n.height=Math.floor(e.height*r);var i=n.getContext("2d");return i.drawImage(e,0,0,e.width,e.height,0,0,n.width,n.height),console.warn("THREE.WebGLRenderer: image is too big ("+e.width+"x"+e.height+"). Resized to "+n.width+"x"+n.height,e),n}return e}function z(e){return THREE.Math.isPowerOfTwo(e.width)&&THREE.Math.isPowerOfTwo(e.height)}function j(e){return e.wrapS!==THREE.ClampToEdgeWrapping||e.wrapT!==THREE.ClampToEdgeWrapping?!0:e.minFilter!==THREE.NearestFilter&&e.minFilter!==THREE.LinearFilter}function W(e){if(e instanceof HTMLImageElement||e instanceof HTMLCanvasElement){var t=document.createElement("canvas");t.width=THREE.Math.nearestPowerOfTwo(e.width),t.height=THREE.Math.nearestPowerOfTwo(e.height);var r=t.getContext("2d");return r.drawImage(e,0,0,t.width,t.height),console.warn("THREE.WebGLRenderer: image is not power of two ("+e.width+"x"+e.height+"). Resized to "+t.width+"x"+t.height,e),t}return e}function X(e,t){var r=et.get(e);if(6===e.image.length)if(e.version>0&&r.__version!==e.version){r.__image__webglTextureCube||(e.addEventListener("dispose",o),r.__image__webglTextureCube=qe.createTexture(),We.textures++),$e.activeTexture(qe.TEXTURE0+t),$e.bindTexture(qe.TEXTURE_CUBE_MAP,r.__image__webglTextureCube),qe.pixelStorei(qe.UNPACK_FLIP_Y_WEBGL,e.flipY);for(var n=e instanceof THREE.CompressedTexture,i=e.image[0]instanceof THREE.DataTexture,a=[],s=0;6>s;s++)!ve.autoScaleCubemaps||n||i?a[s]=i?e.image[s].image:e.image[s]:a[s]=k(e.image[s],Je.maxCubemapSize);var c=a[0],l=z(c),h=te(e.format),u=te(e.type);F(qe.TEXTURE_CUBE_MAP,e,l);for(var s=0;6>s;s++)if(n)for(var d,p=a[s].mipmaps,f=0,E=p.length;E>f;f++)d=p[f],e.format!==THREE.RGBAFormat&&e.format!==THREE.RGBFormat?$e.getCompressedTextureFormats().indexOf(h)>-1?$e.compressedTexImage2D(qe.TEXTURE_CUBE_MAP_POSITIVE_X+s,f,h,d.width,d.height,0,d.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):$e.texImage2D(qe.TEXTURE_CUBE_MAP_POSITIVE_X+s,f,h,d.width,d.height,0,h,u,d.data);else i?$e.texImage2D(qe.TEXTURE_CUBE_MAP_POSITIVE_X+s,0,h,a[s].width,a[s].height,0,h,u,a[s].data):$e.texImage2D(qe.TEXTURE_CUBE_MAP_POSITIVE_X+s,0,h,h,u,a[s]);e.generateMipmaps&&l&&qe.generateMipmap(qe.TEXTURE_CUBE_MAP),r.__version=e.version,e.onUpdate&&e.onUpdate(e)}else $e.activeTexture(qe.TEXTURE0+t),$e.bindTexture(qe.TEXTURE_CUBE_MAP,r.__image__webglTextureCube)}function q(e,t){$e.activeTexture(qe.TEXTURE0+t),$e.bindTexture(qe.TEXTURE_CUBE_MAP,et.get(e).__webglTexture)}function Y(e,t,r,n){var i=te(t.texture.format),a=te(t.texture.type);$e.texImage2D(n,0,i,t.width,t.height,0,i,a,null),qe.bindFramebuffer(qe.FRAMEBUFFER,e),qe.framebufferTexture2D(qe.FRAMEBUFFER,r,n,et.get(t.texture).__webglTexture,0),qe.bindFramebuffer(qe.FRAMEBUFFER,null)}function Z(e,t){qe.bindRenderbuffer(qe.RENDERBUFFER,e),t.depthBuffer&&!t.stencilBuffer?(qe.renderbufferStorage(qe.RENDERBUFFER,qe.DEPTH_COMPONENT16,t.width,t.height),qe.framebufferRenderbuffer(qe.FRAMEBUFFER,qe.DEPTH_ATTACHMENT,qe.RENDERBUFFER,e)):t.depthBuffer&&t.stencilBuffer?(qe.renderbufferStorage(qe.RENDERBUFFER,qe.DEPTH_STENCIL,t.width,t.height),qe.framebufferRenderbuffer(qe.FRAMEBUFFER,qe.DEPTH_STENCIL_ATTACHMENT,qe.RENDERBUFFER,e)):qe.renderbufferStorage(qe.RENDERBUFFER,qe.RGBA4,t.width,t.height),qe.bindRenderbuffer(qe.RENDERBUFFER,null)}function K(e,t){var r=t instanceof THREE.WebGLRenderTargetCube;if(r)throw new Error("Depth Texture with cube render targets is not supported!");if(qe.bindFramebuffer(qe.FRAMEBUFFER,e),!(t.depthTexture instanceof THREE.DepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");et.get(t.depthTexture).__webglTexture&&t.depthTexture.image.width===t.width&&t.depthTexture.image.height===t.height||(t.depthTexture.image.width=t.width,t.depthTexture.image.height=t.height,t.depthTexture.needsUpdate=!0),ve.setTexture2D(t.depthTexture,0);var n=et.get(t.depthTexture).__webglTexture;qe.framebufferTexture2D(qe.FRAMEBUFFER,qe.DEPTH_ATTACHMENT,qe.TEXTURE_2D,n,0)}function Q(e){var t=et.get(e),r=e instanceof THREE.WebGLRenderTargetCube;if(e.depthTexture){if(r)throw new Error("target.depthTexture not supported in Cube render targets");K(t.__webglFramebuffer,e)}else if(r){t.__webglDepthbuffer=[];for(var n=0;6>n;n++)qe.bindFramebuffer(qe.FRAMEBUFFER,t.__webglFramebuffer[n]),t.__webglDepthbuffer[n]=qe.createRenderbuffer(),Z(t.__webglDepthbuffer[n],e)}else qe.bindFramebuffer(qe.FRAMEBUFFER,t.__webglFramebuffer),t.__webglDepthbuffer=qe.createRenderbuffer(),Z(t.__webglDepthbuffer,e);qe.bindFramebuffer(qe.FRAMEBUFFER,null)}function J(e){var t=et.get(e),r=et.get(e.texture);e.addEventListener("dispose",s),r.__webglTexture=qe.createTexture(),We.textures++;var n=e instanceof THREE.WebGLRenderTargetCube,i=THREE.Math.isPowerOfTwo(e.width)&&THREE.Math.isPowerOfTwo(e.height);if(n){t.__webglFramebuffer=[];for(var a=0;6>a;a++)t.__webglFramebuffer[a]=qe.createFramebuffer()}else t.__webglFramebuffer=qe.createFramebuffer();if(n){$e.bindTexture(qe.TEXTURE_CUBE_MAP,r.__webglTexture),F(qe.TEXTURE_CUBE_MAP,e.texture,i);for(var a=0;6>a;a++)Y(t.__webglFramebuffer[a],e,qe.COLOR_ATTACHMENT0,qe.TEXTURE_CUBE_MAP_POSITIVE_X+a);e.texture.generateMipmaps&&i&&qe.generateMipmap(qe.TEXTURE_CUBE_MAP),$e.bindTexture(qe.TEXTURE_CUBE_MAP,null)}else $e.bindTexture(qe.TEXTURE_2D,r.__webglTexture),F(qe.TEXTURE_2D,e.texture,i),Y(t.__webglFramebuffer,e,qe.COLOR_ATTACHMENT0,qe.TEXTURE_2D),e.texture.generateMipmaps&&i&&qe.generateMipmap(qe.TEXTURE_2D),$e.bindTexture(qe.TEXTURE_2D,null);e.depthBuffer&&Q(e)}function $(e){var t=e instanceof THREE.WebGLRenderTargetCube?qe.TEXTURE_CUBE_MAP:qe.TEXTURE_2D,r=et.get(e.texture).__webglTexture;$e.bindTexture(t,r),qe.generateMipmap(t),$e.bindTexture(t,null)}function ee(e){return e===THREE.NearestFilter||e===THREE.NearestMipMapNearestFilter||e===THREE.NearestMipMapLinearFilter?qe.NEAREST:qe.LINEAR}function te(e){var t;if(e===THREE.RepeatWrapping)return qe.REPEAT;if(e===THREE.ClampToEdgeWrapping)return qe.CLAMP_TO_EDGE;if(e===THREE.MirroredRepeatWrapping)return qe.MIRRORED_REPEAT;if(e===THREE.NearestFilter)return qe.NEAREST;if(e===THREE.NearestMipMapNearestFilter)return qe.NEAREST_MIPMAP_NEAREST;if(e===THREE.NearestMipMapLinearFilter)return qe.NEAREST_MIPMAP_LINEAR;if(e===THREE.LinearFilter)return qe.LINEAR;if(e===THREE.LinearMipMapNearestFilter)return qe.LINEAR_MIPMAP_NEAREST;if(e===THREE.LinearMipMapLinearFilter)return qe.LINEAR_MIPMAP_LINEAR;if(e===THREE.UnsignedByteType)return qe.UNSIGNED_BYTE;if(e===THREE.UnsignedShort4444Type)return qe.UNSIGNED_SHORT_4_4_4_4;if(e===THREE.UnsignedShort5551Type)return qe.UNSIGNED_SHORT_5_5_5_1;if(e===THREE.UnsignedShort565Type)return qe.UNSIGNED_SHORT_5_6_5;if(e===THREE.ByteType)return qe.BYTE;if(e===THREE.ShortType)return qe.SHORT;if(e===THREE.UnsignedShortType)return qe.UNSIGNED_SHORT;if(e===THREE.IntType)return qe.INT;if(e===THREE.UnsignedIntType)return qe.UNSIGNED_INT;if(e===THREE.FloatType)return qe.FLOAT;if(t=Qe.get("OES_texture_half_float"),null!==t&&e===THREE.HalfFloatType)return t.HALF_FLOAT_OES;if(e===THREE.AlphaFormat)return qe.ALPHA;if(e===THREE.RGBFormat)return qe.RGB;if(e===THREE.RGBAFormat)return qe.RGBA;if(e===THREE.LuminanceFormat)return qe.LUMINANCE;if(e===THREE.LuminanceAlphaFormat)return qe.LUMINANCE_ALPHA;if(e===THREE.DepthFormat)return qe.DEPTH_COMPONENT;if(e===THREE.AddEquation)return qe.FUNC_ADD;if(e===THREE.SubtractEquation)return qe.FUNC_SUBTRACT;if(e===THREE.ReverseSubtractEquation)return qe.FUNC_REVERSE_SUBTRACT;if(e===THREE.ZeroFactor)return qe.ZERO;if(e===THREE.OneFactor)return qe.ONE;if(e===THREE.SrcColorFactor)return qe.SRC_COLOR;if(e===THREE.OneMinusSrcColorFactor)return qe.ONE_MINUS_SRC_COLOR;if(e===THREE.SrcAlphaFactor)return qe.SRC_ALPHA;if(e===THREE.OneMinusSrcAlphaFactor)return qe.ONE_MINUS_SRC_ALPHA;if(e===THREE.DstAlphaFactor)return qe.DST_ALPHA;if(e===THREE.OneMinusDstAlphaFactor)return qe.ONE_MINUS_DST_ALPHA;if(e===THREE.DstColorFactor)return qe.DST_COLOR;if(e===THREE.OneMinusDstColorFactor)return qe.ONE_MINUS_DST_COLOR;if(e===THREE.SrcAlphaSaturateFactor)return qe.SRC_ALPHA_SATURATE;if(t=Qe.get("WEBGL_compressed_texture_s3tc"),null!==t){if(e===THREE.RGB_S3TC_DXT1_Format)return t.COMPRESSED_RGB_S3TC_DXT1_EXT;if(e===THREE.RGBA_S3TC_DXT1_Format)return t.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(e===THREE.RGBA_S3TC_DXT3_Format)return t.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(e===THREE.RGBA_S3TC_DXT5_Format)return t.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(t=Qe.get("WEBGL_compressed_texture_pvrtc"),null!==t){if(e===THREE.RGB_PVRTC_4BPPV1_Format)return t.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(e===THREE.RGB_PVRTC_2BPPV1_Format)return t.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(e===THREE.RGBA_PVRTC_4BPPV1_Format)return t.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(e===THREE.RGBA_PVRTC_2BPPV1_Format)return t.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(t=Qe.get("WEBGL_compressed_texture_etc1"),null!==t&&e===THREE.RGB_ETC1_Format)return t.COMPRESSED_RGB_ETC1_WEBGL;if(t=Qe.get("EXT_blend_minmax"),null!==t){if(e===THREE.MinEquation)return t.MIN_EXT;if(e===THREE.MaxEquation)return t.MAX_EXT}return 0}console.log("THREE.WebGLRenderer",THREE.REVISION),e=e||{};var re=void 0!==e.canvas?e.canvas:document.createElement("canvas"),ne=void 0!==e.context?e.context:null,ie=void 0!==e.alpha?e.alpha:!1,ae=void 0!==e.depth?e.depth:!0,oe=void 0!==e.stencil?e.stencil:!0,se=void 0!==e.antialias?e.antialias:!1,ce=void 0!==e.premultipliedAlpha?e.premultipliedAlpha:!0,le=void 0!==e.preserveDrawingBuffer?e.preserveDrawingBuffer:!1,he=[],ue=[],de=-1,pe=[],fe=-1,Ee=new Float32Array(8),me=[],ge=[];this.domElement=re,this.context=null,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.gammaInput=!1,this.gammaOutput=!1,this.physicallyCorrectLights=!1,this.toneMapping=THREE.LinearToneMapping,this.toneMappingExposure=1,this.toneMappingWhitePoint=1,this.maxMorphTargets=8,this.maxMorphNormals=4,this.autoScaleCubemaps=!0;var ve=this,Te=null,ye=null,Re=null,xe=-1,He="",be=null,_e=new THREE.Vector4,Me=null,we=new THREE.Vector4,Se=0,Ae=new THREE.Color(0),Le=0,Ce=re.width,Pe=re.height,Ie=1,Be=new THREE.Vector4(0,0,Ce,Pe),De=!1,Oe=new THREE.Vector4(0,0,Ce,Pe),Ue=new THREE.Frustum,Ne=new THREE.WebGLClipping,Fe=!1,Ve=!1,Ge=new THREE.Sphere,ke=new THREE.Matrix4,ze=new THREE.Vector3,je={hash:"",ambient:[0,0,0],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],spotShadowMatrix:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],shadows:[]},We={geometries:0,textures:0},Xe={calls:0,vertices:0,faces:0,points:0};this.info={render:Xe,memory:We,programs:null};var qe;try{var Ye={alpha:ie,depth:ae,stencil:oe,antialias:se,premultipliedAlpha:ce,preserveDrawingBuffer:le};if(qe=ne||re.getContext("webgl",Ye)||re.getContext("experimental-webgl",Ye),null===qe)throw null!==re.getContext("webgl")?"Error creating WebGL context with your selected attributes.":"Error creating WebGL context.";void 0===qe.getShaderPrecisionFormat&&(qe.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}}),re.addEventListener("webglcontextlost",a,!1)}catch(Ze){console.error("THREE.WebGLRenderer: "+Ze)}var Ke="undefined"!=typeof WebGL2RenderingContext&&qe instanceof WebGL2RenderingContext,Qe=new THREE.WebGLExtensions(qe);Qe.get("WEBGL_depth_texture"),Qe.get("OES_texture_float"),Qe.get("OES_texture_float_linear"),
Qe.get("OES_texture_half_float"),Qe.get("OES_texture_half_float_linear"),Qe.get("OES_standard_derivatives"),Qe.get("ANGLE_instanced_arrays"),Qe.get("OES_element_index_uint")&&(THREE.BufferGeometry.MaxIndex=4294967296);var Je=new THREE.WebGLCapabilities(qe,Qe,e),$e=new THREE.WebGLState(qe,Qe,te),et=new THREE.WebGLProperties,tt=new THREE.WebGLObjects(qe,et,this.info),rt=new THREE.WebGLPrograms(this,Je),nt=new THREE.WebGLLights;this.info.programs=rt.programs;var it=new THREE.WebGLBufferRenderer(qe,Qe,Xe),at=new THREE.WebGLIndexedBufferRenderer(qe,Qe,Xe);n(),this.context=qe,this.capabilities=Je,this.extensions=Qe,this.properties=et,this.state=$e;var ot=new THREE.WebGLShadowMap(this,je,tt);this.shadowMap=ot;var st=new THREE.SpritePlugin(this,me),ct=new THREE.LensFlarePlugin(this,ge);this.getContext=function(){return qe},this.getContextAttributes=function(){return qe.getContextAttributes()},this.forceContextLoss=function(){Qe.get("WEBGL_lose_context").loseContext()},this.getMaxAnisotropy=function(){var e;return function(){if(void 0!==e)return e;var t=Qe.get("EXT_texture_filter_anisotropic");return e=null!==t?qe.getParameter(t.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}}(),this.getPrecision=function(){return Je.precision},this.getPixelRatio=function(){return Ie},this.setPixelRatio=function(e){void 0!==e&&(Ie=e,this.setSize(Oe.z,Oe.w,!1))},this.getSize=function(){return{width:Ce,height:Pe}},this.setSize=function(e,t,r){Ce=e,Pe=t,re.width=e*Ie,re.height=t*Ie,r!==!1&&(re.style.width=e+"px",re.style.height=t+"px"),this.setViewport(0,0,e,t)},this.setViewport=function(e,t,r,n){$e.viewport(Oe.set(e,t,r,n))},this.setScissor=function(e,t,r,n){$e.scissor(Be.set(e,t,r,n))},this.setScissorTest=function(e){$e.setScissorTest(De=e)},this.getClearColor=function(){return Ae},this.setClearColor=function(e,t){Ae.set(e),Le=void 0!==t?t:1,r(Ae.r,Ae.g,Ae.b,Le)},this.getClearAlpha=function(){return Le},this.setClearAlpha=function(e){Le=e,r(Ae.r,Ae.g,Ae.b,Le)},this.clear=function(e,t,r){var n=0;(void 0===e||e)&&(n|=qe.COLOR_BUFFER_BIT),(void 0===t||t)&&(n|=qe.DEPTH_BUFFER_BIT),(void 0===r||r)&&(n|=qe.STENCIL_BUFFER_BIT),qe.clear(n)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.clearTarget=function(e,t,r,n){this.setRenderTarget(e),this.clear(t,r,n)},this.resetGLState=i,this.dispose=function(){re.removeEventListener("webglcontextlost",a,!1)},this.renderBufferImmediate=function(e,t,r){$e.initAttributes();var n=et.get(e);e.hasPositions&&!n.position&&(n.position=qe.createBuffer()),e.hasNormals&&!n.normal&&(n.normal=qe.createBuffer()),e.hasUvs&&!n.uv&&(n.uv=qe.createBuffer()),e.hasColors&&!n.color&&(n.color=qe.createBuffer());var i=t.getAttributes();if(e.hasPositions&&(qe.bindBuffer(qe.ARRAY_BUFFER,n.position),qe.bufferData(qe.ARRAY_BUFFER,e.positionArray,qe.DYNAMIC_DRAW),$e.enableAttribute(i.position),qe.vertexAttribPointer(i.position,3,qe.FLOAT,!1,0,0)),e.hasNormals){if(qe.bindBuffer(qe.ARRAY_BUFFER,n.normal),"MeshPhongMaterial"!==r.type&&"MeshStandardMaterial"!==r.type&&"MeshPhysicalMaterial"!==r.type&&r.shading===THREE.FlatShading)for(var a=0,o=3*e.count;o>a;a+=9){var s=e.normalArray,c=(s[a+0]+s[a+3]+s[a+6])/3,l=(s[a+1]+s[a+4]+s[a+7])/3,h=(s[a+2]+s[a+5]+s[a+8])/3;s[a+0]=c,s[a+1]=l,s[a+2]=h,s[a+3]=c,s[a+4]=l,s[a+5]=h,s[a+6]=c,s[a+7]=l,s[a+8]=h}qe.bufferData(qe.ARRAY_BUFFER,e.normalArray,qe.DYNAMIC_DRAW),$e.enableAttribute(i.normal),qe.vertexAttribPointer(i.normal,3,qe.FLOAT,!1,0,0)}e.hasUvs&&r.map&&(qe.bindBuffer(qe.ARRAY_BUFFER,n.uv),qe.bufferData(qe.ARRAY_BUFFER,e.uvArray,qe.DYNAMIC_DRAW),$e.enableAttribute(i.uv),qe.vertexAttribPointer(i.uv,2,qe.FLOAT,!1,0,0)),e.hasColors&&r.vertexColors!==THREE.NoColors&&(qe.bindBuffer(qe.ARRAY_BUFFER,n.color),qe.bufferData(qe.ARRAY_BUFFER,e.colorArray,qe.DYNAMIC_DRAW),$e.enableAttribute(i.color),qe.vertexAttribPointer(i.color,3,qe.FLOAT,!1,0,0)),$e.disableUnusedAttributes(),qe.drawArrays(qe.TRIANGLES,0,e.count),e.count=0},this.renderBufferDirect=function(e,r,n,i,a,o){b(i);var s=_(e,r,i,a),c=!1,l=n.id+"_"+s.id+"_"+i.wireframe;l!==He&&(He=l,c=!0);var h=a.morphTargetInfluences;if(void 0!==h){for(var u=[],d=0,E=h.length;E>d;d++){var m=h[d];u.push([m,d])}u.sort(f),u.length>8&&(u.length=8);for(var g=n.morphAttributes,d=0,E=u.length;E>d;d++){var m=u[d];if(Ee[d]=m[0],0!==m[0]){var v=m[1];i.morphTargets===!0&&g.position&&n.addAttribute("morphTarget"+d,g.position[v]),i.morphNormals===!0&&g.normal&&n.addAttribute("morphNormal"+d,g.normal[v])}else i.morphTargets===!0&&n.removeAttribute("morphTarget"+d),i.morphNormals===!0&&n.removeAttribute("morphNormal"+d)}s.getUniforms().setValue(qe,"morphTargetInfluences",Ee),c=!0}var v=n.index,T=n.attributes.position;i.wireframe===!0&&(v=tt.getWireframeAttribute(n));var y;null!==v?(y=at,y.setIndex(v)):y=it,c&&(p(i,s,n),null!==v&&qe.bindBuffer(qe.ELEMENT_ARRAY_BUFFER,tt.getAttributeBuffer(v)));var R=0,x=1/0;null!==v?x=v.count:void 0!==T&&(x=T.count);var H=n.drawRange.start,M=n.drawRange.count,w=null!==o?o.start:0,S=null!==o?o.count:1/0,A=Math.max(R,H,w),L=Math.min(R+x,H+M,w+S)-1,C=Math.max(0,L-A+1);if(a instanceof THREE.Mesh)if(i.wireframe===!0)$e.setLineWidth(i.wireframeLinewidth*t()),y.setMode(qe.LINES);else switch(a.drawMode){case THREE.TrianglesDrawMode:y.setMode(qe.TRIANGLES);break;case THREE.TriangleStripDrawMode:y.setMode(qe.TRIANGLE_STRIP);break;case THREE.TriangleFanDrawMode:y.setMode(qe.TRIANGLE_FAN)}else if(a instanceof THREE.Line){var P=i.linewidth;void 0===P&&(P=1),$e.setLineWidth(P*t()),a instanceof THREE.LineSegments?y.setMode(qe.LINES):y.setMode(qe.LINE_STRIP)}else a instanceof THREE.Points&&y.setMode(qe.POINTS);n instanceof THREE.InstancedBufferGeometry?n.maxInstancedCount>0&&y.renderInstances(n,A,C):y.render(A,C)},this.render=function(e,t,r,n){if(t instanceof THREE.Camera==!1)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");var i=e.fog;if(He="",xe=-1,be=null,e.autoUpdate===!0&&e.updateMatrixWorld(),null===t.parent&&t.updateMatrixWorld(),t.matrixWorldInverse.getInverse(t.matrixWorld),ke.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),Ue.setFromMatrix(ke),he.length=0,de=-1,fe=-1,me.length=0,ge.length=0,Ve=this.localClippingEnabled,Fe=Ne.init(this.clippingPlanes,Ve,t),R(e,t),ue.length=de+1,pe.length=fe+1,ve.sortObjects===!0&&(ue.sort(E),pe.sort(m)),Fe&&Ne.beginShadows(),O(he),ot.render(e,t),U(he,t),Fe&&Ne.endShadows(),Xe.calls=0,Xe.vertices=0,Xe.faces=0,Xe.points=0,void 0===r&&(r=null),this.setRenderTarget(r),(this.autoClear||n)&&this.clear(this.autoClearColor,this.autoClearDepth,this.autoClearStencil),e.overrideMaterial){var a=e.overrideMaterial;x(ue,t,i,a),x(pe,t,i,a)}else $e.setBlending(THREE.NoBlending),x(ue,t,i),x(pe,t,i);if(st.render(e,t),ct.render(e,t,we),r){var o=r.texture;o.generateMipmaps&&z(r)&&o.minFilter!==THREE.NearestFilter&&o.minFilter!==THREE.LinearFilter&&$(r)}$e.setDepthTest(!0),$e.setDepthWrite(!0),$e.setColorWrite(!0)},this.setFaceCulling=function(e,t){$e.setCullFace(e),$e.setFlipSided(t===THREE.FrontFaceDirectionCW)},this.allocTextureUnit=N,this.setTexture2D=function(){var e=!1;return function(t,r){t instanceof THREE.WebGLRenderTarget&&(e||(console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead."),e=!0),t=t.texture),G(t,r)}}(),this.setTexture=function(){var e=!1;return function(t,r){e||(console.warn("THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead."),e=!0),ve.setTexture2D(t,r)}}(),this.setTextureCube=function(){var e=!1;return function(t,r){t instanceof THREE.WebGLRenderTargetCube&&(e||(console.warn("THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead."),e=!0),t=t.texture),t instanceof THREE.CubeTexture||Array.isArray(t.image)&&6===t.image.length?X(t,r):q(t,r)}}(),this.getCurrentRenderTarget=function(){return ye},this.setRenderTarget=function(e){ye=e,e&&void 0===et.get(e).__webglFramebuffer&&J(e);var t,r=e instanceof THREE.WebGLRenderTargetCube;if(e){var n=et.get(e);t=r?n.__webglFramebuffer[e.activeCubeFace]:n.__webglFramebuffer,_e.copy(e.scissor),Me=e.scissorTest,we.copy(e.viewport)}else t=null,_e.copy(Be).multiplyScalar(Ie),Me=De,we.copy(Oe).multiplyScalar(Ie);if(Re!==t&&(qe.bindFramebuffer(qe.FRAMEBUFFER,t),Re=t),$e.scissor(_e),$e.setScissorTest(Me),$e.viewport(we),r){var i=et.get(e.texture);qe.framebufferTexture2D(qe.FRAMEBUFFER,qe.COLOR_ATTACHMENT0,qe.TEXTURE_CUBE_MAP_POSITIVE_X+e.activeCubeFace,i.__webglTexture,e.activeMipMapLevel)}},this.readRenderTargetPixels=function(e,t,r,n,i,a){if(e instanceof THREE.WebGLRenderTarget==!1)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");var o=et.get(e).__webglFramebuffer;if(o){var s=!1;o!==Re&&(qe.bindFramebuffer(qe.FRAMEBUFFER,o),s=!0);try{var c=e.texture;if(c.format!==THREE.RGBAFormat&&te(c.format)!==qe.getParameter(qe.IMPLEMENTATION_COLOR_READ_FORMAT))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");if(!(c.type===THREE.UnsignedByteType||te(c.type)===qe.getParameter(qe.IMPLEMENTATION_COLOR_READ_TYPE)||c.type===THREE.FloatType&&Qe.get("WEBGL_color_buffer_float")||c.type===THREE.HalfFloatType&&Qe.get("EXT_color_buffer_half_float")))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");qe.checkFramebufferStatus(qe.FRAMEBUFFER)===qe.FRAMEBUFFER_COMPLETE?t>=0&&t<=e.width-n&&r>=0&&r<=e.height-i&&qe.readPixels(t,r,n,i,te(c.format),te(c.type),a):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{s&&qe.bindFramebuffer(qe.FRAMEBUFFER,Re)}}}},THREE.WebGLRenderTarget=function(e,t,r){this.uuid=THREE.Math.generateUUID(),this.width=e,this.height=t,this.scissor=new THREE.Vector4(0,0,e,t),this.scissorTest=!1,this.viewport=new THREE.Vector4(0,0,e,t),r=r||{},void 0===r.minFilter&&(r.minFilter=THREE.LinearFilter),this.texture=new THREE.Texture(void 0,void 0,r.wrapS,r.wrapT,r.magFilter,r.minFilter,r.format,r.type,r.anisotropy,r.encoding),this.depthBuffer=void 0!==r.depthBuffer?r.depthBuffer:!0,this.stencilBuffer=void 0!==r.stencilBuffer?r.stencilBuffer:!0,this.depthTexture=null},Object.assign(THREE.WebGLRenderTarget.prototype,THREE.EventDispatcher.prototype,{setSize:function(e,t){this.width===e&&this.height===t||(this.width=e,this.height=t,this.dispose()),this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.width=e.width,this.height=e.height,this.viewport.copy(e.viewport),this.texture=e.texture.clone(),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.depthTexture=e.depthTexture,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),THREE.WebGLRenderTargetCube=function(e,t,r){THREE.WebGLRenderTarget.call(this,e,t,r),this.activeCubeFace=0,this.activeMipMapLevel=0},THREE.WebGLRenderTargetCube.prototype=Object.create(THREE.WebGLRenderTarget.prototype),THREE.WebGLRenderTargetCube.prototype.constructor=THREE.WebGLRenderTargetCube,THREE.WebGLBufferRenderer=function(e,t,r){function n(e){o=e}function i(t,n){e.drawArrays(o,t,n),r.calls++,r.vertices+=n,o===e.TRIANGLES&&(r.faces+=n/3)}function a(n){var i=t.get("ANGLE_instanced_arrays");if(null===i)return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");var a=n.attributes.position,s=0;a instanceof THREE.InterleavedBufferAttribute?(s=a.data.count,i.drawArraysInstancedANGLE(o,0,s,n.maxInstancedCount)):(s=a.count,i.drawArraysInstancedANGLE(o,0,s,n.maxInstancedCount)),r.calls++,r.vertices+=s*n.maxInstancedCount,o===e.TRIANGLES&&(r.faces+=n.maxInstancedCount*s/3)}var o;this.setMode=n,this.render=i,this.renderInstances=a},THREE.WebGLClipping=function(){function e(){l.value!==n&&(l.value=n,l.needsUpdate=i>0),r.numPlanes=i}function t(e,t,n,i){var a=null!==e?e.length:0,o=null;if(0!==a){if(o=l.value,i!==!0||null===o){var h=n+4*a,u=t.matrixWorldInverse;c.getNormalMatrix(u),(null===o||o.length<h)&&(o=new Float32Array(h));for(var d=0,p=n;d!==a;++d,p+=4)s.copy(e[d]).applyMatrix4(u,c),s.normal.toArray(o,p),o[p+3]=s.constant}l.value=o,l.needsUpdate=!0}return r.numPlanes=a,o}var r=this,n=null,i=0,a=!1,o=!1,s=new THREE.Plane,c=new THREE.Matrix3,l={value:null,needsUpdate:!1};this.uniform=l,this.numPlanes=0,this.init=function(e,r,o){var s=0!==e.length||r||0!==i||a;return a=r,n=t(e,o,0),i=e.length,s},this.beginShadows=function(){o=!0,t(null)},this.endShadows=function(){o=!1,e()},this.setState=function(r,s,c,h,u){if(!a||null===r||0===r.length||o&&!s)o?t(null):e();else{var d=o?0:i,p=4*d,f=h.clippingState||null;l.value=f,f=t(r,c,p,u);for(var E=0;E!==p;++E)f[E]=n[E];h.clippingState=f,this.numPlanes+=d}}},THREE.WebGLIndexedBufferRenderer=function(e,t,r){function n(e){s=e}function i(r){r.array instanceof Uint32Array&&t.get("OES_element_index_uint")?(c=e.UNSIGNED_INT,l=4):(c=e.UNSIGNED_SHORT,l=2)}function a(t,n){e.drawElements(s,n,c,t*l),r.calls++,r.vertices+=n,s===e.TRIANGLES&&(r.faces+=n/3)}function o(n,i,a){var o=t.get("ANGLE_instanced_arrays");return null===o?void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays."):(o.drawElementsInstancedANGLE(s,a,c,i*l,n.maxInstancedCount),r.calls++,r.vertices+=a*n.maxInstancedCount,void(s===e.TRIANGLES&&(r.faces+=n.maxInstancedCount*a/3)))}var s,c,l;this.setMode=n,this.setIndex=i,this.render=a,this.renderInstances=o},THREE.WebGLExtensions=function(e){var t={};this.get=function(r){if(void 0!==t[r])return t[r];var n;switch(r){case"WEBGL_depth_texture":n=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":n=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":n=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":n=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;case"WEBGL_compressed_texture_etc1":n=e.getExtension("WEBGL_compressed_texture_etc1");break;default:n=e.getExtension(r)}return null===n&&console.warn("THREE.WebGLRenderer: "+r+" extension not supported."),t[r]=n,n}},THREE.WebGLCapabilities=function(e,t,r){function n(t){if("highp"===t){if(e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.HIGH_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.HIGH_FLOAT).precision>0)return"highp";t="mediump"}return"mediump"===t&&e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.MEDIUM_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}this.getMaxPrecision=n,this.precision=void 0!==r.precision?r.precision:"highp",this.logarithmicDepthBuffer=void 0!==r.logarithmicDepthBuffer?r.logarithmicDepthBuffer:!1,this.maxTextures=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),this.maxVertexTextures=e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS),this.maxTextureSize=e.getParameter(e.MAX_TEXTURE_SIZE),this.maxCubemapSize=e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE),this.maxAttributes=e.getParameter(e.MAX_VERTEX_ATTRIBS),this.maxVertexUniforms=e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS),this.maxVaryings=e.getParameter(e.MAX_VARYING_VECTORS),this.maxFragmentUniforms=e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS),this.vertexTextures=this.maxVertexTextures>0,this.floatFragmentTextures=!!t.get("OES_texture_float"),this.floatVertexTextures=this.vertexTextures&&this.floatFragmentTextures;var i=n(this.precision);i!==this.precision&&(console.warn("THREE.WebGLRenderer:",this.precision,"not supported, using",i,"instead."),this.precision=i),this.logarithmicDepthBuffer&&(this.logarithmicDepthBuffer=!!t.get("EXT_frag_depth"))},THREE.WebGLGeometries=function(e,t,r){function n(e){var t=e.geometry;if(void 0!==l[t.id])return l[t.id];t.addEventListener("dispose",i);var n;return t instanceof THREE.BufferGeometry?n=t:t instanceof THREE.Geometry&&(void 0===t._bufferGeometry&&(t._bufferGeometry=(new THREE.BufferGeometry).setFromObject(e)),n=t._bufferGeometry),l[t.id]=n,r.memory.geometries++,n}function i(e){var n=e.target,a=l[n.id];null!==a.index&&o(a.index),s(a.attributes),n.removeEventListener("dispose",i),delete l[n.id];var c=t.get(n);c.wireframe&&o(c.wireframe),t["delete"](n);var h=t.get(a);h.wireframe&&o(h.wireframe),t["delete"](a),r.memory.geometries--}function a(e){return e instanceof THREE.InterleavedBufferAttribute?t.get(e.data).__webglBuffer:t.get(e).__webglBuffer}function o(t){var r=a(t);void 0!==r&&(e.deleteBuffer(r),c(t))}function s(e){for(var t in e)o(e[t])}function c(e){e instanceof THREE.InterleavedBufferAttribute?t["delete"](e.data):t["delete"](e)}var l={};this.get=n},THREE.WebGLLights=function(){var e={};this.get=function(t){if(void 0!==e[t.id])return e[t.id];var r;switch(t.type){case"DirectionalLight":r={direction:new THREE.Vector3,color:new THREE.Color,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new THREE.Vector2};break;case"SpotLight":r={position:new THREE.Vector3,direction:new THREE.Vector3,color:new THREE.Color,distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new THREE.Vector2};break;case"PointLight":r={position:new THREE.Vector3,color:new THREE.Color,distance:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new THREE.Vector2};break;case"HemisphereLight":r={direction:new THREE.Vector3,skyColor:new THREE.Color,groundColor:new THREE.Color}}return e[t.id]=r,r}},THREE.WebGLObjects=function(e,t,r){function n(t){var r=h.get(t);t.geometry instanceof THREE.Geometry&&r.updateFromObject(t);var n=r.index,a=r.attributes;null!==n&&i(n,e.ELEMENT_ARRAY_BUFFER);for(var o in a)i(a[o],e.ARRAY_BUFFER);var s=r.morphAttributes;for(var o in s)for(var c=s[o],l=0,u=c.length;u>l;l++)i(c[l],e.ARRAY_BUFFER);return r}function i(e,r){var n=e instanceof THREE.InterleavedBufferAttribute?e.data:e,i=t.get(n);void 0===i.__webglBuffer?a(i,n,r):i.version!==n.version&&o(i,n,r)}function a(t,r,n){t.__webglBuffer=e.createBuffer(),e.bindBuffer(n,t.__webglBuffer);var i=r.dynamic?e.DYNAMIC_DRAW:e.STATIC_DRAW;e.bufferData(n,r.array,i),t.version=r.version}function o(t,r,n){e.bindBuffer(n,t.__webglBuffer),r.dynamic===!1||-1===r.updateRange.count?e.bufferSubData(n,0,r.array):0===r.updateRange.count?console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually."):(e.bufferSubData(n,r.updateRange.offset*r.array.BYTES_PER_ELEMENT,r.array.subarray(r.updateRange.offset,r.updateRange.offset+r.updateRange.count)),r.updateRange.count=0),t.version=r.version}function s(e){return e instanceof THREE.InterleavedBufferAttribute?t.get(e.data).__webglBuffer:t.get(e).__webglBuffer}function c(r){var n=t.get(r);if(void 0!==n.wireframe)return n.wireframe;var a=[],o=r.index,s=r.attributes,c=s.position;if(null!==o)for(var h={},u=o.array,d=0,p=u.length;p>d;d+=3){var f=u[d+0],E=u[d+1],m=u[d+2];l(h,f,E)&&a.push(f,E),l(h,E,m)&&a.push(E,m),l(h,m,f)&&a.push(m,f)}else for(var u=s.position.array,d=0,p=u.length/3-1;p>d;d+=3){var f=d+0,E=d+1,m=d+2;a.push(f,E,E,m,m,f)}var g=c.count>65535?Uint32Array:Uint16Array,v=new THREE.BufferAttribute(new g(a),1);return i(v,e.ELEMENT_ARRAY_BUFFER),n.wireframe=v,v}function l(e,t,r){if(t>r){var n=t;t=r,r=n}var i=e[t];return void 0===i?(e[t]=[r],!0):-1===i.indexOf(r)?(i.push(r),!0):!1}var h=new THREE.WebGLGeometries(e,t,r);this.getAttributeBuffer=s,this.getWireframeAttribute=c,this.update=n},THREE.WebGLProgram=function(){function e(e){switch(e){case THREE.LinearEncoding:return["Linear","( value )"];case THREE.sRGBEncoding:return["sRGB","( value )"];case THREE.RGBEEncoding:return["RGBE","( value )"];case THREE.RGBM7Encoding:return["RGBM","( value, 7.0 )"];case THREE.RGBM16Encoding:return["RGBM","( value, 16.0 )"];case THREE.RGBDEncoding:return["RGBD","( value, 256.0 )"];case THREE.GammaEncoding:return["Gamma","( value, float( GAMMA_FACTOR ) )"];default:throw new Error("unsupported encoding: "+e)}}function t(t,r){var n=e(r);return"vec4 "+t+"( vec4 value ) { return "+n[0]+"ToLinear"+n[1]+"; }"}function r(t,r){var n=e(r);return"vec4 "+t+"( vec4 value ) { return LinearTo"+n[0]+n[1]+"; }"}function n(e,t){var r;switch(t){case THREE.LinearToneMapping:r="Linear";break;case THREE.ReinhardToneMapping:r="Reinhard";break;case THREE.Uncharted2ToneMapping:r="Uncharted2";break;case THREE.CineonToneMapping:r="OptimizedCineon";break;default:throw new Error("unsupported toneMapping: "+t)}return"vec3 "+e+"( vec3 color ) { return "+r+"ToneMapping( color ); }"}function i(e,t,r){e=e||{};var n=[e.derivatives||t.envMapCubeUV||t.bumpMap||t.normalMap||t.flatShading?"#extension GL_OES_standard_derivatives : enable":"",(e.fragDepth||t.logarithmicDepthBuffer)&&r.get("EXT_frag_depth")?"#extension GL_EXT_frag_depth : enable":"",e.drawBuffers&&r.get("WEBGL_draw_buffers")?"#extension GL_EXT_draw_buffers : require":"",(e.shaderTextureLOD||t.envMap)&&r.get("EXT_shader_texture_lod")?"#extension GL_EXT_shader_texture_lod : enable":""];return n.filter(s).join("\n")}function a(e){var t=[];for(var r in e){var n=e[r];n!==!1&&t.push("#define "+r+" "+n)}return t.join("\n")}function o(e,t,r){for(var n={},i=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES),a=0;i>a;a++){var o=e.getActiveAttrib(t,a),s=o.name;n[s]=e.getAttribLocation(t,s)}return n}function s(e){return""!==e}function c(e,t){return e.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights)}function l(e){function t(e,t){var r=THREE.ShaderChunk[t];if(void 0===r)throw new Error("Can not resolve #include <"+t+">");return l(r)}var r=/#include +<([\w\d.]+)>/g;return e.replace(r,t)}function h(e){function t(e,t,r,n){for(var i="",a=parseInt(t);a<parseInt(r);a++)i+=n.replace(/\[ i \]/g,"[ "+a+" ]");return i}var r=/for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;return e.replace(r,t)}var u=0;return function(e,d,p,f){var E=e.context,m=p.extensions,g=p.defines,v=p.__webglShader.vertexShader,T=p.__webglShader.fragmentShader,y="SHADOWMAP_TYPE_BASIC";f.shadowMapType===THREE.PCFShadowMap?y="SHADOWMAP_TYPE_PCF":f.shadowMapType===THREE.PCFSoftShadowMap&&(y="SHADOWMAP_TYPE_PCF_SOFT");var R="ENVMAP_TYPE_CUBE",x="ENVMAP_MODE_REFLECTION",H="ENVMAP_BLENDING_MULTIPLY";if(f.envMap){switch(p.envMap.mapping){case THREE.CubeReflectionMapping:case THREE.CubeRefractionMapping:R="ENVMAP_TYPE_CUBE";break;case THREE.CubeUVReflectionMapping:case THREE.CubeUVRefractionMapping:R="ENVMAP_TYPE_CUBE_UV";break;case THREE.EquirectangularReflectionMapping:case THREE.EquirectangularRefractionMapping:R="ENVMAP_TYPE_EQUIREC";break;case THREE.SphericalReflectionMapping:R="ENVMAP_TYPE_SPHERE"}switch(p.envMap.mapping){case THREE.CubeRefractionMapping:case THREE.EquirectangularRefractionMapping:x="ENVMAP_MODE_REFRACTION"}switch(p.combine){case THREE.MultiplyOperation:H="ENVMAP_BLENDING_MULTIPLY";break;case THREE.MixOperation:H="ENVMAP_BLENDING_MIX";break;case THREE.AddOperation:H="ENVMAP_BLENDING_ADD"}}var b,_,M=e.gammaFactor>0?e.gammaFactor:1,w=i(m,f,e.extensions),S=a(g),A=E.createProgram();p instanceof THREE.RawShaderMaterial?(b="",_=""):(b=["precision "+f.precision+" float;","precision "+f.precision+" int;","#define SHADER_NAME "+p.__webglShader.name,S,f.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+M,"#define MAX_BONES "+f.maxBones,f.map?"#define USE_MAP":"",f.envMap?"#define USE_ENVMAP":"",f.envMap?"#define "+x:"",f.lightMap?"#define USE_LIGHTMAP":"",f.aoMap?"#define USE_AOMAP":"",f.emissiveMap?"#define USE_EMISSIVEMAP":"",f.bumpMap?"#define USE_BUMPMAP":"",f.normalMap?"#define USE_NORMALMAP":"",f.displacementMap&&f.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",f.specularMap?"#define USE_SPECULARMAP":"",f.roughnessMap?"#define USE_ROUGHNESSMAP":"",f.metalnessMap?"#define USE_METALNESSMAP":"",f.alphaMap?"#define USE_ALPHAMAP":"",f.vertexColors?"#define USE_COLOR":"",f.flatShading?"#define FLAT_SHADED":"",f.skinning?"#define USE_SKINNING":"",f.useVertexTexture?"#define BONE_TEXTURE":"",f.morphTargets?"#define USE_MORPHTARGETS":"",f.morphNormals&&f.flatShading===!1?"#define USE_MORPHNORMALS":"",f.doubleSided?"#define DOUBLE_SIDED":"",f.flipSided?"#define FLIP_SIDED":"","#define NUM_CLIPPING_PLANES "+f.numClippingPlanes,f.shadowMapEnabled?"#define USE_SHADOWMAP":"",f.shadowMapEnabled?"#define "+y:"",f.sizeAttenuation?"#define USE_SIZEATTENUATION":"",f.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",f.logarithmicDepthBuffer&&e.extensions.get("EXT_frag_depth")?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_COLOR","	attribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif","\n"].filter(s).join("\n"),_=[w,"precision "+f.precision+" float;","precision "+f.precision+" int;","#define SHADER_NAME "+p.__webglShader.name,S,f.alphaTest?"#define ALPHATEST "+f.alphaTest:"","#define GAMMA_FACTOR "+M,f.useFog&&f.fog?"#define USE_FOG":"",f.useFog&&f.fogExp?"#define FOG_EXP2":"",f.map?"#define USE_MAP":"",f.envMap?"#define USE_ENVMAP":"",f.envMap?"#define "+R:"",f.envMap?"#define "+x:"",f.envMap?"#define "+H:"",f.lightMap?"#define USE_LIGHTMAP":"",f.aoMap?"#define USE_AOMAP":"",f.emissiveMap?"#define USE_EMISSIVEMAP":"",f.bumpMap?"#define USE_BUMPMAP":"",f.normalMap?"#define USE_NORMALMAP":"",f.specularMap?"#define USE_SPECULARMAP":"",f.roughnessMap?"#define USE_ROUGHNESSMAP":"",f.metalnessMap?"#define USE_METALNESSMAP":"",f.alphaMap?"#define USE_ALPHAMAP":"",f.vertexColors?"#define USE_COLOR":"",f.flatShading?"#define FLAT_SHADED":"",f.doubleSided?"#define DOUBLE_SIDED":"",f.flipSided?"#define FLIP_SIDED":"","#define NUM_CLIPPING_PLANES "+f.numClippingPlanes,f.shadowMapEnabled?"#define USE_SHADOWMAP":"",f.shadowMapEnabled?"#define "+y:"",f.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",f.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",f.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",f.logarithmicDepthBuffer&&e.extensions.get("EXT_frag_depth")?"#define USE_LOGDEPTHBUF_EXT":"",f.envMap&&e.extensions.get("EXT_shader_texture_lod")?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;",f.toneMapping!==THREE.NoToneMapping?"#define TONE_MAPPING":"",f.toneMapping!==THREE.NoToneMapping?THREE.ShaderChunk.tonemapping_pars_fragment:"",f.toneMapping!==THREE.NoToneMapping?n("toneMapping",f.toneMapping):"",f.outputEncoding||f.mapEncoding||f.envMapEncoding||f.emissiveMapEncoding?THREE.ShaderChunk.encodings_pars_fragment:"",f.mapEncoding?t("mapTexelToLinear",f.mapEncoding):"",f.envMapEncoding?t("envMapTexelToLinear",f.envMapEncoding):"",f.emissiveMapEncoding?t("emissiveMapTexelToLinear",f.emissiveMapEncoding):"",f.outputEncoding?r("linearToOutputTexel",f.outputEncoding):"",f.depthPacking?"#define DEPTH_PACKING "+p.depthPacking:"","\n"].filter(s).join("\n")),v=l(v,f),v=c(v,f),T=l(T,f),T=c(T,f),p instanceof THREE.ShaderMaterial==!1&&(v=h(v),T=h(T));var L=b+v,C=_+T,P=THREE.WebGLShader(E,E.VERTEX_SHADER,L),I=THREE.WebGLShader(E,E.FRAGMENT_SHADER,C);E.attachShader(A,P),E.attachShader(A,I),void 0!==p.index0AttributeName?E.bindAttribLocation(A,0,p.index0AttributeName):f.morphTargets===!0&&E.bindAttribLocation(A,0,"position"),E.linkProgram(A);var B=E.getProgramInfoLog(A),D=E.getShaderInfoLog(P),O=E.getShaderInfoLog(I),U=!0,N=!0;E.getProgramParameter(A,E.LINK_STATUS)===!1?(U=!1,console.error("THREE.WebGLProgram: shader error: ",E.getError(),"gl.VALIDATE_STATUS",E.getProgramParameter(A,E.VALIDATE_STATUS),"gl.getProgramInfoLog",B,D,O)):""!==B?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",B):""!==D&&""!==O||(N=!1),N&&(this.diagnostics={runnable:U,material:p,programLog:B,vertexShader:{log:D,prefix:b},fragmentShader:{log:O,prefix:_}}),E.deleteShader(P),E.deleteShader(I);var F;this.getUniforms=function(){return void 0===F&&(F=new THREE.WebGLUniforms(E,A,e)),F};var V;return this.getAttributes=function(){return void 0===V&&(V=o(E,A)),V},this.destroy=function(){E.deleteProgram(A),this.program=void 0},Object.defineProperties(this,{uniforms:{get:function(){return console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms()."),this.getUniforms()}},attributes:{get:function(){return console.warn("THREE.WebGLProgram: .attributes is now .getAttributes()."),this.getAttributes()}}}),this.id=u++,this.code=d,this.usedTimes=1,this.program=A,this.vertexShader=P,this.fragmentShader=I,this}}(),THREE.WebGLPrograms=function(e,t){function r(e){if(t.floatVertexTextures&&e&&e.skeleton&&e.skeleton.useVertexTexture)return 1024;var r=t.maxVertexUniforms,n=Math.floor((r-20)/4),i=n;return void 0!==e&&e instanceof THREE.SkinnedMesh&&(i=Math.min(e.skeleton.bones.length,i),i<e.skeleton.bones.length&&console.warn("WebGLRenderer: too many bones - "+e.skeleton.bones.length+", this GPU supports just "+i+" (try OpenGL instead of ANGLE)")),i}function n(e,t){var r;return e?e instanceof THREE.Texture?r=e.encoding:e instanceof THREE.WebGLRenderTarget&&(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),r=e.texture.encoding):r=THREE.LinearEncoding,r===THREE.LinearEncoding&&t&&(r=THREE.GammaEncoding),r}var i=[],a={MeshDepthMaterial:"depth",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points"},o=["precision","supportsVertexTextures","map","mapEncoding","envMap","envMapMode","envMapEncoding","lightMap","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","displacementMap","specularMap","roughnessMap","metalnessMap","alphaMap","combine","vertexColors","fog","useFog","fogExp","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","depthPacking"];this.getParameters=function(i,o,s,c,l){var h=a[i.type],u=r(l),d=e.getPrecision();null!==i.precision&&(d=t.getMaxPrecision(i.precision),d!==i.precision&&console.warn("THREE.WebGLProgram.getParameters:",i.precision,"not supported, using",d,"instead."));var p=e.getCurrentRenderTarget(),f={shaderID:h,precision:d,supportsVertexTextures:t.vertexTextures,outputEncoding:n(p?p.texture:null,e.gammaOutput),map:!!i.map,mapEncoding:n(i.map,e.gammaInput),
envMap:!!i.envMap,envMapMode:i.envMap&&i.envMap.mapping,envMapEncoding:n(i.envMap,e.gammaInput),envMapCubeUV:!!i.envMap&&(i.envMap.mapping===THREE.CubeUVReflectionMapping||i.envMap.mapping===THREE.CubeUVRefractionMapping),lightMap:!!i.lightMap,aoMap:!!i.aoMap,emissiveMap:!!i.emissiveMap,emissiveMapEncoding:n(i.emissiveMap,e.gammaInput),bumpMap:!!i.bumpMap,normalMap:!!i.normalMap,displacementMap:!!i.displacementMap,roughnessMap:!!i.roughnessMap,metalnessMap:!!i.metalnessMap,specularMap:!!i.specularMap,alphaMap:!!i.alphaMap,combine:i.combine,vertexColors:i.vertexColors,fog:s,useFog:i.fog,fogExp:s instanceof THREE.FogExp2,flatShading:i.shading===THREE.FlatShading,sizeAttenuation:i.sizeAttenuation,logarithmicDepthBuffer:t.logarithmicDepthBuffer,skinning:i.skinning,maxBones:u,useVertexTexture:t.floatVertexTextures&&l&&l.skeleton&&l.skeleton.useVertexTexture,morphTargets:i.morphTargets,morphNormals:i.morphNormals,maxMorphTargets:e.maxMorphTargets,maxMorphNormals:e.maxMorphNormals,numDirLights:o.directional.length,numPointLights:o.point.length,numSpotLights:o.spot.length,numHemiLights:o.hemi.length,numClippingPlanes:c,shadowMapEnabled:e.shadowMap.enabled&&l.receiveShadow&&o.shadows.length>0,shadowMapType:e.shadowMap.type,toneMapping:e.toneMapping,physicallyCorrectLights:e.physicallyCorrectLights,premultipliedAlpha:i.premultipliedAlpha,alphaTest:i.alphaTest,doubleSided:i.side===THREE.DoubleSide,flipSided:i.side===THREE.BackSide,depthPacking:void 0!==i.depthPacking?i.depthPacking:!1};return f},this.getProgramCode=function(e,t){var r=[];if(t.shaderID?r.push(t.shaderID):(r.push(e.fragmentShader),r.push(e.vertexShader)),void 0!==e.defines)for(var n in e.defines)r.push(n),r.push(e.defines[n]);for(var i=0;i<o.length;i++)r.push(t[o[i]]);return r.join()},this.acquireProgram=function(t,r,n){for(var a,o=0,s=i.length;s>o;o++){var c=i[o];if(c.code===n){a=c,++a.usedTimes;break}}return void 0===a&&(a=new THREE.WebGLProgram(e,n,t,r),i.push(a)),a},this.releaseProgram=function(e){if(0===--e.usedTimes){var t=i.indexOf(e);i[t]=i[i.length-1],i.pop(),e.destroy()}},this.programs=i},THREE.WebGLProperties=function(){var e={};this.get=function(t){var r=t.uuid,n=e[r];return void 0===n&&(n={},e[r]=n),n},this["delete"]=function(t){delete e[t.uuid]},this.clear=function(){e={}}},THREE.WebGLShader=function(){function e(e){for(var t=e.split("\n"),r=0;r<t.length;r++)t[r]=r+1+": "+t[r];return t.join("\n")}return function(t,r,n){var i=t.createShader(r);return t.shaderSource(i,n),t.compileShader(i),t.getShaderParameter(i,t.COMPILE_STATUS)===!1&&console.error("THREE.WebGLShader: Shader couldn't compile."),""!==t.getShaderInfoLog(i)&&console.warn("THREE.WebGLShader: gl.getShaderInfoLog()",r===t.VERTEX_SHADER?"vertex":"fragment",t.getShaderInfoLog(i),e(n)),i}}(),THREE.WebGLShadowMap=function(e,t,r){function n(t,r,n,i){var a=t.geometry,o=null,s=g,c=t.customDepthMaterial;if(n&&(s=v,c=t.customDistanceMaterial),c)o=c;else{var l=void 0!==a.morphTargets&&a.morphTargets.length>0&&r.morphTargets,h=t instanceof THREE.SkinnedMesh&&r.skinning,u=0;l&&(u|=f),h&&(u|=E),o=s[u]}if(e.localClippingEnabled&&r.clipShadows===!0&&0!==r.clippingPlanes.length){var d=o.uuid,p=r.uuid,m=T[d];void 0===m&&(m={},T[d]=m);var y=m[p];void 0===y&&(y=o.clone(),m[p]=y),o=y}o.visible=r.visible,o.wireframe=r.wireframe;var R=r.side;return C.renderSingleSided&&R==THREE.DoubleSide&&(R=THREE.FrontSide),C.renderReverseSided&&(R===THREE.FrontSide?R=THREE.BackSide:R===THREE.BackSide&&(R=THREE.FrontSide)),o.side=R,o.clipShadows=r.clipShadows,o.clippingPlanes=r.clippingPlanes,o.wireframeLinewidth=r.wireframeLinewidth,o.linewidth=r.linewidth,n&&void 0!==o.uniforms.lightPos&&o.uniforms.lightPos.value.copy(i),o}function i(e,t,r){if(e.visible!==!1){if(e.layers.test(t.layers)&&(e instanceof THREE.Mesh||e instanceof THREE.Line||e instanceof THREE.Points)&&e.castShadow&&(e.frustumCulled===!1||s.intersectsObject(e)===!0)){var n=e.material;n.visible===!0&&(e.modelViewMatrix.multiplyMatrices(r.matrixWorldInverse,e.matrixWorld),p.push(e))}for(var a=e.children,o=0,c=a.length;c>o;o++)i(a[o],t,r)}}var a=e.context,o=e.state,s=new THREE.Frustum,c=new THREE.Matrix4,l=t.shadows,h=new THREE.Vector2,u=new THREE.Vector3,d=new THREE.Vector3,p=[],f=1,E=2,m=(f|E)+1,g=new Array(m),v=new Array(m),T={},y=[new THREE.Vector3(1,0,0),new THREE.Vector3(-1,0,0),new THREE.Vector3(0,0,1),new THREE.Vector3(0,0,-1),new THREE.Vector3(0,1,0),new THREE.Vector3(0,-1,0)],R=[new THREE.Vector3(0,1,0),new THREE.Vector3(0,1,0),new THREE.Vector3(0,1,0),new THREE.Vector3(0,1,0),new THREE.Vector3(0,0,1),new THREE.Vector3(0,0,-1)],x=[new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4],H=new THREE.MeshDepthMaterial;H.depthPacking=THREE.RGBADepthPacking,H.clipping=!0;for(var b=THREE.ShaderLib.distanceRGBA,_=THREE.UniformsUtils.clone(b.uniforms),M=0;M!==m;++M){var w=0!==(M&f),S=0!==(M&E),A=H.clone();A.morphTargets=w,A.skinning=S,g[M]=A;var L=new THREE.ShaderMaterial({defines:{USE_SHADOWMAP:""},uniforms:_,vertexShader:b.vertexShader,fragmentShader:b.fragmentShader,morphTargets:w,skinning:S,clipping:!0});v[M]=L}var C=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=THREE.PCFShadowMap,this.renderReverseSided=!0,this.renderSingleSided=!0,this.render=function(t,f){if(C.enabled!==!1&&(C.autoUpdate!==!1||C.needsUpdate!==!1)&&0!==l.length){o.clearColor(1,1,1,1),o.disable(a.BLEND),o.setDepthTest(!0),o.setScissorTest(!1);for(var E,m,g=0,v=l.length;v>g;g++){var T=l[g],H=T.shadow;if(void 0!==H){var b=H.camera;if(h.copy(H.mapSize),T instanceof THREE.PointLight){E=6,m=!0;var _=h.x,M=h.y;x[0].set(2*_,M,_,M),x[1].set(0,M,_,M),x[2].set(3*_,M,_,M),x[3].set(_,M,_,M),x[4].set(3*_,0,_,M),x[5].set(_,0,_,M),h.x*=4,h.y*=2}else E=1,m=!1;if(null===H.map){var w={minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,format:THREE.RGBAFormat};H.map=new THREE.WebGLRenderTarget(h.x,h.y,w),b.updateProjectionMatrix()}H instanceof THREE.SpotLightShadow&&H.update(T);var S=H.map,A=H.matrix;d.setFromMatrixPosition(T.matrixWorld),b.position.copy(d),e.setRenderTarget(S),e.clear();for(var L=0;E>L;L++){if(m){u.copy(b.position),u.add(y[L]),b.up.copy(R[L]),b.lookAt(u);var P=x[L];o.viewport(P)}else u.setFromMatrixPosition(T.target.matrixWorld),b.lookAt(u);b.updateMatrixWorld(),b.matrixWorldInverse.getInverse(b.matrixWorld),A.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),A.multiply(b.projectionMatrix),A.multiply(b.matrixWorldInverse),c.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse),s.setFromMatrix(c),p.length=0,i(t,f,b);for(var I=0,B=p.length;B>I;I++){var D=p[I],O=r.update(D),U=D.material;if(U instanceof THREE.MultiMaterial)for(var N=O.groups,F=U.materials,V=0,G=N.length;G>V;V++){var k=N[V],z=F[k.materialIndex];if(z.visible===!0){var j=n(D,z,m,d);e.renderBufferDirect(b,null,O,j,D,k)}}else{var j=n(D,U,m,d);e.renderBufferDirect(b,null,O,j,D,null)}}}}else console.warn("THREE.WebGLShadowMap:",T,"has no shadow.")}var W=e.getClearColor(),X=e.getClearAlpha();e.setClearColor(W,X),C.needsUpdate=!1}}},THREE.WebGLState=function(e,t,r){function n(t,r,n){var i=new Uint8Array(3),a=e.createTexture();e.bindTexture(t,a),e.texParameteri(t,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(t,e.TEXTURE_MAG_FILTER,e.NEAREST);for(var o=0;n>o;o++)e.texImage2D(r+o,0,e.RGB,1,1,0,e.RGB,e.UNSIGNED_BYTE,i);return a}var i=this;this.buffers={color:new THREE.WebGLColorBuffer(e,this),depth:new THREE.WebGLDepthBuffer(e,this),stencil:new THREE.WebGLStencilBuffer(e,this)};var a=e.getParameter(e.MAX_VERTEX_ATTRIBS),o=new Uint8Array(a),s=new Uint8Array(a),c=new Uint8Array(a),l={},h=null,u=null,d=null,p=null,f=null,E=null,m=null,g=null,v=!1,T=null,y=null,R=null,x=null,H=null,b=null,_=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),M=null,w={},S=new THREE.Vector4,A=new THREE.Vector4,L={};L[e.TEXTURE_2D]=n(e.TEXTURE_2D,e.TEXTURE_2D,1),L[e.TEXTURE_CUBE_MAP]=n(e.TEXTURE_CUBE_MAP,e.TEXTURE_CUBE_MAP_POSITIVE_X,6),this.init=function(){this.clearColor(0,0,0,1),this.clearDepth(1),this.clearStencil(0),this.enable(e.DEPTH_TEST),this.setDepthFunc(THREE.LessEqualDepth),this.setFlipSided(!1),this.setCullFace(THREE.CullFaceBack),this.enable(e.CULL_FACE),this.enable(e.BLEND),this.setBlending(THREE.NormalBlending)},this.initAttributes=function(){for(var e=0,t=o.length;t>e;e++)o[e]=0},this.enableAttribute=function(r){if(o[r]=1,0===s[r]&&(e.enableVertexAttribArray(r),s[r]=1),0!==c[r]){var n=t.get("ANGLE_instanced_arrays");n.vertexAttribDivisorANGLE(r,0),c[r]=0}},this.enableAttributeAndDivisor=function(t,r,n){o[t]=1,0===s[t]&&(e.enableVertexAttribArray(t),s[t]=1),c[t]!==r&&(n.vertexAttribDivisorANGLE(t,r),c[t]=r)},this.disableUnusedAttributes=function(){for(var t=0,r=s.length;t!==r;++t)s[t]!==o[t]&&(e.disableVertexAttribArray(t),s[t]=0)},this.enable=function(t){l[t]!==!0&&(e.enable(t),l[t]=!0)},this.disable=function(t){l[t]!==!1&&(e.disable(t),l[t]=!1)},this.getCompressedTextureFormats=function(){if(null===h&&(h=[],t.get("WEBGL_compressed_texture_pvrtc")||t.get("WEBGL_compressed_texture_s3tc")||t.get("WEBGL_compressed_texture_etc1")))for(var r=e.getParameter(e.COMPRESSED_TEXTURE_FORMATS),n=0;n<r.length;n++)h.push(r[n]);return h},this.setBlending=function(t,n,i,a,o,s,c,l){return t===THREE.NoBlending?(this.disable(e.BLEND),void(u=t)):(this.enable(e.BLEND),t===u&&l===v||(t===THREE.AdditiveBlending?l?(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ONE,e.ONE,e.ONE,e.ONE)):(e.blendEquation(e.FUNC_ADD),e.blendFunc(e.SRC_ALPHA,e.ONE)):t===THREE.SubtractiveBlending?l?(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ZERO,e.ZERO,e.ONE_MINUS_SRC_COLOR,e.ONE_MINUS_SRC_ALPHA)):(e.blendEquation(e.FUNC_ADD),e.blendFunc(e.ZERO,e.ONE_MINUS_SRC_COLOR)):t===THREE.MultiplyBlending?l?(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ZERO,e.SRC_COLOR,e.ZERO,e.SRC_ALPHA)):(e.blendEquation(e.FUNC_ADD),e.blendFunc(e.ZERO,e.SRC_COLOR)):l?(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ONE,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA)):(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA)),u=t,v=l),void(t===THREE.CustomBlending?(o=o||n,s=s||i,c=c||a,n===d&&o===E||(e.blendEquationSeparate(r(n),r(o)),d=n,E=o),i===p&&a===f&&s===m&&c===g||(e.blendFuncSeparate(r(i),r(a),r(s),r(c)),p=i,f=a,m=s,g=c)):(d=null,p=null,f=null,E=null,m=null,g=null)))},this.setColorWrite=function(e){this.buffers.color.setMask(e)},this.setDepthTest=function(e){this.buffers.depth.setTest(e)},this.setDepthWrite=function(e){this.buffers.depth.setMask(e)},this.setDepthFunc=function(e){this.buffers.depth.setFunc(e)},this.setStencilTest=function(e){this.buffers.stencil.setTest(e)},this.setStencilWrite=function(e){this.buffers.stencil.setMask(e)},this.setStencilFunc=function(e,t,r){this.buffers.stencil.setFunc(e,t,r)},this.setStencilOp=function(e,t,r){this.buffers.stencil.setOp(e,t,r)},this.setFlipSided=function(t){T!==t&&(t?e.frontFace(e.CW):e.frontFace(e.CCW),T=t)},this.setCullFace=function(t){t!==THREE.CullFaceNone?(this.enable(e.CULL_FACE),t!==y&&(t===THREE.CullFaceBack?e.cullFace(e.BACK):t===THREE.CullFaceFront?e.cullFace(e.FRONT):e.cullFace(e.FRONT_AND_BACK))):this.disable(e.CULL_FACE),y=t},this.setLineWidth=function(t){t!==R&&(e.lineWidth(t),R=t)},this.setPolygonOffset=function(t,r,n){t?(this.enable(e.POLYGON_OFFSET_FILL),x===r&&H===n||(e.polygonOffset(r,n),x=r,H=n)):this.disable(e.POLYGON_OFFSET_FILL)},this.getScissorTest=function(){return b},this.setScissorTest=function(t){b=t,t?this.enable(e.SCISSOR_TEST):this.disable(e.SCISSOR_TEST)},this.activeTexture=function(t){void 0===t&&(t=e.TEXTURE0+_-1),M!==t&&(e.activeTexture(t),M=t)},this.bindTexture=function(t,r){null===M&&i.activeTexture();var n=w[M];void 0===n&&(n={type:void 0,texture:void 0},w[M]=n),n.type===t&&n.texture===r||(e.bindTexture(t,r||L[t]),n.type=t,n.texture=r)},this.compressedTexImage2D=function(){try{e.compressedTexImage2D.apply(e,arguments)}catch(t){console.error(t)}},this.texImage2D=function(){try{e.texImage2D.apply(e,arguments)}catch(t){console.error(t)}},this.clearColor=function(e,t,r,n){this.buffers.color.setClear(e,t,r,n)},this.clearDepth=function(e){this.buffers.depth.setClear(e)},this.clearStencil=function(e){this.buffers.stencil.setClear(e)},this.scissor=function(t){S.equals(t)===!1&&(e.scissor(t.x,t.y,t.z,t.w),S.copy(t))},this.viewport=function(t){A.equals(t)===!1&&(e.viewport(t.x,t.y,t.z,t.w),A.copy(t))},this.reset=function(){for(var t=0;t<s.length;t++)1===s[t]&&(e.disableVertexAttribArray(t),s[t]=0);l={},h=null,M=null,w={},u=null,T=null,y=null,this.buffers.color.reset(),this.buffers.depth.reset(),this.buffers.stencil.reset()}},THREE.WebGLColorBuffer=function(e,t){var r=!1,n=new THREE.Vector4,i=null,a=new THREE.Vector4;this.setMask=function(t){i===t||r||(e.colorMask(t,t,t,t),i=t)},this.setLocked=function(e){r=e},this.setClear=function(t,r,i,o){n.set(t,r,i,o),a.equals(n)===!1&&(e.clearColor(t,r,i,o),a.copy(n))},this.reset=function(){r=!1,i=null,a=new THREE.Vector4}},THREE.WebGLDepthBuffer=function(e,t){var r=!1,n=null,i=null,a=null;this.setTest=function(r){r?t.enable(e.DEPTH_TEST):t.disable(e.DEPTH_TEST)},this.setMask=function(t){n===t||r||(e.depthMask(t),n=t)},this.setFunc=function(t){if(i!==t){if(t)switch(t){case THREE.NeverDepth:e.depthFunc(e.NEVER);break;case THREE.AlwaysDepth:e.depthFunc(e.ALWAYS);break;case THREE.LessDepth:e.depthFunc(e.LESS);break;case THREE.LessEqualDepth:e.depthFunc(e.LEQUAL);break;case THREE.EqualDepth:e.depthFunc(e.EQUAL);break;case THREE.GreaterEqualDepth:e.depthFunc(e.GEQUAL);break;case THREE.GreaterDepth:e.depthFunc(e.GREATER);break;case THREE.NotEqualDepth:e.depthFunc(e.NOTEQUAL);break;default:e.depthFunc(e.LEQUAL)}else e.depthFunc(e.LEQUAL);i=t}},this.setLocked=function(e){r=e},this.setClear=function(t){a!==t&&(e.clearDepth(t),a=t)},this.reset=function(){r=!1,n=null,i=null,a=null}},THREE.WebGLStencilBuffer=function(e,t){var r=!1,n=null,i=null,a=null,o=null,s=null,c=null,l=null,h=null;this.setTest=function(r){r?t.enable(e.STENCIL_TEST):t.disable(e.STENCIL_TEST)},this.setMask=function(t){n===t||r||(e.stencilMask(t),n=t)},this.setFunc=function(t,r,n){i===t&&a===r&&o===n||(e.stencilFunc(t,r,n),i=t,a=r,o=n)},this.setOp=function(t,r,n){s===t&&c===r&&l===n||(e.stencilOp(t,r,n),s=t,c=r,l=n)},this.setLocked=function(e){r=e},this.setClear=function(t){h!==t&&(e.clearStencil(t),h=t)},this.reset=function(){r=!1,n=null,i=null,a=null,o=null,s=null,c=null,l=null,h=null}},THREE.WebGLUniforms=function(){var e=function(){this.seq=[],this.map={}},t=[],r=[],n=function(e,r,n){var i=e[0];if(0>=i||i>0)return e;var a=r*n,o=t[a];if(void 0===o&&(o=new Float32Array(a),t[a]=o),0!==r){i.toArray(o,0);for(var s=1,c=0;s!==r;++s)c+=n,e[s].toArray(o,c)}return o},i=function(e,t){var n=r[t];void 0===n&&(n=new Int32Array(t),r[t]=n);for(var i=0;i!==t;++i)n[i]=e.allocTextureUnit();return n},a=function(e,t){e.uniform1f(this.addr,t)},o=function(e,t){e.uniform1i(this.addr,t)},s=function(e,t){void 0===t.x?e.uniform2fv(this.addr,t):e.uniform2f(this.addr,t.x,t.y)},c=function(e,t){void 0!==t.x?e.uniform3f(this.addr,t.x,t.y,t.z):void 0!==t.r?e.uniform3f(this.addr,t.r,t.g,t.b):e.uniform3fv(this.addr,t)},l=function(e,t){void 0===t.x?e.uniform4fv(this.addr,t):e.uniform4f(this.addr,t.x,t.y,t.z,t.w)},h=function(e,t){e.uniformMatrix2fv(this.addr,!1,t.elements||t)},u=function(e,t){e.uniformMatrix3fv(this.addr,!1,t.elements||t)},d=function(e,t){e.uniformMatrix4fv(this.addr,!1,t.elements||t)},p=function(e,t,r){var n=r.allocTextureUnit();e.uniform1i(this.addr,n),t&&r.setTexture2D(t,n)},f=function(e,t,r){var n=r.allocTextureUnit();e.uniform1i(this.addr,n),t&&r.setTextureCube(t,n)},E=function(e,t){e.uniform2iv(this.addr,t)},m=function(e,t){e.uniform3iv(this.addr,t)},g=function(e,t){e.uniform4iv(this.addr,t)},v=function(e){switch(e){case 5126:return a;case 35664:return s;case 35665:return c;case 35666:return l;case 35674:return h;case 35675:return u;case 35676:return d;case 35678:return p;case 35680:return f;case 5124:case 35670:return o;case 35667:case 35671:return E;case 35668:case 35672:return m;case 35669:case 35673:return g}},T=function(e,t){e.uniform1fv(this.addr,t)},y=function(e,t){e.uniform1iv(this.addr,t)},R=function(e,t){e.uniform2fv(this.addr,n(t,this.size,2))},x=function(e,t){e.uniform3fv(this.addr,n(t,this.size,3))},H=function(e,t){e.uniform4fv(this.addr,n(t,this.size,4))},b=function(e,t){e.uniformMatrix2fv(this.addr,!1,n(t,this.size,4))},_=function(e,t){e.uniformMatrix3fv(this.addr,!1,n(t,this.size,9))},M=function(e,t){e.uniformMatrix4fv(this.addr,!1,n(t,this.size,16))},w=function(e,t,r){var n=t.length,a=i(r,n);e.uniform1iv(this.addr,a);for(var o=0;o!==n;++o){var s=t[o];s&&r.setTexture2D(s,a[o])}},S=function(e,t,r){var n=t.length,a=i(r,n);e.uniform1iv(this.addr,a);for(var o=0;o!==n;++o){var s=t[o];s&&r.setTextureCube(s,a[o])}},A=function(e){switch(e){case 5126:return T;case 35664:return R;case 35665:return x;case 35666:return H;case 35674:return b;case 35675:return _;case 35676:return M;case 35678:return w;case 35680:return S;case 5124:case 35670:return y;case 35667:case 35671:return E;case 35668:case 35672:return m;case 35669:case 35673:return g}},L=function(e,t,r){this.id=e,this.addr=r,this.setValue=v(t.type)},C=function(e,t,r){this.id=e,this.addr=r,this.size=t.size,this.setValue=A(t.type)},P=function(t){this.id=t,e.call(this)};P.prototype.setValue=function(e,t){for(var r=this.seq,n=0,i=r.length;n!==i;++n){var a=r[n];a.setValue(e,t[a.id])}};var I=/([\w\d_]+)(\])?(\[|\.)?/g,B=function(e,t){e.seq.push(t),e.map[t.id]=t},D=function(e,t,r){var n=e.name,i=n.length;for(I.lastIndex=0;;){var a=I.exec(n),o=I.lastIndex,s=a[1],c="]"===a[2],l=a[3];if(c&&(s=0|s),void 0===l||"["===l&&o+2===i){B(r,void 0===l?new L(s,e,t):new C(s,e,t));break}var h=r.map,u=h[s];void 0===u&&(u=new P(s),B(r,u)),r=u}},O=function(t,r,n){e.call(this),this.renderer=n;for(var i=t.getProgramParameter(r,t.ACTIVE_UNIFORMS),a=0;a!==i;++a){var o=t.getActiveUniform(r,a),s=o.name,c=t.getUniformLocation(r,s);D(o,c,this)}};return O.prototype.setValue=function(e,t,r){var n=this.map[t];void 0!==n&&n.setValue(e,r,this.renderer)},O.prototype.set=function(e,t,r){var n=this.map[r];void 0!==n&&n.setValue(e,t[r],this.renderer)},O.prototype.setOptional=function(e,t,r){var n=t[r];void 0!==n&&this.setValue(e,r,n)},O.upload=function(e,t,r,n){for(var i=0,a=t.length;i!==a;++i){var o=t[i],s=r[o.id];s.needsUpdate!==!1&&o.setValue(e,s.value,n)}},O.seqWithValue=function(e,t){for(var r=[],n=0,i=e.length;n!==i;++n){var a=e[n];a.id in t&&r.push(a)}return r},O.splitDynamic=function(e,t){for(var r=null,n=e.length,i=0,a=0;a!==n;++a){var o=e[a],s=t[o.id];s&&s.dynamic===!0?(null===r&&(r=[]),r.push(o)):(a>i&&(e[i]=o),++i)}return n>i&&(e.length=i),r},O.evalDynamic=function(e,t,r,n){for(var i=0,a=e.length;i!==a;++i){var o=t[e[i].id],s=o.onUpdateCallback;void 0!==s&&s.call(o,r,n)}},O}(),THREE.LensFlarePlugin=function(e,t){function r(){var e=new Float32Array([-1,-1,0,0,1,-1,1,0,1,1,1,1,-1,1,0,1]),t=new Uint16Array([0,1,2,0,2,3]);i=d.createBuffer(),a=d.createBuffer(),d.bindBuffer(d.ARRAY_BUFFER,i),d.bufferData(d.ARRAY_BUFFER,e,d.STATIC_DRAW),d.bindBuffer(d.ELEMENT_ARRAY_BUFFER,a),d.bufferData(d.ELEMENT_ARRAY_BUFFER,t,d.STATIC_DRAW),h=d.createTexture(),u=d.createTexture(),p.bindTexture(d.TEXTURE_2D,h),d.texImage2D(d.TEXTURE_2D,0,d.RGB,16,16,0,d.RGB,d.UNSIGNED_BYTE,null),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_WRAP_S,d.CLAMP_TO_EDGE),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_WRAP_T,d.CLAMP_TO_EDGE),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_MAG_FILTER,d.NEAREST),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_MIN_FILTER,d.NEAREST),p.bindTexture(d.TEXTURE_2D,u),d.texImage2D(d.TEXTURE_2D,0,d.RGBA,16,16,0,d.RGBA,d.UNSIGNED_BYTE,null),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_WRAP_S,d.CLAMP_TO_EDGE),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_WRAP_T,d.CLAMP_TO_EDGE),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_MAG_FILTER,d.NEAREST),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_MIN_FILTER,d.NEAREST),o={vertexShader:["uniform lowp int renderType;","uniform vec3 screenPosition;","uniform vec2 scale;","uniform float rotation;","uniform sampler2D occlusionMap;","attribute vec2 position;","attribute vec2 uv;","varying vec2 vUV;","varying float vVisibility;","void main() {","vUV = uv;","vec2 pos = position;","if ( renderType == 2 ) {","vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );","visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );","visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );","visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );","visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );","visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );","visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );","visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );","visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );","vVisibility =        visibility.r / 9.0;","vVisibility *= 1.0 - visibility.g / 9.0;","vVisibility *=       visibility.b / 9.0;","vVisibility *= 1.0 - visibility.a / 9.0;","pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;","pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;","}","gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );","}"].join("\n"),fragmentShader:["uniform lowp int renderType;","uniform sampler2D map;","uniform float opacity;","uniform vec3 color;","varying vec2 vUV;","varying float vVisibility;","void main() {","if ( renderType == 0 ) {","gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );","} else if ( renderType == 1 ) {","gl_FragColor = texture2D( map, vUV );","} else {","vec4 texture = texture2D( map, vUV );","texture.a *= opacity * vVisibility;","gl_FragColor = texture;","gl_FragColor.rgb *= color;","}","}"].join("\n")},s=n(o),c={vertex:d.getAttribLocation(s,"position"),uv:d.getAttribLocation(s,"uv")},l={renderType:d.getUniformLocation(s,"renderType"),map:d.getUniformLocation(s,"map"),occlusionMap:d.getUniformLocation(s,"occlusionMap"),opacity:d.getUniformLocation(s,"opacity"),color:d.getUniformLocation(s,"color"),scale:d.getUniformLocation(s,"scale"),rotation:d.getUniformLocation(s,"rotation"),screenPosition:d.getUniformLocation(s,"screenPosition")}}function n(t){var r=d.createProgram(),n=d.createShader(d.FRAGMENT_SHADER),i=d.createShader(d.VERTEX_SHADER),a="precision "+e.getPrecision()+" float;\n";return d.shaderSource(n,a+t.fragmentShader),d.shaderSource(i,a+t.vertexShader),d.compileShader(n),d.compileShader(i),d.attachShader(r,n),d.attachShader(r,i),d.linkProgram(r),r}var i,a,o,s,c,l,h,u,d=e.context,p=e.state;this.render=function(n,o,f){if(0!==t.length){var E=new THREE.Vector3,m=f.w/f.z,g=.5*f.z,v=.5*f.w,T=16/f.w,y=new THREE.Vector2(T*m,T),R=new THREE.Vector3(1,1,0),x=new THREE.Vector2(1,1),H=new THREE.Box2;H.min.set(0,0),H.max.set(f.z-16,f.w-16),void 0===s&&r(),d.useProgram(s),p.initAttributes(),p.enableAttribute(c.vertex),p.enableAttribute(c.uv),p.disableUnusedAttributes(),d.uniform1i(l.occlusionMap,0),d.uniform1i(l.map,1),d.bindBuffer(d.ARRAY_BUFFER,i),d.vertexAttribPointer(c.vertex,2,d.FLOAT,!1,16,0),d.vertexAttribPointer(c.uv,2,d.FLOAT,!1,16,8),d.bindBuffer(d.ELEMENT_ARRAY_BUFFER,a),p.disable(d.CULL_FACE),p.setDepthWrite(!1);for(var b=0,_=t.length;_>b;b++){T=16/f.w,y.set(T*m,T);var M=t[b];if(E.set(M.matrixWorld.elements[12],M.matrixWorld.elements[13],M.matrixWorld.elements[14]),E.applyMatrix4(o.matrixWorldInverse),E.applyProjection(o.projectionMatrix),R.copy(E),x.x=f.x+R.x*g+g-8,x.y=f.y+R.y*v+v-8,H.containsPoint(x)===!0){p.activeTexture(d.TEXTURE0),p.bindTexture(d.TEXTURE_2D,null),p.activeTexture(d.TEXTURE1),p.bindTexture(d.TEXTURE_2D,h),d.copyTexImage2D(d.TEXTURE_2D,0,d.RGB,x.x,x.y,16,16,0),d.uniform1i(l.renderType,0),d.uniform2f(l.scale,y.x,y.y),d.uniform3f(l.screenPosition,R.x,R.y,R.z),p.disable(d.BLEND),p.enable(d.DEPTH_TEST),d.drawElements(d.TRIANGLES,6,d.UNSIGNED_SHORT,0),p.activeTexture(d.TEXTURE0),p.bindTexture(d.TEXTURE_2D,u),d.copyTexImage2D(d.TEXTURE_2D,0,d.RGBA,x.x,x.y,16,16,0),d.uniform1i(l.renderType,1),p.disable(d.DEPTH_TEST),p.activeTexture(d.TEXTURE1),p.bindTexture(d.TEXTURE_2D,h),d.drawElements(d.TRIANGLES,6,d.UNSIGNED_SHORT,0),M.positionScreen.copy(R),M.customUpdateCallback?M.customUpdateCallback(M):M.updateLensFlares(),d.uniform1i(l.renderType,2),p.enable(d.BLEND);for(var w=0,S=M.lensFlares.length;S>w;w++){var A=M.lensFlares[w];A.opacity>.001&&A.scale>.001&&(R.x=A.x,R.y=A.y,R.z=A.z,T=A.size*A.scale/f.w,y.x=T*m,y.y=T,d.uniform3f(l.screenPosition,R.x,R.y,R.z),d.uniform2f(l.scale,y.x,y.y),d.uniform1f(l.rotation,A.rotation),d.uniform1f(l.opacity,A.opacity),d.uniform3f(l.color,A.color.r,A.color.g,A.color.b),p.setBlending(A.blending,A.blendEquation,A.blendSrc,A.blendDst),e.setTexture2D(A.texture,1),d.drawElements(d.TRIANGLES,6,d.UNSIGNED_SHORT,0))}}}p.enable(d.CULL_FACE),p.enable(d.DEPTH_TEST),p.setDepthWrite(!0),e.resetGLState()}}},THREE.SpritePlugin=function(e,t){function r(){var e=new Float32Array([-.5,-.5,0,0,.5,-.5,1,0,.5,.5,1,1,-.5,.5,0,1]),t=new Uint16Array([0,1,2,0,2,3]);a=u.createBuffer(),o=u.createBuffer(),u.bindBuffer(u.ARRAY_BUFFER,a),u.bufferData(u.ARRAY_BUFFER,e,u.STATIC_DRAW),u.bindBuffer(u.ELEMENT_ARRAY_BUFFER,o),u.bufferData(u.ELEMENT_ARRAY_BUFFER,t,u.STATIC_DRAW),s=n(),c={position:u.getAttribLocation(s,"position"),uv:u.getAttribLocation(s,"uv")},l={uvOffset:u.getUniformLocation(s,"uvOffset"),uvScale:u.getUniformLocation(s,"uvScale"),rotation:u.getUniformLocation(s,"rotation"),scale:u.getUniformLocation(s,"scale"),color:u.getUniformLocation(s,"color"),map:u.getUniformLocation(s,"map"),opacity:u.getUniformLocation(s,"opacity"),modelViewMatrix:u.getUniformLocation(s,"modelViewMatrix"),projectionMatrix:u.getUniformLocation(s,"projectionMatrix"),fogType:u.getUniformLocation(s,"fogType"),fogDensity:u.getUniformLocation(s,"fogDensity"),fogNear:u.getUniformLocation(s,"fogNear"),fogFar:u.getUniformLocation(s,"fogFar"),fogColor:u.getUniformLocation(s,"fogColor"),alphaTest:u.getUniformLocation(s,"alphaTest")};var r=document.createElement("canvas");r.width=8,r.height=8;var i=r.getContext("2d");i.fillStyle="white",i.fillRect(0,0,8,8),h=new THREE.Texture(r),h.needsUpdate=!0}function n(){var t=u.createProgram(),r=u.createShader(u.VERTEX_SHADER),n=u.createShader(u.FRAGMENT_SHADER);return u.shaderSource(r,["precision "+e.getPrecision()+" float;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform float rotation;","uniform vec2 scale;","uniform vec2 uvOffset;","uniform vec2 uvScale;","attribute vec2 position;","attribute vec2 uv;","varying vec2 vUV;","void main() {","vUV = uvOffset + uv * uvScale;","vec2 alignedPosition = position * scale;","vec2 rotatedPosition;","rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;","rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;","vec4 finalPosition;","finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );","finalPosition.xy += rotatedPosition;","finalPosition = projectionMatrix * finalPosition;","gl_Position = finalPosition;","}"].join("\n")),u.shaderSource(n,["precision "+e.getPrecision()+" float;","uniform vec3 color;","uniform sampler2D map;","uniform float opacity;","uniform int fogType;","uniform vec3 fogColor;","uniform float fogDensity;","uniform float fogNear;","uniform float fogFar;","uniform float alphaTest;","varying vec2 vUV;","void main() {","vec4 texture = texture2D( map, vUV );","if ( texture.a < alphaTest ) discard;","gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );","if ( fogType > 0 ) {","float depth = gl_FragCoord.z / gl_FragCoord.w;","float fogFactor = 0.0;","if ( fogType == 1 ) {","fogFactor = smoothstep( fogNear, fogFar, depth );","} else {","const float LOG2 = 1.442695;","fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );","fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );","}","gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );","}","}"].join("\n")),u.compileShader(r),u.compileShader(n),u.attachShader(t,r),u.attachShader(t,n),u.linkProgram(t),t}function i(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:t.id-e.id}var a,o,s,c,l,h,u=e.context,d=e.state,p=new THREE.Vector3,f=new THREE.Quaternion,E=new THREE.Vector3;this.render=function(n,m){if(0!==t.length){void 0===s&&r(),u.useProgram(s),d.initAttributes(),d.enableAttribute(c.position),d.enableAttribute(c.uv),d.disableUnusedAttributes(),d.disable(u.CULL_FACE),d.enable(u.BLEND),u.bindBuffer(u.ARRAY_BUFFER,a),u.vertexAttribPointer(c.position,2,u.FLOAT,!1,16,0),u.vertexAttribPointer(c.uv,2,u.FLOAT,!1,16,8),u.bindBuffer(u.ELEMENT_ARRAY_BUFFER,o),u.uniformMatrix4fv(l.projectionMatrix,!1,m.projectionMatrix.elements),d.activeTexture(u.TEXTURE0),u.uniform1i(l.map,0);var g=0,v=0,T=n.fog;T?(u.uniform3f(l.fogColor,T.color.r,T.color.g,T.color.b),T instanceof THREE.Fog?(u.uniform1f(l.fogNear,T.near),u.uniform1f(l.fogFar,T.far),u.uniform1i(l.fogType,1),g=1,v=1):T instanceof THREE.FogExp2&&(u.uniform1f(l.fogDensity,T.density),u.uniform1i(l.fogType,2),g=2,v=2)):(u.uniform1i(l.fogType,0),g=0,v=0);for(var y=0,R=t.length;R>y;y++){var x=t[y];x.modelViewMatrix.multiplyMatrices(m.matrixWorldInverse,x.matrixWorld),x.z=-x.modelViewMatrix.elements[14]}t.sort(i);for(var H=[],y=0,R=t.length;R>y;y++){var x=t[y],b=x.material;u.uniform1f(l.alphaTest,b.alphaTest),u.uniformMatrix4fv(l.modelViewMatrix,!1,x.modelViewMatrix.elements),x.matrixWorld.decompose(p,f,E),H[0]=E.x,H[1]=E.y;var _=0;n.fog&&b.fog&&(_=v),g!==_&&(u.uniform1i(l.fogType,_),g=_),null!==b.map?(u.uniform2f(l.uvOffset,b.map.offset.x,b.map.offset.y),u.uniform2f(l.uvScale,b.map.repeat.x,b.map.repeat.y)):(u.uniform2f(l.uvOffset,0,0),u.uniform2f(l.uvScale,1,1)),u.uniform1f(l.opacity,b.opacity),u.uniform3f(l.color,b.color.r,b.color.g,b.color.b),u.uniform1f(l.rotation,b.rotation),u.uniform2fv(l.scale,H),d.setBlending(b.blending,b.blendEquation,b.blendSrc,b.blendDst),d.setDepthTest(b.depthTest),d.setDepthWrite(b.depthWrite),b.map?e.setTexture2D(b.map,0):e.setTexture2D(h,0),u.drawElements(u.TRIANGLES,6,u.UNSIGNED_SHORT,0)}d.enable(u.CULL_FACE),e.resetGLState()}}},Object.assign(THREE,{Face4:function(e,t,r,n,i,a,o){return console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead."),new THREE.Face3(e,t,r,i,a,o)},LineStrip:0,LinePieces:1,MeshFaceMaterial:THREE.MultiMaterial,PointCloud:function(e,t){return console.warn("THREE.PointCloud has been renamed to THREE.Points."),new THREE.Points(e,t)},Particle:THREE.Sprite,ParticleSystem:function(e,t){return console.warn("THREE.ParticleSystem has been renamed to THREE.Points."),new THREE.Points(e,t)},PointCloudMaterial:function(e){return console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."),new THREE.PointsMaterial(e)},ParticleBasicMaterial:function(e){return console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."),new THREE.PointsMaterial(e)},ParticleSystemMaterial:function(e){return console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."),new THREE.PointsMaterial(e)},Vertex:function(e,t,r){return console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead."),new THREE.Vector3(e,t,r)}}),Object.assign(THREE.Box2.prototype,{empty:function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(e){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)}}),Object.assign(THREE.Box3.prototype,{empty:function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(e){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},isIntersectionSphere:function(e){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(e)}}),Object.assign(THREE.Matrix3.prototype,{
multiplyVector3:function(e){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),e.applyMatrix3(this)},multiplyVector3Array:function(e){return console.warn("THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead."),this.applyToVector3Array(e)}}),Object.assign(THREE.Matrix4.prototype,{extractPosition:function(e){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(e)},setRotationFromQuaternion:function(e){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(e)},multiplyVector3:function(e){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead."),e.applyProjection(this)},multiplyVector4:function(e){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},multiplyVector3Array:function(e){return console.warn("THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead."),this.applyToVector3Array(e)},rotateAxis:function(e){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),e.transformDirection(this)},crossVector:function(e){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},translate:function(e){console.error("THREE.Matrix4: .translate() has been removed.")},rotateX:function(e){console.error("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(e){console.error("THREE.Matrix4: .rotateY() has been removed.")},rotateZ:function(e){console.error("THREE.Matrix4: .rotateZ() has been removed.")},rotateByAxis:function(e,t){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")}}),Object.assign(THREE.Plane.prototype,{isIntersectionLine:function(e){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(e)}}),Object.assign(THREE.Quaternion.prototype,{multiplyVector3:function(e){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),e.applyQuaternion(this)}}),Object.assign(THREE.Ray.prototype,{isIntersectionBox:function(e){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},isIntersectionPlane:function(e){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(e)},isIntersectionSphere:function(e){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(e)}}),Object.assign(THREE.Vector3.prototype,{setEulerFromRotationMatrix:function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},setEulerFromQuaternion:function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},getPositionFromMatrix:function(e){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(e)},getScaleFromMatrix:function(e){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(e)},getColumnFromMatrix:function(e,t){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(t,e)}}),Object.assign(THREE.Object3D.prototype,{getChildByName:function(e){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(e)},renderDepth:function(e){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},translate:function(e,t){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(t,e)}}),Object.defineProperties(THREE.Object3D.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(e){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=e}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(e){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),Object.defineProperties(THREE.LOD.prototype,{objects:{get:function(){return console.warn("THREE.LOD: .objects has been renamed to .levels."),this.levels}}}),THREE.PerspectiveCamera.prototype.setLens=function(e,t){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==t&&(this.filmGauge=t),this.setFocalLength(e)},Object.defineProperties(THREE.Light.prototype,{onlyShadow:{set:function(e){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(e){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=e}},shadowCameraLeft:{set:function(e){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=e}},shadowCameraRight:{set:function(e){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=e}},shadowCameraTop:{set:function(e){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=e}},shadowCameraBottom:{set:function(e){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=e}},shadowCameraNear:{set:function(e){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=e}},shadowCameraFar:{set:function(e){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=e}},shadowCameraVisible:{set:function(e){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(e){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=e}},shadowDarkness:{set:function(e){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(e){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=e}},shadowMapHeight:{set:function(e){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=e}}}),Object.defineProperties(THREE.BufferAttribute.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Please use .count."),this.array.length}}}),Object.assign(THREE.BufferGeometry.prototype,{addIndex:function(e){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(e)},addDrawCall:function(e,t,r){void 0!==r&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(e,t)},clearDrawCalls:function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},computeTangents:function(){console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")},computeOffsets:function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")}}),Object.defineProperties(THREE.BufferGeometry.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),Object.defineProperties(THREE.Material.prototype,{wrapAround:{get:function(){console.warn("THREE."+this.type+": .wrapAround has been removed.")},set:function(e){console.warn("THREE."+this.type+": .wrapAround has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE."+this.type+": .wrapRGB has been removed."),new THREE.Color}}}),Object.defineProperties(THREE.MeshPhongMaterial.prototype,{metal:{get:function(){return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."),!1},set:function(e){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")}}}),Object.defineProperties(THREE.ShaderMaterial.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(e){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=e}}}),THREE.EventDispatcher.prototype=Object.assign(Object.create({constructor:THREE.EventDispatcher,apply:function(e){console.warn("THREE.EventDispatcher: .apply is deprecated, just inherit or Object.assign the prototype to mix-in."),Object.assign(e,this)}}),THREE.EventDispatcher.prototype),Object.assign(THREE.WebGLRenderer.prototype,{supportsFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},supportsHalfFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},supportsStandardDerivatives:function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},supportsCompressedTextureS3TC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},supportsCompressedTexturePVRTC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},supportsBlendMinMax:function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},supportsVertexTextures:function(){return this.capabilities.vertexTextures},supportsInstancedArrays:function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},enableScissorTest:function(e){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(e)},initMaterial:function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},addPrePlugin:function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},addPostPlugin:function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},updateShadowMap:function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")}}),Object.defineProperties(THREE.WebGLRenderer.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=e}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=e}},shadowMapCullFace:{get:function(){return this.shadowMap.cullFace},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace."),this.shadowMap.cullFace=e}}}),Object.defineProperties(THREE.WebGLShadowMap.prototype,{cullFace:{get:function(){return this.renderReverseSided?THREE.CullFaceFront:THREE.CullFaceBack},set:function(e){var t=e!==THREE.CullFaceBack;console.warn("WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to "+t+"."),this.renderReverseSided=t}}}),Object.defineProperties(THREE.WebGLRenderTarget.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(e){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=e}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(e){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=e}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(e){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=e}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(e){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=e}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(e){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=e}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(e){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=e}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(e){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=e}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(e){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=e}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(e){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=e}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(e){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=e}}}),Object.assign(THREE.Audio.prototype,{load:function(e){console.warn("THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.");var t=this,r=new THREE.AudioLoader;return r.load(e,function(e){t.setBuffer(e)}),this}}),Object.assign(THREE.AudioAnalyser.prototype,{getData:function(e){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()}}),THREE.GeometryUtils={merge:function(e,t,r){console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");var n;t instanceof THREE.Mesh&&(t.matrixAutoUpdate&&t.updateMatrix(),n=t.matrix,t=t.geometry),e.merge(t,n,r)},center:function(e){return console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead."),e.center()}},THREE.ImageUtils={crossOrigin:void 0,loadTexture:function(e,t,r,n){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");var i=new THREE.TextureLoader;i.setCrossOrigin(this.crossOrigin);var a=i.load(e,r,void 0,n);return t&&(a.mapping=t),a},loadTextureCube:function(e,t,r,n){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");var i=new THREE.CubeTextureLoader;i.setCrossOrigin(this.crossOrigin);var a=i.load(e,r,void 0,n);return t&&(a.mapping=t),a},loadCompressedTexture:function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},loadCompressedTextureCube:function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")}},THREE.Projector=function(){console.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js."),this.projectVector=function(e,t){console.warn("THREE.Projector: .projectVector() is now vector.project()."),e.project(t)},this.unprojectVector=function(e,t){console.warn("THREE.Projector: .unprojectVector() is now vector.unproject()."),e.unproject(t)},this.pickingRay=function(e,t){console.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().")}},THREE.CanvasRenderer=function(){console.error("THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js"),this.domElement=document.createElement("canvas"),this.clear=function(){},this.render=function(){},this.setClearColor=function(){},this.setSize=function(){}},THREE.CurveUtils={tangentQuadraticBezier:function(e,t,r,n){return 2*(1-e)*(r-t)+2*e*(n-r)},tangentCubicBezier:function(e,t,r,n,i){return-3*t*(1-e)*(1-e)+3*r*(1-e)*(1-e)-6*e*r*(1-e)+6*e*n*(1-e)-3*e*e*n+3*e*e*i},tangentSpline:function(e,t,r,n,i){var a=6*e*e-6*e,o=3*e*e-4*e+1,s=-6*e*e+6*e,c=3*e*e-2*e;return a+o+s+c},interpolate:function(e,t,r,n,i){var a=.5*(r-e),o=.5*(n-t),s=i*i,c=i*s;return(2*t-2*r+a+o)*c+(-3*t+3*r-2*a-o)*s+a*i+t}},THREE.SceneUtils={createMultiMaterialObject:function(e,t){for(var r=new THREE.Group,n=0,i=t.length;i>n;n++)r.add(new THREE.Mesh(e,t[n]));return r},detach:function(e,t,r){e.applyMatrix(t.matrixWorld),t.remove(e),r.add(e)},attach:function(e,t,r){var n=new THREE.Matrix4;n.getInverse(r.matrixWorld),e.applyMatrix(n),t.remove(e),r.add(e)}},THREE.ShapeUtils={area:function(e){for(var t=e.length,r=0,n=t-1,i=0;t>i;n=i++)r+=e[n].x*e[i].y-e[i].x*e[n].y;return.5*r},triangulate:function(){function e(e,t,r,n,i,a){var o,s,c,l,h,u,d,p,f;if(s=e[a[t]].x,c=e[a[t]].y,l=e[a[r]].x,h=e[a[r]].y,u=e[a[n]].x,d=e[a[n]].y,Number.EPSILON>(l-s)*(d-c)-(h-c)*(u-s))return!1;var E,m,g,v,T,y,R,x,H,b,_,M,w,S,A;for(E=u-l,m=d-h,g=s-u,v=c-d,T=l-s,y=h-c,o=0;i>o;o++)if(p=e[a[o]].x,f=e[a[o]].y,!(p===s&&f===c||p===l&&f===h||p===u&&f===d)&&(R=p-s,x=f-c,H=p-l,b=f-h,_=p-u,M=f-d,A=E*b-m*H,w=T*x-y*R,S=g*M-v*_,A>=-Number.EPSILON&&S>=-Number.EPSILON&&w>=-Number.EPSILON))return!1;return!0}return function(t,r){var n=t.length;if(3>n)return null;var i,a,o,s=[],c=[],l=[];if(THREE.ShapeUtils.area(t)>0)for(a=0;n>a;a++)c[a]=a;else for(a=0;n>a;a++)c[a]=n-1-a;var h=n,u=2*h;for(a=h-1;h>2;){if(u--<=0)return console.warn("THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()"),r?l:s;if(i=a,i>=h&&(i=0),a=i+1,a>=h&&(a=0),o=a+1,o>=h&&(o=0),e(t,i,a,o,h,c)){var d,p,f,E,m;for(d=c[i],p=c[a],f=c[o],s.push([t[d],t[p],t[f]]),l.push([c[i],c[a],c[o]]),E=a,m=a+1;h>m;E++,m++)c[E]=c[m];h--,u=2*h}}return r?l:s}}(),triangulateShape:function(e,t){function r(e,t,r){return e.x!==t.x?e.x<t.x?e.x<=r.x&&r.x<=t.x:t.x<=r.x&&r.x<=e.x:e.y<t.y?e.y<=r.y&&r.y<=t.y:t.y<=r.y&&r.y<=e.y}function n(e,t,n,i,a){var o=t.x-e.x,s=t.y-e.y,c=i.x-n.x,l=i.y-n.y,h=e.x-n.x,u=e.y-n.y,d=s*c-o*l,p=s*h-o*u;if(Math.abs(d)>Number.EPSILON){var f;if(d>0){if(0>p||p>d)return[];if(f=l*h-c*u,0>f||f>d)return[]}else{if(p>0||d>p)return[];if(f=l*h-c*u,f>0||d>f)return[]}if(0===f)return!a||0!==p&&p!==d?[e]:[];if(f===d)return!a||0!==p&&p!==d?[t]:[];if(0===p)return[n];if(p===d)return[i];var E=f/d;return[{x:e.x+E*o,y:e.y+E*s}]}if(0!==p||l*h!==c*u)return[];var m=0===o&&0===s,g=0===c&&0===l;if(m&&g)return e.x!==n.x||e.y!==n.y?[]:[e];if(m)return r(n,i,e)?[e]:[];if(g)return r(e,t,n)?[n]:[];var v,T,y,R,x,H,b,_;return 0!==o?(e.x<t.x?(v=e,y=e.x,T=t,R=t.x):(v=t,y=t.x,T=e,R=e.x),n.x<i.x?(x=n,b=n.x,H=i,_=i.x):(x=i,b=i.x,H=n,_=n.x)):(e.y<t.y?(v=e,y=e.y,T=t,R=t.y):(v=t,y=t.y,T=e,R=e.y),n.y<i.y?(x=n,b=n.y,H=i,_=i.y):(x=i,b=i.y,H=n,_=n.y)),b>=y?b>R?[]:R===b?a?[]:[x]:_>=R?[x,T]:[x,H]:y>_?[]:y===_?a?[]:[v]:_>=R?[v,T]:[v,H]}function i(e,t,r,n){var i=t.x-e.x,a=t.y-e.y,o=r.x-e.x,s=r.y-e.y,c=n.x-e.x,l=n.y-e.y,h=i*s-a*o,u=i*l-a*c;if(Math.abs(h)>Number.EPSILON){var d=c*s-l*o;return h>0?u>=0&&d>=0:u>=0||d>=0}return u>0}function a(e,t){function r(e,t){var r=v.length-1,n=e-1;0>n&&(n=r);var a=e+1;a>r&&(a=0);var o=i(v[e],v[n],v[a],s[t]);if(!o)return!1;var c=s.length-1,l=t-1;0>l&&(l=c);var h=t+1;return h>c&&(h=0),o=i(s[t],s[l],s[h],v[e]),!!o}function a(e,t){var r,i,a;for(r=0;r<v.length;r++)if(i=r+1,i%=v.length,a=n(e,t,v[r],v[i],!0),a.length>0)return!0;return!1}function o(e,r){var i,a,o,s,c;for(i=0;i<T.length;i++)for(a=t[T[i]],o=0;o<a.length;o++)if(s=o+1,s%=a.length,c=n(e,r,a[o],a[s],!0),c.length>0)return!0;return!1}for(var s,c,l,h,u,d,p,f,E,m,g,v=e.concat(),T=[],y=[],R=0,x=t.length;x>R;R++)T.push(R);for(var H=0,b=2*T.length;T.length>0;){if(b--,0>b){console.log("Infinite Loop! Holes left:"+T.length+", Probably Hole outside Shape!");break}for(l=H;l<v.length;l++){h=v[l],c=-1;for(var R=0;R<T.length;R++)if(d=T[R],p=h.x+":"+h.y+":"+d,void 0===y[p]){s=t[d];for(var _=0;_<s.length;_++)if(u=s[_],r(l,_)&&!a(h,u)&&!o(h,u)){c=_,T.splice(R,1),f=v.slice(0,l+1),E=v.slice(l),m=s.slice(c),g=s.slice(0,c+1),v=f.concat(m).concat(g).concat(E),H=l;break}if(c>=0)break;y[p]=!0}if(c>=0)break}}return v}for(var o,s,c,l,h,u,d={},p=e.concat(),f=0,E=t.length;E>f;f++)Array.prototype.push.apply(p,t[f]);for(o=0,s=p.length;s>o;o++)h=p[o].x+":"+p[o].y,void 0!==d[h]&&console.warn("THREE.Shape: Duplicate point",h),d[h]=o;var m=a(e,t),g=THREE.ShapeUtils.triangulate(m,!1);for(o=0,s=g.length;s>o;o++)for(l=g[o],c=0;3>c;c++)h=l[c].x+":"+l[c].y,u=d[h],void 0!==u&&(l[c]=u);return g.concat()},isClockWise:function(e){return THREE.ShapeUtils.area(e)<0},b2:function(){function e(e,t){var r=1-e;return r*r*t}function t(e,t){return 2*(1-e)*e*t}function r(e,t){return e*e*t}return function(n,i,a,o){return e(n,i)+t(n,a)+r(n,o)}}(),b3:function(){function e(e,t){var r=1-e;return r*r*r*t}function t(e,t){var r=1-e;return 3*r*r*e*t}function r(e,t){var r=1-e;return 3*r*e*e*t}function n(e,t){return e*e*e*t}return function(i,a,o,s,c){return e(i,a)+t(i,o)+r(i,s)+n(i,c)}}()},THREE.Curve=function(){},THREE.Curve.prototype={constructor:THREE.Curve,getPoint:function(e){return console.warn("THREE.Curve: Warning, getPoint() not implemented!"),null},getPointAt:function(e){var t=this.getUtoTmapping(e);return this.getPoint(t)},getPoints:function(e){e||(e=5);var t,r=[];for(t=0;e>=t;t++)r.push(this.getPoint(t/e));return r},getSpacedPoints:function(e){e||(e=5);var t,r=[];for(t=0;e>=t;t++)r.push(this.getPointAt(t/e));return r},getLength:function(){var e=this.getLengths();return e[e.length-1]},getLengths:function(e){if(e||(e=this.__arcLengthDivisions?this.__arcLengthDivisions:200),this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var t,r,n=[],i=this.getPoint(0),a=0;for(n.push(0),r=1;e>=r;r++)t=this.getPoint(r/e),a+=t.distanceTo(i),n.push(a),i=t;return this.cacheArcLengths=n,n},updateArcLengths:function(){this.needsUpdate=!0,this.getLengths()},getUtoTmapping:function(e,t){var r,n=this.getLengths(),i=0,a=n.length;r=t?t:e*n[a-1];for(var o,s=0,c=a-1;c>=s;)if(i=Math.floor(s+(c-s)/2),o=n[i]-r,0>o)s=i+1;else{if(!(o>0)){c=i;break}c=i-1}if(i=c,n[i]===r){var l=i/(a-1);return l}var h=n[i],u=n[i+1],d=u-h,p=(r-h)/d,l=(i+p)/(a-1);return l},getTangent:function(e){var t=1e-4,r=e-t,n=e+t;0>r&&(r=0),n>1&&(n=1);var i=this.getPoint(r),a=this.getPoint(n),o=a.clone().sub(i);return o.normalize()},getTangentAt:function(e){var t=this.getUtoTmapping(e);return this.getTangent(t)}},THREE.Curve.create=function(e,t){return e.prototype=Object.create(THREE.Curve.prototype),e.prototype.constructor=e,e.prototype.getPoint=t,e},THREE.CurvePath=function(){this.curves=[],this.autoClose=!1},THREE.CurvePath.prototype=Object.assign(Object.create(THREE.Curve.prototype),{constructor:THREE.CurvePath,add:function(e){this.curves.push(e)},closePath:function(){var e=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);e.equals(t)||this.curves.push(new THREE.LineCurve(t,e))},getPoint:function(e){for(var t=e*this.getLength(),r=this.getCurveLengths(),n=0;n<r.length;){if(r[n]>=t){var i=r[n]-t,a=this.curves[n],o=1-i/a.getLength();return a.getPointAt(o)}n++}return null},getLength:function(){var e=this.getCurveLengths();return e[e.length-1]},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var e=[],t=0,r=0,n=this.curves.length;n>r;r++)t+=this.curves[r].getLength(),e.push(t);return this.cacheLengths=e,e},createPointsGeometry:function(e){var t=this.getPoints(e);return this.createGeometry(t)},createSpacedPointsGeometry:function(e){var t=this.getSpacedPoints(e);return this.createGeometry(t)},createGeometry:function(e){for(var t=new THREE.Geometry,r=0,n=e.length;n>r;r++){var i=e[r];t.vertices.push(new THREE.Vector3(i.x,i.y,i.z||0))}return t}}),THREE.Font=function(e){this.data=e},Object.assign(THREE.Font.prototype,{generateShapes:function(e,t,r){function n(e){for(var r=String(e).split(""),n=t/a.resolution,o=0,s=[],c=0;c<r.length;c++){var l=i(r[c],n,o);o+=l.offset,s.push(l.path)}return s}function i(e,t,n){var i=a.glyphs[e]||a.glyphs["?"];if(i){var o,s,c,l,h,u,d,p,f,E,m,g=new THREE.Path,v=[],T=THREE.ShapeUtils.b2,y=THREE.ShapeUtils.b3;if(i.o)for(var R=i._cachedOutline||(i._cachedOutline=i.o.split(" ")),x=0,H=R.length;H>x;){var b=R[x++];switch(b){case"m":o=R[x++]*t+n,s=R[x++]*t,g.moveTo(o,s);break;case"l":o=R[x++]*t+n,s=R[x++]*t,g.lineTo(o,s);break;case"q":if(c=R[x++]*t+n,l=R[x++]*t,d=R[x++]*t+n,p=R[x++]*t,g.quadraticCurveTo(d,p,c,l),m=v[v.length-1]){h=m.x,u=m.y;for(var _=1;r>=_;_++){var M=_/r;T(M,h,d,c),T(M,u,p,l)}}break;case"b":if(c=R[x++]*t+n,l=R[x++]*t,d=R[x++]*t+n,p=R[x++]*t,f=R[x++]*t+n,E=R[x++]*t,g.bezierCurveTo(d,p,f,E,c,l),m=v[v.length-1]){h=m.x,u=m.y;for(var _=1;r>=_;_++){var M=_/r;y(M,h,d,f,c),y(M,u,p,E,l)}}}}return{offset:i.ha*t,path:g}}}void 0===t&&(t=100),void 0===r&&(r=4);for(var a=this.data,o=n(e),s=[],c=0,l=o.length;l>c;c++)Array.prototype.push.apply(s,o[c].toShapes());return s}}),THREE.Path=function(e){THREE.CurvePath.call(this),this.actions=[],e&&this.fromPoints(e)},THREE.Path.prototype=Object.assign(Object.create(THREE.CurvePath.prototype),{constructor:THREE.Path,fromPoints:function(e){this.moveTo(e[0].x,e[0].y);for(var t=1,r=e.length;r>t;t++)this.lineTo(e[t].x,e[t].y)},moveTo:function(e,t){this.actions.push({action:"moveTo",args:[e,t]})},lineTo:function(e,t){var r=this.actions[this.actions.length-1].args,n=r[r.length-2],i=r[r.length-1],a=new THREE.LineCurve(new THREE.Vector2(n,i),new THREE.Vector2(e,t));this.curves.push(a),this.actions.push({action:"lineTo",args:[e,t]})},quadraticCurveTo:function(e,t,r,n){var i=this.actions[this.actions.length-1].args,a=i[i.length-2],o=i[i.length-1],s=new THREE.QuadraticBezierCurve(new THREE.Vector2(a,o),new THREE.Vector2(e,t),new THREE.Vector2(r,n));this.curves.push(s),this.actions.push({action:"quadraticCurveTo",args:[e,t,r,n]})},bezierCurveTo:function(e,t,r,n,i,a){var o=this.actions[this.actions.length-1].args,s=o[o.length-2],c=o[o.length-1],l=new THREE.CubicBezierCurve(new THREE.Vector2(s,c),new THREE.Vector2(e,t),new THREE.Vector2(r,n),new THREE.Vector2(i,a));this.curves.push(l),this.actions.push({action:"bezierCurveTo",args:[e,t,r,n,i,a]})},splineThru:function(e){var t=Array.prototype.slice.call(arguments),r=this.actions[this.actions.length-1].args,n=r[r.length-2],i=r[r.length-1],a=[new THREE.Vector2(n,i)];Array.prototype.push.apply(a,e);var o=new THREE.SplineCurve(a);this.curves.push(o),this.actions.push({action:"splineThru",args:t})},arc:function(e,t,r,n,i,a){var o=this.actions[this.actions.length-1].args,s=o[o.length-2],c=o[o.length-1];this.absarc(e+s,t+c,r,n,i,a)},absarc:function(e,t,r,n,i,a){this.absellipse(e,t,r,r,n,i,a)},ellipse:function(e,t,r,n,i,a,o,s){var c=this.actions[this.actions.length-1].args,l=c[c.length-2],h=c[c.length-1];this.absellipse(e+l,t+h,r,n,i,a,o,s)},absellipse:function(e,t,r,n,i,a,o,s){var c=[e,t,r,n,i,a,o,s||0],l=new THREE.EllipseCurve(e,t,r,n,i,a,o,s);this.curves.push(l);var h=l.getPoint(1);c.push(h.x),c.push(h.y),this.actions.push({action:"ellipse",args:c})},getSpacedPoints:function(e){e||(e=40);for(var t=[],r=0;e>r;r++)t.push(this.getPoint(r/e));return this.autoClose&&t.push(t[0]),t},getPoints:function(e){e=e||12;for(var t,r,n,i,a,o,s,c,l,h,u,d=THREE.ShapeUtils.b2,p=THREE.ShapeUtils.b3,f=[],E=0,m=this.actions.length;m>E;E++){var g=this.actions[E],v=g.action,T=g.args;switch(v){case"moveTo":f.push(new THREE.Vector2(T[0],T[1]));break;case"lineTo":f.push(new THREE.Vector2(T[0],T[1]));break;case"quadraticCurveTo":t=T[2],r=T[3],a=T[0],o=T[1],f.length>0?(l=f[f.length-1],s=l.x,c=l.y):(l=this.actions[E-1].args,s=l[l.length-2],c=l[l.length-1]);for(var y=1;e>=y;y++){var R=y/e;h=d(R,s,a,t),u=d(R,c,o,r),f.push(new THREE.Vector2(h,u))}break;case"bezierCurveTo":t=T[4],r=T[5],a=T[0],o=T[1],n=T[2],i=T[3],f.length>0?(l=f[f.length-1],s=l.x,c=l.y):(l=this.actions[E-1].args,s=l[l.length-2],c=l[l.length-1]);for(var y=1;e>=y;y++){var R=y/e;h=p(R,s,a,n,t),u=p(R,c,o,i,r),f.push(new THREE.Vector2(h,u))}break;case"splineThru":l=this.actions[E-1].args;var x=new THREE.Vector2(l[l.length-2],l[l.length-1]),H=[x],b=e*T[0].length;H=H.concat(T[0]);for(var _=new THREE.SplineCurve(H),y=1;b>=y;y++)f.push(_.getPointAt(y/b));break;case"arc":for(var M,w=T[0],S=T[1],A=T[2],L=T[3],C=T[4],P=!!T[5],I=C-L,B=2*e,y=1;B>=y;y++){var R=y/B;P||(R=1-R),M=L+R*I,h=w+A*Math.cos(M),u=S+A*Math.sin(M),f.push(new THREE.Vector2(h,u))}break;case"ellipse":var M,D,O,w=T[0],S=T[1],U=T[2],N=T[3],L=T[4],C=T[5],P=!!T[6],F=T[7],I=C-L,B=2*e;0!==F&&(D=Math.cos(F),O=Math.sin(F));for(var y=1;B>=y;y++){var R=y/B;if(P||(R=1-R),M=L+R*I,h=w+U*Math.cos(M),u=S+N*Math.sin(M),0!==F){var V=h,G=u;h=(V-w)*D-(G-S)*O+w,u=(V-w)*O+(G-S)*D+S}f.push(new THREE.Vector2(h,u))}}}var k=f[f.length-1];return Math.abs(k.x-f[0].x)<Number.EPSILON&&Math.abs(k.y-f[0].y)<Number.EPSILON&&f.splice(f.length-1,1),this.autoClose&&f.push(f[0]),f},toShapes:function(e,t){function r(e){for(var t=[],r=new THREE.Path,n=0,i=e.length;i>n;n++){var a=e[n],o=a.args,s=a.action;"moveTo"===s&&0!==r.actions.length&&(t.push(r),r=new THREE.Path),r[s].apply(r,o)}return 0!==r.actions.length&&t.push(r),t}function n(e){for(var t=[],r=0,n=e.length;n>r;r++){var i=e[r],a=new THREE.Shape;a.actions=i.actions,a.curves=i.curves,t.push(a)}return t}function i(e,t){for(var r=t.length,n=!1,i=r-1,a=0;r>a;i=a++){var o=t[i],s=t[a],c=s.x-o.x,l=s.y-o.y;if(Math.abs(l)>Number.EPSILON){if(0>l&&(o=t[a],c=-c,s=t[i],l=-l),e.y<o.y||e.y>s.y)continue;if(e.y===o.y){if(e.x===o.x)return!0}else{var h=l*(e.x-o.x)-c*(e.y-o.y);if(0===h)return!0;if(0>h)continue;n=!n}}else{if(e.y!==o.y)continue;if(s.x<=e.x&&e.x<=o.x||o.x<=e.x&&e.x<=s.x)return!0}}return n}var a=THREE.ShapeUtils.isClockWise,o=r(this.actions);if(0===o.length)return[];if(t===!0)return n(o);var s,c,l,h=[];if(1===o.length)return c=o[0],l=new THREE.Shape,l.actions=c.actions,l.curves=c.curves,h.push(l),h;var u=!a(o[0].getPoints());u=e?!u:u;var d,p=[],f=[],E=[],m=0;f[m]=void 0,E[m]=[];for(var g=0,v=o.length;v>g;g++)c=o[g],d=c.getPoints(),s=a(d),s=e?!s:s,s?(!u&&f[m]&&m++,f[m]={s:new THREE.Shape,p:d},f[m].s.actions=c.actions,f[m].s.curves=c.curves,u&&m++,E[m]=[]):E[m].push({h:c,p:d[0]});if(!f[0])return n(o);if(f.length>1){for(var T=!1,y=[],R=0,x=f.length;x>R;R++)p[R]=[];for(var R=0,x=f.length;x>R;R++)for(var H=E[R],b=0;b<H.length;b++){for(var _=H[b],M=!0,w=0;w<f.length;w++)i(_.p,f[w].p)&&(R!==w&&y.push({
froms:R,tos:w,hole:b}),M?(M=!1,p[w].push(_)):T=!0);M&&p[R].push(_)}y.length>0&&(T||(E=p))}for(var S,g=0,A=f.length;A>g;g++){l=f[g].s,h.push(l),S=E[g];for(var L=0,C=S.length;C>L;L++)l.holes.push(S[L].h)}return h}}),THREE.Shape=function(){THREE.Path.apply(this,arguments),this.holes=[]},THREE.Shape.prototype=Object.assign(Object.create(THREE.Path.prototype),{constructor:THREE.Shape,extrude:function(e){return new THREE.ExtrudeGeometry(this,e)},makeGeometry:function(e){return new THREE.ShapeGeometry(this,e)},getPointsHoles:function(e){for(var t=[],r=0,n=this.holes.length;n>r;r++)t[r]=this.holes[r].getPoints(e);return t},extractAllPoints:function(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}},extractPoints:function(e){return this.extractAllPoints(e)}}),THREE.LineCurve=function(e,t){this.v1=e,this.v2=t},THREE.LineCurve.prototype=Object.create(THREE.Curve.prototype),THREE.LineCurve.prototype.constructor=THREE.LineCurve,THREE.LineCurve.prototype.getPoint=function(e){var t=this.v2.clone().sub(this.v1);return t.multiplyScalar(e).add(this.v1),t},THREE.LineCurve.prototype.getPointAt=function(e){return this.getPoint(e)},THREE.LineCurve.prototype.getTangent=function(e){var t=this.v2.clone().sub(this.v1);return t.normalize()},THREE.QuadraticBezierCurve=function(e,t,r){this.v0=e,this.v1=t,this.v2=r},THREE.QuadraticBezierCurve.prototype=Object.create(THREE.Curve.prototype),THREE.QuadraticBezierCurve.prototype.constructor=THREE.QuadraticBezierCurve,THREE.QuadraticBezierCurve.prototype.getPoint=function(e){var t=THREE.ShapeUtils.b2;return new THREE.Vector2(t(e,this.v0.x,this.v1.x,this.v2.x),t(e,this.v0.y,this.v1.y,this.v2.y))},THREE.QuadraticBezierCurve.prototype.getTangent=function(e){var t=THREE.CurveUtils.tangentQuadraticBezier;return new THREE.Vector2(t(e,this.v0.x,this.v1.x,this.v2.x),t(e,this.v0.y,this.v1.y,this.v2.y)).normalize()},THREE.CubicBezierCurve=function(e,t,r,n){this.v0=e,this.v1=t,this.v2=r,this.v3=n},THREE.CubicBezierCurve.prototype=Object.create(THREE.Curve.prototype),THREE.CubicBezierCurve.prototype.constructor=THREE.CubicBezierCurve,THREE.CubicBezierCurve.prototype.getPoint=function(e){var t=THREE.ShapeUtils.b3;return new THREE.Vector2(t(e,this.v0.x,this.v1.x,this.v2.x,this.v3.x),t(e,this.v0.y,this.v1.y,this.v2.y,this.v3.y))},THREE.CubicBezierCurve.prototype.getTangent=function(e){var t=THREE.CurveUtils.tangentCubicBezier;return new THREE.Vector2(t(e,this.v0.x,this.v1.x,this.v2.x,this.v3.x),t(e,this.v0.y,this.v1.y,this.v2.y,this.v3.y)).normalize()},THREE.SplineCurve=function(e){this.points=void 0==e?[]:e},THREE.SplineCurve.prototype=Object.create(THREE.Curve.prototype),THREE.SplineCurve.prototype.constructor=THREE.SplineCurve,THREE.SplineCurve.prototype.getPoint=function(e){var t=this.points,r=(t.length-1)*e,n=Math.floor(r),i=r-n,a=t[0===n?n:n-1],o=t[n],s=t[n>t.length-2?t.length-1:n+1],c=t[n>t.length-3?t.length-1:n+2],l=THREE.CurveUtils.interpolate;return new THREE.Vector2(l(a.x,o.x,s.x,c.x,i),l(a.y,o.y,s.y,c.y,i))},THREE.EllipseCurve=function(e,t,r,n,i,a,o,s){this.aX=e,this.aY=t,this.xRadius=r,this.yRadius=n,this.aStartAngle=i,this.aEndAngle=a,this.aClockwise=o,this.aRotation=s||0},THREE.EllipseCurve.prototype=Object.create(THREE.Curve.prototype),THREE.EllipseCurve.prototype.constructor=THREE.EllipseCurve,THREE.EllipseCurve.prototype.getPoint=function(e){var t=this.aEndAngle-this.aStartAngle;0>t&&(t+=2*Math.PI),t>2*Math.PI&&(t-=2*Math.PI);var r;r=this.aClockwise===!0?this.aEndAngle+(1-e)*(2*Math.PI-t):this.aStartAngle+e*t;var n=this.aX+this.xRadius*Math.cos(r),i=this.aY+this.yRadius*Math.sin(r);if(0!==this.aRotation){var a=Math.cos(this.aRotation),o=Math.sin(this.aRotation),s=n,c=i;n=(s-this.aX)*a-(c-this.aY)*o+this.aX,i=(s-this.aX)*o+(c-this.aY)*a+this.aY}return new THREE.Vector2(n,i)},THREE.ArcCurve=function(e,t,r,n,i,a){THREE.EllipseCurve.call(this,e,t,r,r,n,i,a)},THREE.ArcCurve.prototype=Object.create(THREE.EllipseCurve.prototype),THREE.ArcCurve.prototype.constructor=THREE.ArcCurve,THREE.LineCurve3=THREE.Curve.create(function(e,t){this.v1=e,this.v2=t},function(e){var t=new THREE.Vector3;return t.subVectors(this.v2,this.v1),t.multiplyScalar(e),t.add(this.v1),t}),THREE.QuadraticBezierCurve3=THREE.Curve.create(function(e,t,r){this.v0=e,this.v1=t,this.v2=r},function(e){var t=THREE.ShapeUtils.b2;return new THREE.Vector3(t(e,this.v0.x,this.v1.x,this.v2.x),t(e,this.v0.y,this.v1.y,this.v2.y),t(e,this.v0.z,this.v1.z,this.v2.z))}),THREE.CubicBezierCurve3=THREE.Curve.create(function(e,t,r,n){this.v0=e,this.v1=t,this.v2=r,this.v3=n},function(e){var t=THREE.ShapeUtils.b3;return new THREE.Vector3(t(e,this.v0.x,this.v1.x,this.v2.x,this.v3.x),t(e,this.v0.y,this.v1.y,this.v2.y,this.v3.y),t(e,this.v0.z,this.v1.z,this.v2.z,this.v3.z))}),THREE.SplineCurve3=THREE.Curve.create(function(e){console.warn("THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3"),this.points=void 0==e?[]:e},function(e){var t=this.points,r=(t.length-1)*e,n=Math.floor(r),i=r-n,a=t[0==n?n:n-1],o=t[n],s=t[n>t.length-2?t.length-1:n+1],c=t[n>t.length-3?t.length-1:n+2],l=THREE.CurveUtils.interpolate;return new THREE.Vector3(l(a.x,o.x,s.x,c.x,i),l(a.y,o.y,s.y,c.y,i),l(a.z,o.z,s.z,c.z,i))}),THREE.CatmullRomCurve3=function(){function e(){}var t=new THREE.Vector3,r=new e,n=new e,i=new e;return e.prototype.init=function(e,t,r,n){this.c0=e,this.c1=r,this.c2=-3*e+3*t-2*r-n,this.c3=2*e-2*t+r+n},e.prototype.initNonuniformCatmullRom=function(e,t,r,n,i,a,o){var s=(t-e)/i-(r-e)/(i+a)+(r-t)/a,c=(r-t)/a-(n-t)/(a+o)+(n-r)/o;s*=a,c*=a,this.init(t,r,s,c)},e.prototype.initCatmullRom=function(e,t,r,n,i){this.init(t,r,i*(r-e),i*(n-t))},e.prototype.calc=function(e){var t=e*e,r=t*e;return this.c0+this.c1*e+this.c2*t+this.c3*r},THREE.Curve.create(function(e){this.points=e||[],this.closed=!1},function(e){var a,o,s,c,l=this.points;c=l.length,2>c&&console.log("duh, you need at least 2 points"),a=(c-(this.closed?0:1))*e,o=Math.floor(a),s=a-o,this.closed?o+=o>0?0:(Math.floor(Math.abs(o)/l.length)+1)*l.length:0===s&&o===c-1&&(o=c-2,s=1);var h,u,d,p;if(this.closed||o>0?h=l[(o-1)%c]:(t.subVectors(l[0],l[1]).add(l[0]),h=t),u=l[o%c],d=l[(o+1)%c],this.closed||c>o+2?p=l[(o+2)%c]:(t.subVectors(l[c-1],l[c-2]).add(l[c-1]),p=t),void 0===this.type||"centripetal"===this.type||"chordal"===this.type){var f="chordal"===this.type?.5:.25,E=Math.pow(h.distanceToSquared(u),f),m=Math.pow(u.distanceToSquared(d),f),g=Math.pow(d.distanceToSquared(p),f);1e-4>m&&(m=1),1e-4>E&&(E=m),1e-4>g&&(g=m),r.initNonuniformCatmullRom(h.x,u.x,d.x,p.x,E,m,g),n.initNonuniformCatmullRom(h.y,u.y,d.y,p.y,E,m,g),i.initNonuniformCatmullRom(h.z,u.z,d.z,p.z,E,m,g)}else if("catmullrom"===this.type){var v=void 0!==this.tension?this.tension:.5;r.initCatmullRom(h.x,u.x,d.x,p.x,v),n.initCatmullRom(h.y,u.y,d.y,p.y,v),i.initCatmullRom(h.z,u.z,d.z,p.z,v)}var T=new THREE.Vector3(r.calc(s),n.calc(s),i.calc(s));return T})}(),THREE.ClosedSplineCurve3=function(e){console.warn("THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3."),THREE.CatmullRomCurve3.call(this,e),this.type="catmullrom",this.closed=!0},THREE.ClosedSplineCurve3.prototype=Object.create(THREE.CatmullRomCurve3.prototype),THREE.BoxGeometry=function(e,t,r,n,i,a){THREE.Geometry.call(this),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:r,widthSegments:n,heightSegments:i,depthSegments:a},this.fromBufferGeometry(new THREE.BoxBufferGeometry(e,t,r,n,i,a)),this.mergeVertices()},THREE.BoxGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.BoxGeometry.prototype.constructor=THREE.BoxGeometry,THREE.CubeGeometry=THREE.BoxGeometry,THREE.BoxBufferGeometry=function(e,t,r,n,i,a){function o(e,t,r){var n=0;return n+=(e+1)*(t+1)*2,n+=(e+1)*(r+1)*2,n+=(r+1)*(t+1)*2}function s(e,t,r){var n=0;return n+=e*t*2,n+=e*r*2,n+=r*t*2,6*n}function c(e,t,r,n,i,a,o,s,c,h,u){for(var R=a/c,x=o/h,H=a/2,b=o/2,_=s/2,M=c+1,w=h+1,S=0,A=0,L=new THREE.Vector3,C=0;w>C;C++)for(var P=C*x-b,I=0;M>I;I++){var B=I*R-H;L[e]=B*n,L[t]=P*i,L[r]=_,p[m]=L.x,p[m+1]=L.y,p[m+2]=L.z,L[e]=0,L[t]=0,L[r]=s>0?1:-1,f[m]=L.x,f[m+1]=L.y,f[m+2]=L.z,E[g]=I/c,E[g+1]=1-C/h,m+=3,g+=2,S+=1}for(C=0;h>C;C++)for(I=0;c>I;I++){var D=T+I+M*C,O=T+I+M*(C+1),U=T+(I+1)+M*(C+1),N=T+(I+1)+M*C;d[v]=D,d[v+1]=O,d[v+2]=N,d[v+3]=O,d[v+4]=U,d[v+5]=N,v+=6,A+=6}l.addGroup(y,A,u),y+=A,T+=S}THREE.BufferGeometry.call(this),this.type="BoxBufferGeometry",this.parameters={width:e,height:t,depth:r,widthSegments:n,heightSegments:i,depthSegments:a};var l=this;n=Math.floor(n)||1,i=Math.floor(i)||1,a=Math.floor(a)||1;var h=o(n,i,a),u=s(n,i,a),d=new(u>65535?Uint32Array:Uint16Array)(u),p=new Float32Array(3*h),f=new Float32Array(3*h),E=new Float32Array(2*h),m=0,g=0,v=0,T=0,y=0;c("z","y","x",-1,-1,r,t,e,a,i,0),c("z","y","x",1,-1,r,t,-e,a,i,1),c("x","z","y",1,1,e,r,t,n,a,2),c("x","z","y",1,-1,e,r,-t,n,a,3),c("x","y","z",1,-1,e,t,r,n,i,4),c("x","y","z",-1,-1,e,t,-r,n,i,5),this.setIndex(new THREE.BufferAttribute(d,1)),this.addAttribute("position",new THREE.BufferAttribute(p,3)),this.addAttribute("normal",new THREE.BufferAttribute(f,3)),this.addAttribute("uv",new THREE.BufferAttribute(E,2))},THREE.BoxBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.BoxBufferGeometry.prototype.constructor=THREE.BoxBufferGeometry,THREE.CircleGeometry=function(e,t,r,n){THREE.Geometry.call(this),this.type="CircleGeometry",this.parameters={radius:e,segments:t,thetaStart:r,thetaLength:n},this.fromBufferGeometry(new THREE.CircleBufferGeometry(e,t,r,n))},THREE.CircleGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.CircleGeometry.prototype.constructor=THREE.CircleGeometry,THREE.CircleBufferGeometry=function(e,t,r,n){THREE.BufferGeometry.call(this),this.type="CircleBufferGeometry",this.parameters={radius:e,segments:t,thetaStart:r,thetaLength:n},e=e||50,t=void 0!==t?Math.max(3,t):8,r=void 0!==r?r:0,n=void 0!==n?n:2*Math.PI;var i=t+2,a=new Float32Array(3*i),o=new Float32Array(3*i),s=new Float32Array(2*i);o[2]=1,s[0]=.5,s[1]=.5;for(var c=0,l=3,h=2;t>=c;c++,l+=3,h+=2){var u=r+c/t*n;a[l]=e*Math.cos(u),a[l+1]=e*Math.sin(u),o[l+2]=1,s[h]=(a[l]/e+1)/2,s[h+1]=(a[l+1]/e+1)/2}for(var d=[],l=1;t>=l;l++)d.push(l,l+1,0);this.setIndex(new THREE.BufferAttribute(new Uint16Array(d),1)),this.addAttribute("position",new THREE.BufferAttribute(a,3)),this.addAttribute("normal",new THREE.BufferAttribute(o,3)),this.addAttribute("uv",new THREE.BufferAttribute(s,2)),this.boundingSphere=new THREE.Sphere(new THREE.Vector3,e)},THREE.CircleBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.CircleBufferGeometry.prototype.constructor=THREE.CircleBufferGeometry,THREE.CylinderBufferGeometry=function(e,t,r,n,i,a,o,s){function c(){var e=(n+1)*(i+1);return a===!1&&(e+=(n+1)*p+n*p),e}function l(){var e=n*i*2*3;return a===!1&&(e+=n*p*3),e}function h(){var a,c,l=new THREE.Vector3,h=new THREE.Vector3,u=0,p=(t-e)/r;for(c=0;i>=c;c++){var f=[],E=c/i,_=E*(t-e)+e;for(a=0;n>=a;a++){var M=a/n;h.x=_*Math.sin(M*s+o),h.y=-E*r+H,h.z=_*Math.cos(M*s+o),g.setXYZ(y,h.x,h.y,h.z),l.copy(h),(0===e&&0===c||0===t&&c===i)&&(l.x=Math.sin(M*s+o),l.z=Math.cos(M*s+o)),l.setY(Math.sqrt(l.x*l.x+l.z*l.z)*p).normalize(),v.setXYZ(y,l.x,l.y,l.z),T.setXY(y,M,1-E),f.push(y),y++}x.push(f)}for(a=0;n>a;a++)for(c=0;i>c;c++){var w=x[c][a],S=x[c+1][a],A=x[c+1][a+1],L=x[c][a+1];m.setX(R,w),R++,m.setX(R,S),R++,m.setX(R,L),R++,m.setX(R,S),R++,m.setX(R,A),R++,m.setX(R,L),R++,u+=6}d.addGroup(b,u,0),b+=u}function u(r){var i,a,c,l=new THREE.Vector2,h=new THREE.Vector3,u=0,p=r===!0?e:t,f=r===!0?1:-1;for(a=y,i=1;n>=i;i++)g.setXYZ(y,0,H*f,0),v.setXYZ(y,0,f,0),l.x=.5,l.y=.5,T.setXY(y,l.x,l.y),y++;for(c=y,i=0;n>=i;i++){var E=i/n,x=E*s+o,_=Math.cos(x),M=Math.sin(x);h.x=p*M,h.y=H*f,h.z=p*_,g.setXYZ(y,h.x,h.y,h.z),v.setXYZ(y,0,f,0),l.x=.5*_+.5,l.y=.5*M*f+.5,T.setXY(y,l.x,l.y),y++}for(i=0;n>i;i++){var w=a+i,S=c+i;r===!0?(m.setX(R,S),R++,m.setX(R,S+1),R++,m.setX(R,w),R++):(m.setX(R,S+1),R++,m.setX(R,S),R++,m.setX(R,w),R++),u+=3}d.addGroup(b,u,r===!0?1:2),b+=u}THREE.BufferGeometry.call(this),this.type="CylinderBufferGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:r,radialSegments:n,heightSegments:i,openEnded:a,thetaStart:o,thetaLength:s};var d=this;e=void 0!==e?e:20,t=void 0!==t?t:20,r=void 0!==r?r:100,n=Math.floor(n)||8,i=Math.floor(i)||1,a=void 0!==a?a:!1,o=void 0!==o?o:0,s=void 0!==s?s:2*Math.PI;var p=0;a===!1&&(e>0&&p++,t>0&&p++);var f=c(),E=l(),m=new THREE.BufferAttribute(new(E>65535?Uint32Array:Uint16Array)(E),1),g=new THREE.BufferAttribute(new Float32Array(3*f),3),v=new THREE.BufferAttribute(new Float32Array(3*f),3),T=new THREE.BufferAttribute(new Float32Array(2*f),2),y=0,R=0,x=[],H=r/2,b=0;h(),a===!1&&(e>0&&u(!0),t>0&&u(!1)),this.setIndex(m),this.addAttribute("position",g),this.addAttribute("normal",v),this.addAttribute("uv",T)},THREE.CylinderBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.CylinderBufferGeometry.prototype.constructor=THREE.CylinderBufferGeometry,THREE.CylinderGeometry=function(e,t,r,n,i,a,o,s){THREE.Geometry.call(this),this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:r,radialSegments:n,heightSegments:i,openEnded:a,thetaStart:o,thetaLength:s},this.fromBufferGeometry(new THREE.CylinderBufferGeometry(e,t,r,n,i,a,o,s)),this.mergeVertices()},THREE.CylinderGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.CylinderGeometry.prototype.constructor=THREE.CylinderGeometry,THREE.ConeBufferGeometry=function(e,t,r,n,i,a,o){THREE.CylinderBufferGeometry.call(this,0,e,t,r,n,i,a,o),this.type="ConeBufferGeometry",this.parameters={radius:e,height:t,radialSegments:r,heightSegments:n,thetaStart:a,thetaLength:o}},THREE.ConeBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.ConeBufferGeometry.prototype.constructor=THREE.ConeBufferGeometry,THREE.ConeGeometry=function(e,t,r,n,i,a,o){THREE.CylinderGeometry.call(this,0,e,t,r,n,i,a,o),this.type="ConeGeometry",this.parameters={radius:e,height:t,radialSegments:r,heightSegments:n,openEnded:i,thetaStart:a,thetaLength:o}},THREE.ConeGeometry.prototype=Object.create(THREE.CylinderGeometry.prototype),THREE.ConeGeometry.prototype.constructor=THREE.ConeGeometry,THREE.EdgesGeometry=function(e,t){function r(e,t){return e-t}THREE.BufferGeometry.call(this),t=void 0!==t?t:1;var n,i=Math.cos(THREE.Math.DEG2RAD*t),a=[0,0],o={},s=["a","b","c"];e instanceof THREE.BufferGeometry?(n=new THREE.Geometry,n.fromBufferGeometry(e)):n=e.clone(),n.mergeVertices(),n.computeFaceNormals();for(var c=n.vertices,l=n.faces,h=0,u=l.length;u>h;h++)for(var d=l[h],p=0;3>p;p++){a[0]=d[s[p]],a[1]=d[s[(p+1)%3]],a.sort(r);var f=a.toString();void 0===o[f]?o[f]={vert1:a[0],vert2:a[1],face1:h,face2:void 0}:o[f].face2=h}var E=[];for(var f in o){var m=o[f];if(void 0===m.face2||l[m.face1].normal.dot(l[m.face2].normal)<=i){var g=c[m.vert1];E.push(g.x),E.push(g.y),E.push(g.z),g=c[m.vert2],E.push(g.x),E.push(g.y),E.push(g.z)}}this.addAttribute("position",new THREE.BufferAttribute(new Float32Array(E),3))},THREE.EdgesGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.EdgesGeometry.prototype.constructor=THREE.EdgesGeometry,THREE.ExtrudeGeometry=function(e,t){return"undefined"==typeof e?void(e=[]):(THREE.Geometry.call(this),this.type="ExtrudeGeometry",e=Array.isArray(e)?e:[e],this.addShapeList(e,t),void this.computeFaceNormals())},THREE.ExtrudeGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.ExtrudeGeometry.prototype.constructor=THREE.ExtrudeGeometry,THREE.ExtrudeGeometry.prototype.addShapeList=function(e,t){for(var r=e.length,n=0;r>n;n++){var i=e[n];this.addShape(i,t)}},THREE.ExtrudeGeometry.prototype.addShape=function(e,t){function r(e,t,r){return t||console.error("THREE.ExtrudeGeometry: vec does not exist"),t.clone().multiplyScalar(r).add(e)}function n(e,t,r){var n,i,a=1,o=e.x-t.x,s=e.y-t.y,c=r.x-e.x,l=r.y-e.y,h=o*o+s*s,u=o*l-s*c;if(Math.abs(u)>Number.EPSILON){var d=Math.sqrt(h),p=Math.sqrt(c*c+l*l),f=t.x-s/d,E=t.y+o/d,m=r.x-l/p,g=r.y+c/p,v=((m-f)*l-(g-E)*c)/(o*l-s*c);n=f+o*v-e.x,i=E+s*v-e.y;var T=n*n+i*i;if(2>=T)return new THREE.Vector2(n,i);a=Math.sqrt(T/2)}else{var y=!1;o>Number.EPSILON?c>Number.EPSILON&&(y=!0):o<-Number.EPSILON?c<-Number.EPSILON&&(y=!0):Math.sign(s)===Math.sign(l)&&(y=!0),y?(n=-s,i=o,a=Math.sqrt(h)):(n=o,i=s,a=Math.sqrt(h/2))}return new THREE.Vector2(n/a,i/a)}function i(){if(T){var e=0,t=k*e;for(W=0;z>W;W++)G=B[W],c(G[2]+t,G[1]+t,G[0]+t);for(e=R+2*v,t=k*e,W=0;z>W;W++)G=B[W],c(G[0]+t,G[1]+t,G[2]+t)}else{for(W=0;z>W;W++)G=B[W],c(G[2],G[1],G[0]);for(W=0;z>W;W++)G=B[W],c(G[0]+k*R,G[1]+k*R,G[2]+k*R)}}function a(){var e=0;for(o(D,e),e+=D.length,M=0,w=P.length;w>M;M++)_=P[M],o(_,e),e+=_.length}function o(e,t){var r,n;for(W=e.length;--W>=0;){r=W,n=W-1,0>n&&(n=e.length-1);var i=0,a=R+2*v;for(i=0;a>i;i++){var o=k*i,s=k*(i+1),c=t+r+o,h=t+n+o,u=t+n+s,d=t+r+s;l(c,h,u,d,e,i,a,r,n)}}}function s(e,t,r){S.vertices.push(new THREE.Vector3(e,t,r))}function c(e,t,r){e+=A,t+=A,r+=A,S.faces.push(new THREE.Face3(e,t,r,null,null,0));var n=b.generateTopUV(S,e,t,r);S.faceVertexUvs[0].push(n)}function l(e,t,r,n,i,a,o,s,c){e+=A,t+=A,r+=A,n+=A,S.faces.push(new THREE.Face3(e,t,n,null,null,1)),S.faces.push(new THREE.Face3(t,r,n,null,null,1));var l=b.generateSideWallUV(S,e,t,r,n);S.faceVertexUvs[0].push([l[0],l[1],l[3]]),S.faceVertexUvs[0].push([l[1],l[2],l[3]])}var h,u,d,p,f,E=void 0!==t.amount?t.amount:100,m=void 0!==t.bevelThickness?t.bevelThickness:6,g=void 0!==t.bevelSize?t.bevelSize:m-2,v=void 0!==t.bevelSegments?t.bevelSegments:3,T=void 0!==t.bevelEnabled?t.bevelEnabled:!0,y=void 0!==t.curveSegments?t.curveSegments:12,R=void 0!==t.steps?t.steps:1,x=t.extrudePath,H=!1,b=void 0!==t.UVGenerator?t.UVGenerator:THREE.ExtrudeGeometry.WorldUVGenerator;x&&(h=x.getSpacedPoints(R),H=!0,T=!1,u=void 0!==t.frames?t.frames:new THREE.TubeGeometry.FrenetFrames(x,R,!1),d=new THREE.Vector3,p=new THREE.Vector3,f=new THREE.Vector3),T||(v=0,m=0,g=0);var _,M,w,S=this,A=this.vertices.length,L=e.extractPoints(y),C=L.shape,P=L.holes,I=!THREE.ShapeUtils.isClockWise(C);if(I){for(C=C.reverse(),M=0,w=P.length;w>M;M++)_=P[M],THREE.ShapeUtils.isClockWise(_)&&(P[M]=_.reverse());I=!1}var B=THREE.ShapeUtils.triangulateShape(C,P),D=C;for(M=0,w=P.length;w>M;M++)_=P[M],C=C.concat(_);for(var O,U,N,F,V,G,k=C.length,z=B.length,j=[],W=0,X=D.length,q=X-1,Y=W+1;X>W;W++,q++,Y++)q===X&&(q=0),Y===X&&(Y=0),j[W]=n(D[W],D[q],D[Y]);var Z,K=[],Q=j.concat();for(M=0,w=P.length;w>M;M++){for(_=P[M],Z=[],W=0,X=_.length,q=X-1,Y=W+1;X>W;W++,q++,Y++)q===X&&(q=0),Y===X&&(Y=0),Z[W]=n(_[W],_[q],_[Y]);K.push(Z),Q=Q.concat(Z)}for(O=0;v>O;O++){for(N=O/v,F=m*(1-N),U=g*Math.sin(N*Math.PI/2),W=0,X=D.length;X>W;W++)V=r(D[W],j[W],U),s(V.x,V.y,-F);for(M=0,w=P.length;w>M;M++)for(_=P[M],Z=K[M],W=0,X=_.length;X>W;W++)V=r(_[W],Z[W],U),s(V.x,V.y,-F)}for(U=g,W=0;k>W;W++)V=T?r(C[W],Q[W],U):C[W],H?(p.copy(u.normals[0]).multiplyScalar(V.x),d.copy(u.binormals[0]).multiplyScalar(V.y),f.copy(h[0]).add(p).add(d),s(f.x,f.y,f.z)):s(V.x,V.y,0);var J;for(J=1;R>=J;J++)for(W=0;k>W;W++)V=T?r(C[W],Q[W],U):C[W],H?(p.copy(u.normals[J]).multiplyScalar(V.x),d.copy(u.binormals[J]).multiplyScalar(V.y),f.copy(h[J]).add(p).add(d),s(f.x,f.y,f.z)):s(V.x,V.y,E/R*J);for(O=v-1;O>=0;O--){for(N=O/v,F=m*(1-N),U=g*Math.sin(N*Math.PI/2),W=0,X=D.length;X>W;W++)V=r(D[W],j[W],U),s(V.x,V.y,E+F);for(M=0,w=P.length;w>M;M++)for(_=P[M],Z=K[M],W=0,X=_.length;X>W;W++)V=r(_[W],Z[W],U),H?s(V.x,V.y+h[R-1].y,h[R-1].x+F):s(V.x,V.y,E+F)}i(),a()},THREE.ExtrudeGeometry.WorldUVGenerator={generateTopUV:function(e,t,r,n){var i=e.vertices,a=i[t],o=i[r],s=i[n];return[new THREE.Vector2(a.x,a.y),new THREE.Vector2(o.x,o.y),new THREE.Vector2(s.x,s.y)]},generateSideWallUV:function(e,t,r,n,i){var a=e.vertices,o=a[t],s=a[r],c=a[n],l=a[i];return Math.abs(o.y-s.y)<.01?[new THREE.Vector2(o.x,1-o.z),new THREE.Vector2(s.x,1-s.z),new THREE.Vector2(c.x,1-c.z),new THREE.Vector2(l.x,1-l.z)]:[new THREE.Vector2(o.y,1-o.z),new THREE.Vector2(s.y,1-s.z),new THREE.Vector2(c.y,1-c.z),new THREE.Vector2(l.y,1-l.z)]}},THREE.ShapeGeometry=function(e,t){THREE.Geometry.call(this),this.type="ShapeGeometry",Array.isArray(e)===!1&&(e=[e]),this.addShapeList(e,t),this.computeFaceNormals()},THREE.ShapeGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.ShapeGeometry.prototype.constructor=THREE.ShapeGeometry,THREE.ShapeGeometry.prototype.addShapeList=function(e,t){for(var r=0,n=e.length;n>r;r++)this.addShape(e[r],t);return this},THREE.ShapeGeometry.prototype.addShape=function(e,t){void 0===t&&(t={});var r,n,i,a=void 0!==t.curveSegments?t.curveSegments:12,o=t.material,s=void 0===t.UVGenerator?THREE.ExtrudeGeometry.WorldUVGenerator:t.UVGenerator,c=this.vertices.length,l=e.extractPoints(a),h=l.shape,u=l.holes,d=!THREE.ShapeUtils.isClockWise(h);if(d){for(h=h.reverse(),r=0,n=u.length;n>r;r++)i=u[r],THREE.ShapeUtils.isClockWise(i)&&(u[r]=i.reverse());d=!1}var p=THREE.ShapeUtils.triangulateShape(h,u);for(r=0,n=u.length;n>r;r++)i=u[r],h=h.concat(i);var f,E,m=h.length,g=p.length;for(r=0;m>r;r++)f=h[r],this.vertices.push(new THREE.Vector3(f.x,f.y,0));for(r=0;g>r;r++){E=p[r];var v=E[0]+c,T=E[1]+c,y=E[2]+c;this.faces.push(new THREE.Face3(v,T,y,null,null,o)),this.faceVertexUvs[0].push(s.generateTopUV(this,v,T,y))}},THREE.LatheBufferGeometry=function(e,t,r,n){THREE.BufferGeometry.call(this),this.type="LatheBufferGeometry",this.parameters={points:e,segments:t,phiStart:r,phiLength:n},t=Math.floor(t)||12,r=r||0,n=n||2*Math.PI,n=THREE.Math.clamp(n,0,2*Math.PI);var i,a,o,s=(t+1)*e.length,c=t*e.length*2*3,l=new THREE.BufferAttribute(new(c>65535?Uint32Array:Uint16Array)(c),1),h=new THREE.BufferAttribute(new Float32Array(3*s),3),u=new THREE.BufferAttribute(new Float32Array(2*s),2),d=0,p=0,f=(1/(e.length-1),1/t),E=new THREE.Vector3,m=new THREE.Vector2;for(a=0;t>=a;a++){var g=r+a*f*n,v=Math.sin(g),T=Math.cos(g);for(o=0;o<=e.length-1;o++)E.x=e[o].x*v,E.y=e[o].y,E.z=e[o].x*T,h.setXYZ(d,E.x,E.y,E.z),m.x=a/t,m.y=o/(e.length-1),u.setXY(d,m.x,m.y),d++}for(a=0;t>a;a++)for(o=0;o<e.length-1;o++){i=o+a*e.length;var y=i,R=i+e.length,x=i+e.length+1,H=i+1;l.setX(p,y),p++,l.setX(p,R),p++,l.setX(p,H),p++,l.setX(p,R),p++,l.setX(p,x),p++,l.setX(p,H),p++}if(this.setIndex(l),this.addAttribute("position",h),this.addAttribute("uv",u),this.computeVertexNormals(),n===2*Math.PI){var b=this.attributes.normal.array,_=new THREE.Vector3,M=new THREE.Vector3,w=new THREE.Vector3;for(i=t*e.length*3,a=0,o=0;a<e.length;a++,o+=3)_.x=b[o+0],_.y=b[o+1],_.z=b[o+2],M.x=b[i+o+0],M.y=b[i+o+1],M.z=b[i+o+2],w.addVectors(_,M).normalize(),b[o+0]=b[i+o+0]=w.x,b[o+1]=b[i+o+1]=w.y,b[o+2]=b[i+o+2]=w.z}},THREE.LatheBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.LatheBufferGeometry.prototype.constructor=THREE.LatheBufferGeometry,THREE.LatheGeometry=function(e,t,r,n){THREE.Geometry.call(this),this.type="LatheGeometry",this.parameters={points:e,segments:t,phiStart:r,phiLength:n},this.fromBufferGeometry(new THREE.LatheBufferGeometry(e,t,r,n)),this.mergeVertices()},THREE.LatheGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.LatheGeometry.prototype.constructor=THREE.LatheGeometry,THREE.PlaneGeometry=function(e,t,r,n){THREE.Geometry.call(this),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:r,heightSegments:n},this.fromBufferGeometry(new THREE.PlaneBufferGeometry(e,t,r,n))},THREE.PlaneGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.PlaneGeometry.prototype.constructor=THREE.PlaneGeometry,THREE.PlaneBufferGeometry=function(e,t,r,n){THREE.BufferGeometry.call(this),this.type="PlaneBufferGeometry",this.parameters={width:e,height:t,widthSegments:r,heightSegments:n};for(var i=e/2,a=t/2,o=Math.floor(r)||1,s=Math.floor(n)||1,c=o+1,l=s+1,h=e/o,u=t/s,d=new Float32Array(c*l*3),p=new Float32Array(c*l*3),f=new Float32Array(c*l*2),E=0,m=0,g=0;l>g;g++)for(var v=g*u-a,T=0;c>T;T++){var y=T*h-i;d[E]=y,d[E+1]=-v,p[E+2]=1,f[m]=T/o,f[m+1]=1-g/s,E+=3,m+=2}E=0;for(var R=new(d.length/3>65535?Uint32Array:Uint16Array)(o*s*6),g=0;s>g;g++)for(var T=0;o>T;T++){var x=T+c*g,H=T+c*(g+1),b=T+1+c*(g+1),_=T+1+c*g;R[E]=x,R[E+1]=H,R[E+2]=_,R[E+3]=H,R[E+4]=b,R[E+5]=_,E+=6}this.setIndex(new THREE.BufferAttribute(R,1)),this.addAttribute("position",new THREE.BufferAttribute(d,3)),this.addAttribute("normal",new THREE.BufferAttribute(p,3)),this.addAttribute("uv",new THREE.BufferAttribute(f,2))},THREE.PlaneBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.PlaneBufferGeometry.prototype.constructor=THREE.PlaneBufferGeometry,THREE.RingBufferGeometry=function(e,t,r,n,i,a){THREE.BufferGeometry.call(this),this.type="RingBufferGeometry",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:r,phiSegments:n,thetaStart:i,thetaLength:a},e=e||20,t=t||50,i=void 0!==i?i:0,a=void 0!==a?a:2*Math.PI,r=void 0!==r?Math.max(3,r):8,n=void 0!==n?Math.max(1,n):1;var o,s,c,l=(r+1)*(n+1),h=r*n*2*3,u=new THREE.BufferAttribute(new(h>65535?Uint32Array:Uint16Array)(h),1),d=new THREE.BufferAttribute(new Float32Array(3*l),3),p=new THREE.BufferAttribute(new Float32Array(3*l),3),f=new THREE.BufferAttribute(new Float32Array(2*l),2),E=0,m=0,g=e,v=(t-e)/n,T=new THREE.Vector3,y=new THREE.Vector2;for(s=0;n>=s;s++){for(c=0;r>=c;c++)o=i+c/r*a,T.x=g*Math.cos(o),T.y=g*Math.sin(o),d.setXYZ(E,T.x,T.y,T.z),p.setXYZ(E,0,0,1),y.x=(T.x/t+1)/2,y.y=(T.y/t+1)/2,f.setXY(E,y.x,y.y),E++;g+=v}for(s=0;n>s;s++){var R=s*(r+1);for(c=0;r>c;c++){o=c+R;var x=o,H=o+r+1,b=o+r+2,_=o+1;u.setX(m,x),m++,u.setX(m,H),m++,u.setX(m,b),m++,u.setX(m,x),m++,u.setX(m,b),m++,u.setX(m,_),m++}}this.setIndex(u),this.addAttribute("position",d),this.addAttribute("normal",p),this.addAttribute("uv",f)},THREE.RingBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.RingBufferGeometry.prototype.constructor=THREE.RingBufferGeometry,THREE.RingGeometry=function(e,t,r,n,i,a){THREE.Geometry.call(this),this.type="RingGeometry",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:r,phiSegments:n,thetaStart:i,thetaLength:a},this.fromBufferGeometry(new THREE.RingBufferGeometry(e,t,r,n,i,a))},THREE.RingGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.RingGeometry.prototype.constructor=THREE.RingGeometry,THREE.SphereGeometry=function(e,t,r,n,i,a,o){THREE.Geometry.call(this),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:r,phiStart:n,phiLength:i,thetaStart:a,thetaLength:o},this.fromBufferGeometry(new THREE.SphereBufferGeometry(e,t,r,n,i,a,o))},THREE.SphereGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.SphereGeometry.prototype.constructor=THREE.SphereGeometry,THREE.SphereBufferGeometry=function(e,t,r,n,i,a,o){THREE.BufferGeometry.call(this),this.type="SphereBufferGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:r,phiStart:n,phiLength:i,thetaStart:a,thetaLength:o},e=e||50,t=Math.max(3,Math.floor(t)||8),r=Math.max(2,Math.floor(r)||6),n=void 0!==n?n:0,i=void 0!==i?i:2*Math.PI,a=void 0!==a?a:0,o=void 0!==o?o:Math.PI;for(var s=a+o,c=(t+1)*(r+1),l=new THREE.BufferAttribute(new Float32Array(3*c),3),h=new THREE.BufferAttribute(new Float32Array(3*c),3),u=new THREE.BufferAttribute(new Float32Array(2*c),2),d=0,p=[],f=new THREE.Vector3,E=0;r>=E;E++){for(var m=[],g=E/r,v=0;t>=v;v++){var T=v/t,y=-e*Math.cos(n+T*i)*Math.sin(a+g*o),R=e*Math.cos(a+g*o),x=e*Math.sin(n+T*i)*Math.sin(a+g*o);f.set(y,R,x).normalize(),l.setXYZ(d,y,R,x),h.setXYZ(d,f.x,f.y,f.z),u.setXY(d,T,1-g),m.push(d),d++}p.push(m)}for(var H=[],E=0;r>E;E++)for(var v=0;t>v;v++){var b=p[E][v+1],_=p[E][v],M=p[E+1][v],w=p[E+1][v+1];(0!==E||a>0)&&H.push(b,_,w),(E!==r-1||s<Math.PI)&&H.push(_,M,w)}this.setIndex(new(l.count>65535?THREE.Uint32Attribute:THREE.Uint16Attribute)(H,1)),this.addAttribute("position",l),this.addAttribute("normal",h),this.addAttribute("uv",u),this.boundingSphere=new THREE.Sphere(new THREE.Vector3,e)},THREE.SphereBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.SphereBufferGeometry.prototype.constructor=THREE.SphereBufferGeometry,THREE.TextGeometry=function(e,t){t=t||{};var r=t.font;if(r instanceof THREE.Font==!1)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),new THREE.Geometry;var n=r.generateShapes(e,t.size,t.curveSegments);t.amount=void 0!==t.height?t.height:50,void 0===t.bevelThickness&&(t.bevelThickness=10),void 0===t.bevelSize&&(t.bevelSize=8),void 0===t.bevelEnabled&&(t.bevelEnabled=!1),THREE.ExtrudeGeometry.call(this,n,t),this.type="TextGeometry"},THREE.TextGeometry.prototype=Object.create(THREE.ExtrudeGeometry.prototype),THREE.TextGeometry.prototype.constructor=THREE.TextGeometry,THREE.TorusBufferGeometry=function(e,t,r,n,i){THREE.BufferGeometry.call(this),this.type="TorusBufferGeometry",this.parameters={radius:e,tube:t,radialSegments:r,tubularSegments:n,arc:i},e=e||100,t=t||40,r=Math.floor(r)||8,n=Math.floor(n)||6,i=i||2*Math.PI;var a,o,s=(r+1)*(n+1),c=r*n*2*3,l=new(c>65535?Uint32Array:Uint16Array)(c),h=new Float32Array(3*s),u=new Float32Array(3*s),d=new Float32Array(2*s),p=0,f=0,E=0,m=new THREE.Vector3,g=new THREE.Vector3,v=new THREE.Vector3;for(a=0;r>=a;a++)for(o=0;n>=o;o++){var T=o/n*i,y=a/r*Math.PI*2;g.x=(e+t*Math.cos(y))*Math.cos(T),g.y=(e+t*Math.cos(y))*Math.sin(T),g.z=t*Math.sin(y),h[p]=g.x,h[p+1]=g.y,h[p+2]=g.z,m.x=e*Math.cos(T),m.y=e*Math.sin(T),v.subVectors(g,m).normalize(),u[p]=v.x,u[p+1]=v.y,u[p+2]=v.z,d[f]=o/n,d[f+1]=a/r,p+=3,f+=2}for(a=1;r>=a;a++)for(o=1;n>=o;o++){var R=(n+1)*a+o-1,x=(n+1)*(a-1)+o-1,H=(n+1)*(a-1)+o,b=(n+1)*a+o;l[E]=R,l[E+1]=x,l[E+2]=b,l[E+3]=x,l[E+4]=H,l[E+5]=b,E+=6}this.setIndex(new THREE.BufferAttribute(l,1)),this.addAttribute("position",new THREE.BufferAttribute(h,3)),this.addAttribute("normal",new THREE.BufferAttribute(u,3)),this.addAttribute("uv",new THREE.BufferAttribute(d,2))},THREE.TorusBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.TorusBufferGeometry.prototype.constructor=THREE.TorusBufferGeometry,THREE.TorusGeometry=function(e,t,r,n,i){THREE.Geometry.call(this),this.type="TorusGeometry",this.parameters={radius:e,tube:t,radialSegments:r,tubularSegments:n,arc:i},this.fromBufferGeometry(new THREE.TorusBufferGeometry(e,t,r,n,i))},THREE.TorusGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.TorusGeometry.prototype.constructor=THREE.TorusGeometry,THREE.TorusKnotBufferGeometry=function(e,t,r,n,i,a){function o(e,t,r,n,i){var a=Math.cos(e),o=Math.sin(e),s=r/t*e,c=Math.cos(s);i.x=n*(2+c)*.5*a,i.y=n*(2+c)*o*.5,i.z=n*Math.sin(s)*.5}THREE.BufferGeometry.call(this),this.type="TorusKnotBufferGeometry",this.parameters={radius:e,tube:t,tubularSegments:r,radialSegments:n,p:i,q:a},e=e||100,t=t||40,r=Math.floor(r)||64,n=Math.floor(n)||8,i=i||2,a=a||3;var s,c,l=(n+1)*(r+1),h=n*r*2*3,u=new THREE.BufferAttribute(new(h>65535?Uint32Array:Uint16Array)(h),1),d=new THREE.BufferAttribute(new Float32Array(3*l),3),p=new THREE.BufferAttribute(new Float32Array(3*l),3),f=new THREE.BufferAttribute(new Float32Array(2*l),2),E=0,m=0,g=new THREE.Vector3,v=new THREE.Vector3,T=new THREE.Vector2,y=new THREE.Vector3,R=new THREE.Vector3,x=new THREE.Vector3,H=new THREE.Vector3,b=new THREE.Vector3;for(s=0;r>=s;++s){var _=s/r*i*Math.PI*2;for(o(_,i,a,e,y),o(_+.01,i,a,e,R),H.subVectors(R,y),b.addVectors(R,y),x.crossVectors(H,b),b.crossVectors(x,H),x.normalize(),b.normalize(),c=0;n>=c;++c){var M=c/n*Math.PI*2,w=-t*Math.cos(M),S=t*Math.sin(M);g.x=y.x+(w*b.x+S*x.x),g.y=y.y+(w*b.y+S*x.y),g.z=y.z+(w*b.z+S*x.z),d.setXYZ(E,g.x,g.y,g.z),v.subVectors(g,y).normalize(),p.setXYZ(E,v.x,v.y,v.z),T.x=s/r,T.y=c/n,f.setXY(E,T.x,T.y),E++}}for(c=1;r>=c;c++)for(s=1;n>=s;s++){var A=(n+1)*(c-1)+(s-1),L=(n+1)*c+(s-1),C=(n+1)*c+s,P=(n+1)*(c-1)+s;u.setX(m,A),m++,u.setX(m,L),m++,u.setX(m,P),m++,u.setX(m,L),m++,u.setX(m,C),m++,u.setX(m,P),m++}this.setIndex(u),this.addAttribute("position",d),this.addAttribute("normal",p),this.addAttribute("uv",f)},THREE.TorusKnotBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.TorusKnotBufferGeometry.prototype.constructor=THREE.TorusKnotBufferGeometry,THREE.TorusKnotGeometry=function(e,t,r,n,i,a,o){THREE.Geometry.call(this),
this.type="TorusKnotGeometry",this.parameters={radius:e,tube:t,tubularSegments:r,radialSegments:n,p:i,q:a},void 0!==o&&console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead."),this.fromBufferGeometry(new THREE.TorusKnotBufferGeometry(e,t,r,n,i,a)),this.mergeVertices()},THREE.TorusKnotGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.TorusKnotGeometry.prototype.constructor=THREE.TorusKnotGeometry,THREE.TubeGeometry=function(e,t,r,n,i,a){function o(e,t,r){return A.vertices.push(new THREE.Vector3(e,t,r))-1}THREE.Geometry.call(this),this.type="TubeGeometry",this.parameters={path:e,segments:t,radius:r,radialSegments:n,closed:i,taper:a},t=t||64,r=r||1,n=n||8,i=i||!1,a=a||THREE.TubeGeometry.NoTaper;var s,c,l,h,u,d,p,f,E,m,g,v,T,y,R,x,H,b,_,M,w,S=[],A=this,L=t+1,C=new THREE.Vector3,P=new THREE.TubeGeometry.FrenetFrames(e,t,i),I=P.tangents,B=P.normals,D=P.binormals;for(this.tangents=I,this.normals=B,this.binormals=D,m=0;L>m;m++)for(S[m]=[],h=m/(L-1),E=e.getPointAt(h),s=I[m],c=B[m],l=D[m],d=r*a(h),g=0;n>g;g++)u=g/n*2*Math.PI,p=-d*Math.cos(u),f=d*Math.sin(u),C.copy(E),C.x+=p*c.x+f*l.x,C.y+=p*c.y+f*l.y,C.z+=p*c.z+f*l.z,S[m][g]=o(C.x,C.y,C.z);for(m=0;t>m;m++)for(g=0;n>g;g++)v=i?(m+1)%t:m+1,T=(g+1)%n,y=S[m][g],R=S[v][g],x=S[v][T],H=S[m][T],b=new THREE.Vector2(m/t,g/n),_=new THREE.Vector2((m+1)/t,g/n),M=new THREE.Vector2((m+1)/t,(g+1)/n),w=new THREE.Vector2(m/t,(g+1)/n),this.faces.push(new THREE.Face3(y,R,H)),this.faceVertexUvs[0].push([b,_,w]),this.faces.push(new THREE.Face3(R,x,H)),this.faceVertexUvs[0].push([_.clone(),M,w.clone()]);this.computeFaceNormals(),this.computeVertexNormals()},THREE.TubeGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.TubeGeometry.prototype.constructor=THREE.TubeGeometry,THREE.TubeGeometry.NoTaper=function(e){return 1},THREE.TubeGeometry.SinusoidalTaper=function(e){return Math.sin(Math.PI*e)},THREE.TubeGeometry.FrenetFrames=function(e,t,r){function n(){p[0]=new THREE.Vector3,f[0]=new THREE.Vector3,a=Number.MAX_VALUE,o=Math.abs(d[0].x),s=Math.abs(d[0].y),c=Math.abs(d[0].z),a>=o&&(a=o,u.set(1,0,0)),a>=s&&(a=s,u.set(0,1,0)),a>=c&&u.set(0,0,1),E.crossVectors(d[0],u).normalize(),p[0].crossVectors(d[0],E),f[0].crossVectors(d[0],p[0])}var i,a,o,s,c,l,h,u=new THREE.Vector3,d=[],p=[],f=[],E=new THREE.Vector3,m=new THREE.Matrix4,g=t+1;for(this.tangents=d,this.normals=p,this.binormals=f,l=0;g>l;l++)h=l/(g-1),d[l]=e.getTangentAt(h),d[l].normalize();for(n(),l=1;g>l;l++)p[l]=p[l-1].clone(),f[l]=f[l-1].clone(),E.crossVectors(d[l-1],d[l]),E.length()>Number.EPSILON&&(E.normalize(),i=Math.acos(THREE.Math.clamp(d[l-1].dot(d[l]),-1,1)),p[l].applyMatrix4(m.makeRotationAxis(E,i))),f[l].crossVectors(d[l],p[l]);if(r)for(i=Math.acos(THREE.Math.clamp(p[0].dot(p[g-1]),-1,1)),i/=g-1,d[0].dot(E.crossVectors(p[0],p[g-1]))>0&&(i=-i),l=1;g>l;l++)p[l].applyMatrix4(m.makeRotationAxis(d[l],i*l)),f[l].crossVectors(d[l],p[l])},THREE.PolyhedronGeometry=function(e,t,r,n){function i(e){var t=e.normalize().clone();t.index=h.vertices.push(t)-1;var r=s(e)/2/Math.PI+.5,n=c(e)/Math.PI+.5;return t.uv=new THREE.Vector2(r,1-n),t}function a(e,t,r,n){var i=new THREE.Face3(e.index,t.index,r.index,[e.clone(),t.clone(),r.clone()],void 0,n);h.faces.push(i),T.copy(e).add(t).add(r).divideScalar(3);var a=s(T);h.faceVertexUvs[0].push([l(e.uv,e,a),l(t.uv,t,a),l(r.uv,r,a)])}function o(e,t){for(var r=Math.pow(2,t),n=i(h.vertices[e.a]),o=i(h.vertices[e.b]),s=i(h.vertices[e.c]),c=[],l=e.materialIndex,u=0;r>=u;u++){c[u]=[];for(var d=i(n.clone().lerp(s,u/r)),p=i(o.clone().lerp(s,u/r)),f=r-u,E=0;f>=E;E++)0===E&&u===r?c[u][E]=d:c[u][E]=i(d.clone().lerp(p,E/f))}for(var u=0;r>u;u++)for(var E=0;2*(r-u)-1>E;E++){var m=Math.floor(E/2);E%2===0?a(c[u][m+1],c[u+1][m],c[u][m],l):a(c[u][m+1],c[u+1][m+1],c[u+1][m],l)}}function s(e){return Math.atan2(e.z,-e.x)}function c(e){return Math.atan2(-e.y,Math.sqrt(e.x*e.x+e.z*e.z))}function l(e,t,r){return 0>r&&1===e.x&&(e=new THREE.Vector2(e.x-1,e.y)),0===t.x&&0===t.z&&(e=new THREE.Vector2(r/2/Math.PI+.5,e.y)),e.clone()}THREE.Geometry.call(this),this.type="PolyhedronGeometry",this.parameters={vertices:e,indices:t,radius:r,detail:n},r=r||1,n=n||0;for(var h=this,u=0,d=e.length;d>u;u+=3)i(new THREE.Vector3(e[u],e[u+1],e[u+2]));for(var p=this.vertices,f=[],u=0,E=0,d=t.length;d>u;u+=3,E++){var m=p[t[u]],g=p[t[u+1]],v=p[t[u+2]];f[E]=new THREE.Face3(m.index,g.index,v.index,[m.clone(),g.clone(),v.clone()],void 0,E)}for(var T=new THREE.Vector3,u=0,d=f.length;d>u;u++)o(f[u],n);for(var u=0,d=this.faceVertexUvs[0].length;d>u;u++){var y=this.faceVertexUvs[0][u],R=y[0].x,x=y[1].x,H=y[2].x,b=Math.max(R,x,H),_=Math.min(R,x,H);b>.9&&.1>_&&(.2>R&&(y[0].x+=1),.2>x&&(y[1].x+=1),.2>H&&(y[2].x+=1))}for(var u=0,d=this.vertices.length;d>u;u++)this.vertices[u].multiplyScalar(r);this.mergeVertices(),this.computeFaceNormals(),this.boundingSphere=new THREE.Sphere(new THREE.Vector3,r)},THREE.PolyhedronGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.PolyhedronGeometry.prototype.constructor=THREE.PolyhedronGeometry,THREE.DodecahedronGeometry=function(e,t){var r=(1+Math.sqrt(5))/2,n=1/r,i=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-n,-r,0,-n,r,0,n,-r,0,n,r,-n,-r,0,-n,r,0,n,-r,0,n,r,0,-r,0,-n,r,0,-n,-r,0,n,r,0,n],a=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];THREE.PolyhedronGeometry.call(this,i,a,e,t),this.type="DodecahedronGeometry",this.parameters={radius:e,detail:t}},THREE.DodecahedronGeometry.prototype=Object.create(THREE.PolyhedronGeometry.prototype),THREE.DodecahedronGeometry.prototype.constructor=THREE.DodecahedronGeometry,THREE.IcosahedronGeometry=function(e,t){var r=(1+Math.sqrt(5))/2,n=[-1,r,0,1,r,0,-1,-r,0,1,-r,0,0,-1,r,0,1,r,0,-1,-r,0,1,-r,r,0,-1,r,0,1,-r,0,-1,-r,0,1],i=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];THREE.PolyhedronGeometry.call(this,n,i,e,t),this.type="IcosahedronGeometry",this.parameters={radius:e,detail:t}},THREE.IcosahedronGeometry.prototype=Object.create(THREE.PolyhedronGeometry.prototype),THREE.IcosahedronGeometry.prototype.constructor=THREE.IcosahedronGeometry,THREE.OctahedronGeometry=function(e,t){var r=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],n=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];THREE.PolyhedronGeometry.call(this,r,n,e,t),this.type="OctahedronGeometry",this.parameters={radius:e,detail:t}},THREE.OctahedronGeometry.prototype=Object.create(THREE.PolyhedronGeometry.prototype),THREE.OctahedronGeometry.prototype.constructor=THREE.OctahedronGeometry,THREE.TetrahedronGeometry=function(e,t){var r=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],n=[2,1,0,0,3,2,1,3,0,2,3,1];THREE.PolyhedronGeometry.call(this,r,n,e,t),this.type="TetrahedronGeometry",this.parameters={radius:e,detail:t}},THREE.TetrahedronGeometry.prototype=Object.create(THREE.PolyhedronGeometry.prototype),THREE.TetrahedronGeometry.prototype.constructor=THREE.TetrahedronGeometry,THREE.ParametricGeometry=function(e,t,r){THREE.Geometry.call(this),this.type="ParametricGeometry",this.parameters={func:e,slices:t,stacks:r};var n,i,a,o,s,c=this.vertices,l=this.faces,h=this.faceVertexUvs[0],u=t+1;for(n=0;r>=n;n++)for(s=n/r,i=0;t>=i;i++)o=i/t,a=e(o,s),c.push(a);var d,p,f,E,m,g,v,T;for(n=0;r>n;n++)for(i=0;t>i;i++)d=n*u+i,p=n*u+i+1,f=(n+1)*u+i+1,E=(n+1)*u+i,m=new THREE.Vector2(i/t,n/r),g=new THREE.Vector2((i+1)/t,n/r),v=new THREE.Vector2((i+1)/t,(n+1)/r),T=new THREE.Vector2(i/t,(n+1)/r),l.push(new THREE.Face3(d,p,E)),h.push([m,g,T]),l.push(new THREE.Face3(p,f,E)),h.push([g.clone(),v,T.clone()]);this.computeFaceNormals(),this.computeVertexNormals()},THREE.ParametricGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.ParametricGeometry.prototype.constructor=THREE.ParametricGeometry,THREE.WireframeGeometry=function(e){function t(e,t){return e-t}THREE.BufferGeometry.call(this);var r=[0,0],n={},i=["a","b","c"];if(e instanceof THREE.Geometry){for(var a=e.vertices,o=e.faces,s=0,c=new Uint32Array(6*o.length),l=0,h=o.length;h>l;l++)for(var u=o[l],d=0;3>d;d++){r[0]=u[i[d]],r[1]=u[i[(d+1)%3]],r.sort(t);var p=r.toString();void 0===n[p]&&(c[2*s]=r[0],c[2*s+1]=r[1],n[p]=!0,s++)}for(var f=new Float32Array(2*s*3),l=0,h=s;h>l;l++)for(var d=0;2>d;d++){var E=a[c[2*l+d]],m=6*l+3*d;f[m+0]=E.x,f[m+1]=E.y,f[m+2]=E.z}this.addAttribute("position",new THREE.BufferAttribute(f,3))}else if(e instanceof THREE.BufferGeometry)if(null!==e.index){var g=e.index.array,a=e.attributes.position,v=e.groups,s=0;0===v.length&&e.addGroup(0,g.length);for(var c=new Uint32Array(2*g.length),T=0,y=v.length;y>T;++T)for(var R=v[T],x=R.start,H=R.count,l=x,b=x+H;b>l;l+=3)for(var d=0;3>d;d++){r[0]=g[l+d],r[1]=g[l+(d+1)%3],r.sort(t);var p=r.toString();void 0===n[p]&&(c[2*s]=r[0],c[2*s+1]=r[1],n[p]=!0,s++)}for(var f=new Float32Array(2*s*3),l=0,h=s;h>l;l++)for(var d=0;2>d;d++){var m=6*l+3*d,_=c[2*l+d];f[m+0]=a.getX(_),f[m+1]=a.getY(_),f[m+2]=a.getZ(_)}this.addAttribute("position",new THREE.BufferAttribute(f,3))}else{for(var a=e.attributes.position.array,s=a.length/3,M=s/3,f=new Float32Array(2*s*3),l=0,h=M;h>l;l++)for(var d=0;3>d;d++){var m=18*l+6*d,w=9*l+3*d;f[m+0]=a[w],f[m+1]=a[w+1],f[m+2]=a[w+2];var _=9*l+3*((d+1)%3);f[m+3]=a[_],f[m+4]=a[_+1],f[m+5]=a[_+2]}this.addAttribute("position",new THREE.BufferAttribute(f,3))}},THREE.WireframeGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.WireframeGeometry.prototype.constructor=THREE.WireframeGeometry,THREE.AxisHelper=function(e){e=e||1;var t=new Float32Array([0,0,0,e,0,0,0,0,0,0,e,0,0,0,0,0,0,e]),r=new Float32Array([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1]),n=new THREE.BufferGeometry;n.addAttribute("position",new THREE.BufferAttribute(t,3)),n.addAttribute("color",new THREE.BufferAttribute(r,3));var i=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors});THREE.LineSegments.call(this,n,i)},THREE.AxisHelper.prototype=Object.create(THREE.LineSegments.prototype),THREE.AxisHelper.prototype.constructor=THREE.AxisHelper,THREE.ArrowHelper=function(){var e=new THREE.BufferGeometry;e.addAttribute("position",new THREE.Float32Attribute([0,0,0,0,1,0],3));var t=new THREE.CylinderBufferGeometry(0,.5,1,5,1);return t.translate(0,-.5,0),function(r,n,i,a,o,s){THREE.Object3D.call(this),void 0===a&&(a=16776960),void 0===i&&(i=1),void 0===o&&(o=.2*i),void 0===s&&(s=.2*o),this.position.copy(n),this.line=new THREE.Line(e,new THREE.LineBasicMaterial({color:a})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new THREE.Mesh(t,new THREE.MeshBasicMaterial({color:a})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(r),this.setLength(i,o,s)}}(),THREE.ArrowHelper.prototype=Object.create(THREE.Object3D.prototype),THREE.ArrowHelper.prototype.constructor=THREE.ArrowHelper,THREE.ArrowHelper.prototype.setDirection=function(){var e,t=new THREE.Vector3;return function(r){r.y>.99999?this.quaternion.set(0,0,0,1):r.y<-.99999?this.quaternion.set(1,0,0,0):(t.set(r.z,0,-r.x).normalize(),e=Math.acos(r.y),this.quaternion.setFromAxisAngle(t,e))}}(),THREE.ArrowHelper.prototype.setLength=function(e,t,r){void 0===t&&(t=.2*e),void 0===r&&(r=.2*t),this.line.scale.set(1,Math.max(0,e-t),1),this.line.updateMatrix(),this.cone.scale.set(r,t,r),this.cone.position.y=e,this.cone.updateMatrix()},THREE.ArrowHelper.prototype.setColor=function(e){this.line.material.color.copy(e),this.cone.material.color.copy(e)},THREE.BoxHelper=function(e){var t=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),r=new Float32Array(24),n=new THREE.BufferGeometry;n.setIndex(new THREE.BufferAttribute(t,1)),n.addAttribute("position",new THREE.BufferAttribute(r,3)),THREE.LineSegments.call(this,n,new THREE.LineBasicMaterial({color:16776960})),void 0!==e&&this.update(e)},THREE.BoxHelper.prototype=Object.create(THREE.LineSegments.prototype),THREE.BoxHelper.prototype.constructor=THREE.BoxHelper,THREE.BoxHelper.prototype.update=function(){var e=new THREE.Box3;return function(t){if(t instanceof THREE.Box3?e.copy(t):e.setFromObject(t),!e.isEmpty()){var r=e.min,n=e.max,i=this.geometry.attributes.position,a=i.array;a[0]=n.x,a[1]=n.y,a[2]=n.z,a[3]=r.x,a[4]=n.y,a[5]=n.z,a[6]=r.x,a[7]=r.y,a[8]=n.z,a[9]=n.x,a[10]=r.y,a[11]=n.z,a[12]=n.x,a[13]=n.y,a[14]=r.z,a[15]=r.x,a[16]=n.y,a[17]=r.z,a[18]=r.x,a[19]=r.y,a[20]=r.z,a[21]=n.x,a[22]=r.y,a[23]=r.z,i.needsUpdate=!0,this.geometry.computeBoundingSphere()}}}(),THREE.BoundingBoxHelper=function(e,t){var r=void 0!==t?t:8947848;this.object=e,this.box=new THREE.Box3,THREE.Mesh.call(this,new THREE.BoxGeometry(1,1,1),new THREE.MeshBasicMaterial({color:r,wireframe:!0}))},THREE.BoundingBoxHelper.prototype=Object.create(THREE.Mesh.prototype),THREE.BoundingBoxHelper.prototype.constructor=THREE.BoundingBoxHelper,THREE.BoundingBoxHelper.prototype.update=function(){this.box.setFromObject(this.object),this.box.size(this.scale),this.box.center(this.position)},THREE.CameraHelper=function(e){function t(e,t,n){r(e,n),r(t,n)}function r(e,t){n.vertices.push(new THREE.Vector3),n.colors.push(new THREE.Color(t)),void 0===a[e]&&(a[e]=[]),a[e].push(n.vertices.length-1)}var n=new THREE.Geometry,i=new THREE.LineBasicMaterial({color:16777215,vertexColors:THREE.FaceColors}),a={},o=16755200,s=16711680,c=43775,l=16777215,h=3355443;t("n1","n2",o),t("n2","n4",o),t("n4","n3",o),t("n3","n1",o),t("f1","f2",o),t("f2","f4",o),t("f4","f3",o),t("f3","f1",o),t("n1","f1",o),t("n2","f2",o),t("n3","f3",o),t("n4","f4",o),t("p","n1",s),t("p","n2",s),t("p","n3",s),t("p","n4",s),t("u1","u2",c),t("u2","u3",c),t("u3","u1",c),t("c","t",l),t("p","c",h),t("cn1","cn2",h),t("cn3","cn4",h),t("cf1","cf2",h),t("cf3","cf4",h),THREE.LineSegments.call(this,n,i),this.camera=e,this.camera.updateProjectionMatrix(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=a,this.update()},THREE.CameraHelper.prototype=Object.create(THREE.LineSegments.prototype),THREE.CameraHelper.prototype.constructor=THREE.CameraHelper,THREE.CameraHelper.prototype.update=function(){function e(e,a,o,s){n.set(a,o,s).unproject(i);var c=r[e];if(void 0!==c)for(var l=0,h=c.length;h>l;l++)t.vertices[c[l]].copy(n)}var t,r,n=new THREE.Vector3,i=new THREE.Camera;return function(){t=this.geometry,r=this.pointMap;var n=1,a=1;i.projectionMatrix.copy(this.camera.projectionMatrix),e("c",0,0,-1),e("t",0,0,1),e("n1",-n,-a,-1),e("n2",n,-a,-1),e("n3",-n,a,-1),e("n4",n,a,-1),e("f1",-n,-a,1),e("f2",n,-a,1),e("f3",-n,a,1),e("f4",n,a,1),e("u1",.7*n,1.1*a,-1),e("u2",.7*-n,1.1*a,-1),e("u3",0,2*a,-1),e("cf1",-n,0,1),e("cf2",n,0,1),e("cf3",0,-a,1),e("cf4",0,a,1),e("cn1",-n,0,-1),e("cn2",n,0,-1),e("cn3",0,-a,-1),e("cn4",0,a,-1),t.verticesNeedUpdate=!0}}(),THREE.DirectionalLightHelper=function(e,t){THREE.Object3D.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,void 0===t&&(t=1);var r=new THREE.BufferGeometry;r.addAttribute("position",new THREE.Float32Attribute([-t,t,0,t,t,0,t,-t,0,-t,-t,0,-t,t,0],3));var n=new THREE.LineBasicMaterial({fog:!1});this.add(new THREE.Line(r,n)),r=new THREE.BufferGeometry,r.addAttribute("position",new THREE.Float32Attribute([0,0,0,0,0,1],3)),this.add(new THREE.Line(r,n)),this.update()},THREE.DirectionalLightHelper.prototype=Object.create(THREE.Object3D.prototype),THREE.DirectionalLightHelper.prototype.constructor=THREE.DirectionalLightHelper,THREE.DirectionalLightHelper.prototype.dispose=function(){var e=this.children[0],t=this.children[1];e.geometry.dispose(),e.material.dispose(),t.geometry.dispose(),t.material.dispose()},THREE.DirectionalLightHelper.prototype.update=function(){var e=new THREE.Vector3,t=new THREE.Vector3,r=new THREE.Vector3;return function(){e.setFromMatrixPosition(this.light.matrixWorld),t.setFromMatrixPosition(this.light.target.matrixWorld),r.subVectors(t,e);var n=this.children[0],i=this.children[1];n.lookAt(r),n.material.color.copy(this.light.color).multiplyScalar(this.light.intensity),i.lookAt(r),i.scale.z=r.length()}}(),THREE.EdgesHelper=function(e,t,r){var n=void 0!==t?t:16777215;THREE.LineSegments.call(this,new THREE.EdgesGeometry(e.geometry,r),new THREE.LineBasicMaterial({color:n})),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1},THREE.EdgesHelper.prototype=Object.create(THREE.LineSegments.prototype),THREE.EdgesHelper.prototype.constructor=THREE.EdgesHelper,THREE.FaceNormalsHelper=function(e,t,r,n){this.object=e,this.size=void 0!==t?t:1;var i=void 0!==r?r:16776960,a=void 0!==n?n:1,o=0,s=this.object.geometry;s instanceof THREE.Geometry?o=s.faces.length:console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");var c=new THREE.BufferGeometry,l=new THREE.Float32Attribute(2*o*3,3);c.addAttribute("position",l),THREE.LineSegments.call(this,c,new THREE.LineBasicMaterial({color:i,linewidth:a})),this.matrixAutoUpdate=!1,this.update()},THREE.FaceNormalsHelper.prototype=Object.create(THREE.LineSegments.prototype),THREE.FaceNormalsHelper.prototype.constructor=THREE.FaceNormalsHelper,THREE.FaceNormalsHelper.prototype.update=function(){var e=new THREE.Vector3,t=new THREE.Vector3,r=new THREE.Matrix3;return function(){this.object.updateMatrixWorld(!0),r.getNormalMatrix(this.object.matrixWorld);for(var n=this.object.matrixWorld,i=this.geometry.attributes.position,a=this.object.geometry,o=a.vertices,s=a.faces,c=0,l=0,h=s.length;h>l;l++){var u=s[l],d=u.normal;e.copy(o[u.a]).add(o[u.b]).add(o[u.c]).divideScalar(3).applyMatrix4(n),t.copy(d).applyMatrix3(r).normalize().multiplyScalar(this.size).add(e),i.setXYZ(c,e.x,e.y,e.z),c+=1,i.setXYZ(c,t.x,t.y,t.z),c+=1}return i.needsUpdate=!0,this}}(),THREE.GridHelper=function(e,t,r,n){r=new THREE.Color(void 0!==r?r:4473924),n=new THREE.Color(void 0!==n?n:8947848);for(var i=[],a=[],o=-e,s=0;e>=o;o+=t){i.push(-e,0,o,e,0,o),i.push(o,0,-e,o,0,e);var c=0===o?r:n;c.toArray(a,s),s+=3,c.toArray(a,s),s+=3,c.toArray(a,s),s+=3,c.toArray(a,s),s+=3}var l=new THREE.BufferGeometry;l.addAttribute("position",new THREE.Float32Attribute(i,3)),l.addAttribute("color",new THREE.Float32Attribute(a,3));var h=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors});THREE.LineSegments.call(this,l,h)},THREE.GridHelper.prototype=Object.create(THREE.LineSegments.prototype),THREE.GridHelper.prototype.constructor=THREE.GridHelper,THREE.GridHelper.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},THREE.HemisphereLightHelper=function(e,t){THREE.Object3D.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.colors=[new THREE.Color,new THREE.Color];var r=new THREE.SphereGeometry(t,4,2);r.rotateX(-Math.PI/2);for(var n=0,i=8;i>n;n++)r.faces[n].color=this.colors[4>n?0:1];var a=new THREE.MeshBasicMaterial({vertexColors:THREE.FaceColors,wireframe:!0});this.lightSphere=new THREE.Mesh(r,a),this.add(this.lightSphere),this.update()},THREE.HemisphereLightHelper.prototype=Object.create(THREE.Object3D.prototype),THREE.HemisphereLightHelper.prototype.constructor=THREE.HemisphereLightHelper,THREE.HemisphereLightHelper.prototype.dispose=function(){this.lightSphere.geometry.dispose(),this.lightSphere.material.dispose()},THREE.HemisphereLightHelper.prototype.update=function(){var e=new THREE.Vector3;return function(){this.colors[0].copy(this.light.color).multiplyScalar(this.light.intensity),this.colors[1].copy(this.light.groundColor).multiplyScalar(this.light.intensity),this.lightSphere.lookAt(e.setFromMatrixPosition(this.light.matrixWorld).negate()),this.lightSphere.geometry.colorsNeedUpdate=!0}}(),THREE.PointLightHelper=function(e,t){this.light=e,this.light.updateMatrixWorld();var r=new THREE.SphereBufferGeometry(t,4,2),n=new THREE.MeshBasicMaterial({wireframe:!0,fog:!1});n.color.copy(this.light.color).multiplyScalar(this.light.intensity),THREE.Mesh.call(this,r,n),this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1},THREE.PointLightHelper.prototype=Object.create(THREE.Mesh.prototype),THREE.PointLightHelper.prototype.constructor=THREE.PointLightHelper,THREE.PointLightHelper.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},THREE.PointLightHelper.prototype.update=function(){this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)},THREE.SkeletonHelper=function(e){this.bones=this.getBoneList(e);for(var t=new THREE.Geometry,r=0;r<this.bones.length;r++){var n=this.bones[r];n.parent instanceof THREE.Bone&&(t.vertices.push(new THREE.Vector3),t.vertices.push(new THREE.Vector3),t.colors.push(new THREE.Color(0,0,1)),t.colors.push(new THREE.Color(0,1,0)))}t.dynamic=!0;var i=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors,depthTest:!1,depthWrite:!1,transparent:!0});THREE.LineSegments.call(this,t,i),this.root=e,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.update()},THREE.SkeletonHelper.prototype=Object.create(THREE.LineSegments.prototype),THREE.SkeletonHelper.prototype.constructor=THREE.SkeletonHelper,THREE.SkeletonHelper.prototype.getBoneList=function(e){var t=[];e instanceof THREE.Bone&&t.push(e);for(var r=0;r<e.children.length;r++)t.push.apply(t,this.getBoneList(e.children[r]));return t},THREE.SkeletonHelper.prototype.update=function(){for(var e=this.geometry,t=(new THREE.Matrix4).getInverse(this.root.matrixWorld),r=new THREE.Matrix4,n=0,i=0;i<this.bones.length;i++){var a=this.bones[i];a.parent instanceof THREE.Bone&&(r.multiplyMatrices(t,a.matrixWorld),e.vertices[n].setFromMatrixPosition(r),r.multiplyMatrices(t,a.parent.matrixWorld),e.vertices[n+1].setFromMatrixPosition(r),n+=2)}e.verticesNeedUpdate=!0,e.computeBoundingSphere()},THREE.SpotLightHelper=function(e){THREE.Object3D.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1;for(var t=new THREE.BufferGeometry,r=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1],n=0,i=1,a=32;a>n;n++,i++){var o=n/a*Math.PI*2,s=i/a*Math.PI*2;r.push(Math.cos(o),Math.sin(o),1,Math.cos(s),Math.sin(s),1)}t.addAttribute("position",new THREE.Float32Attribute(r,3));var c=new THREE.LineBasicMaterial({fog:!1});this.cone=new THREE.LineSegments(t,c),this.add(this.cone),this.update()},THREE.SpotLightHelper.prototype=Object.create(THREE.Object3D.prototype),THREE.SpotLightHelper.prototype.constructor=THREE.SpotLightHelper,THREE.SpotLightHelper.prototype.dispose=function(){this.cone.geometry.dispose(),this.cone.material.dispose()},THREE.SpotLightHelper.prototype.update=function(){var e=new THREE.Vector3,t=new THREE.Vector3;return function(){var r=this.light.distance?this.light.distance:1e3,n=r*Math.tan(this.light.angle);this.cone.scale.set(n,n,r),e.setFromMatrixPosition(this.light.matrixWorld),t.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(t.sub(e)),this.cone.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)}}(),THREE.VertexNormalsHelper=function(e,t,r,n){this.object=e,this.size=void 0!==t?t:1;var i=void 0!==r?r:16711680,a=void 0!==n?n:1,o=0,s=this.object.geometry;s instanceof THREE.Geometry?o=3*s.faces.length:s instanceof THREE.BufferGeometry&&(o=s.attributes.normal.count);var c=new THREE.BufferGeometry,l=new THREE.Float32Attribute(2*o*3,3);c.addAttribute("position",l),THREE.LineSegments.call(this,c,new THREE.LineBasicMaterial({color:i,linewidth:a})),this.matrixAutoUpdate=!1,this.update()},THREE.VertexNormalsHelper.prototype=Object.create(THREE.LineSegments.prototype),THREE.VertexNormalsHelper.prototype.constructor=THREE.VertexNormalsHelper,THREE.VertexNormalsHelper.prototype.update=function(){var e=new THREE.Vector3,t=new THREE.Vector3,r=new THREE.Matrix3;return function(){var n=["a","b","c"];this.object.updateMatrixWorld(!0),r.getNormalMatrix(this.object.matrixWorld);var i=this.object.matrixWorld,a=this.geometry.attributes.position,o=this.object.geometry;if(o instanceof THREE.Geometry)for(var s=o.vertices,c=o.faces,l=0,h=0,u=c.length;u>h;h++)for(var d=c[h],p=0,f=d.vertexNormals.length;f>p;p++){var E=s[d[n[p]]],m=d.vertexNormals[p];e.copy(E).applyMatrix4(i),t.copy(m).applyMatrix3(r).normalize().multiplyScalar(this.size).add(e),a.setXYZ(l,e.x,e.y,e.z),l+=1,a.setXYZ(l,t.x,t.y,t.z),l+=1}else if(o instanceof THREE.BufferGeometry)for(var g=o.attributes.position,v=o.attributes.normal,l=0,p=0,f=g.count;f>p;p++)e.set(g.getX(p),g.getY(p),g.getZ(p)).applyMatrix4(i),t.set(v.getX(p),v.getY(p),v.getZ(p)),t.applyMatrix3(r).normalize().multiplyScalar(this.size).add(e),a.setXYZ(l,e.x,e.y,e.z),l+=1,a.setXYZ(l,t.x,t.y,t.z),l+=1;return a.needsUpdate=!0,this}}(),THREE.WireframeHelper=function(e,t){var r=void 0!==t?t:16777215;THREE.LineSegments.call(this,new THREE.WireframeGeometry(e.geometry),new THREE.LineBasicMaterial({color:r})),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1},THREE.WireframeHelper.prototype=Object.create(THREE.LineSegments.prototype),THREE.WireframeHelper.prototype.constructor=THREE.WireframeHelper,THREE.ImmediateRenderObject=function(e){THREE.Object3D.call(this),this.material=e,this.render=function(e){}},THREE.ImmediateRenderObject.prototype=Object.create(THREE.Object3D.prototype),THREE.ImmediateRenderObject.prototype.constructor=THREE.ImmediateRenderObject,THREE.MorphBlendMesh=function(e,t){THREE.Mesh.call(this,e,t),this.animationsMap={},this.animationsList=[];var r=this.geometry.morphTargets.length,n="__default",i=0,a=r-1,o=r/1;this.createAnimation(n,i,a,o),this.setAnimationWeight(n,1)},THREE.MorphBlendMesh.prototype=Object.create(THREE.Mesh.prototype),THREE.MorphBlendMesh.prototype.constructor=THREE.MorphBlendMesh,THREE.MorphBlendMesh.prototype.createAnimation=function(e,t,r,n){var i={start:t,end:r,length:r-t+1,fps:n,duration:(r-t)/n,lastFrame:0,currentFrame:0,active:!1,time:0,direction:1,weight:1,directionBackwards:!1,mirroredLoop:!1};this.animationsMap[e]=i,this.animationsList.push(i)},THREE.MorphBlendMesh.prototype.autoCreateAnimations=function(e){for(var t,r=/([a-z]+)_?(\d+)/i,n={},i=this.geometry,a=0,o=i.morphTargets.length;o>a;a++){var s=i.morphTargets[a],c=s.name.match(r);if(c&&c.length>1){var l=c[1];n[l]||(n[l]={start:1/0,end:-(1/0)});var h=n[l];a<h.start&&(h.start=a),a>h.end&&(h.end=a),t||(t=l)}}for(var l in n){var h=n[l];this.createAnimation(l,h.start,h.end,e)}this.firstAnimation=t},THREE.MorphBlendMesh.prototype.setAnimationDirectionForward=function(e){var t=this.animationsMap[e];t&&(t.direction=1,t.directionBackwards=!1)},THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward=function(e){var t=this.animationsMap[e];t&&(t.direction=-1,t.directionBackwards=!0)},THREE.MorphBlendMesh.prototype.setAnimationFPS=function(e,t){var r=this.animationsMap[e];r&&(r.fps=t,r.duration=(r.end-r.start)/r.fps)},THREE.MorphBlendMesh.prototype.setAnimationDuration=function(e,t){var r=this.animationsMap[e];r&&(r.duration=t,r.fps=(r.end-r.start)/r.duration)},THREE.MorphBlendMesh.prototype.setAnimationWeight=function(e,t){var r=this.animationsMap[e];r&&(r.weight=t)},THREE.MorphBlendMesh.prototype.setAnimationTime=function(e,t){var r=this.animationsMap[e];r&&(r.time=t)},THREE.MorphBlendMesh.prototype.getAnimationTime=function(e){var t=0,r=this.animationsMap[e];return r&&(t=r.time),t},THREE.MorphBlendMesh.prototype.getAnimationDuration=function(e){var t=-1,r=this.animationsMap[e];return r&&(t=r.duration),t},THREE.MorphBlendMesh.prototype.playAnimation=function(e){var t=this.animationsMap[e];t?(t.time=0,t.active=!0):console.warn("THREE.MorphBlendMesh: animation["+e+"] undefined in .playAnimation()")},THREE.MorphBlendMesh.prototype.stopAnimation=function(e){var t=this.animationsMap[e];t&&(t.active=!1)},THREE.MorphBlendMesh.prototype.update=function(e){for(var t=0,r=this.animationsList.length;r>t;t++){var n=this.animationsList[t];if(n.active){var i=n.duration/n.length;n.time+=n.direction*e,n.mirroredLoop?(n.time>n.duration||n.time<0)&&(n.direction*=-1,n.time>n.duration&&(n.time=n.duration,n.directionBackwards=!0),n.time<0&&(n.time=0,n.directionBackwards=!1)):(n.time=n.time%n.duration,n.time<0&&(n.time+=n.duration));var a=n.start+THREE.Math.clamp(Math.floor(n.time/i),0,n.length-1),o=n.weight;a!==n.currentFrame&&(this.morphTargetInfluences[n.lastFrame]=0,this.morphTargetInfluences[n.currentFrame]=1*o,this.morphTargetInfluences[a]=0,n.lastFrame=n.currentFrame,n.currentFrame=a);var s=n.time%i/i;n.directionBackwards&&(s=1-s),n.currentFrame!==n.lastFrame?(this.morphTargetInfluences[n.currentFrame]=s*o,this.morphTargetInfluences[n.lastFrame]=(1-s)*o):this.morphTargetInfluences[n.currentFrame]=o}}},THREE.ColladaLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager},THREE.ColladaLoader.prototype={constructor:THREE.ColladaLoader,load:function(e,t,r,n){function i(e){var t=e.split("/");return t.pop(),(t.length<1?".":t.join("/"))+"/"}var a=this,o=new THREE.XHRLoader(a.manager);o.load(e,function(r){t(a.parse(r,i(e)))},r,n)},options:{set convertUpAxis(e){console.log("ColladaLoder.options.convertUpAxis: TODO")}},setCrossOrigin:function(e){this.crossOrigin=e},parse:function(e,t){function r(e,t){for(var r=[],n=e.childNodes,i=0,a=n.length;a>i;i++){var o=n[i];o.nodeName===t&&r.push(o)}return r}function n(e){if(0===e.length)return[];for(var t=e.trim().split(/\s+/),r=new Array(t.length),n=0,i=t.length;i>n;n++)r[n]=parseFloat(t[n]);return r}function i(e){if(0===e.length)return[];for(var t=e.trim().split(/\s+/),r=new Array(t.length),n=0,i=t.length;i>n;n++)r[n]=parseInt(t[n]);return r}function a(e){return e.substring(1)}function o(e){return{unit:s(r(e,"unit")[0]),upAxis:c(r(e,"up_axis")[0])}}function s(e){return void 0!==e?parseFloat(e.getAttribute("meter")):1}function c(e){return void 0!==e?e.textContent:"Y_UP"}function l(e,t,n,i){var a=r(e,t)[0];if(void 0!==a)for(var o=r(a,n),s=0;s<o.length;s++)i(o[s])}function h(e,t){for(var r in e){var n=e[r];n.build=t(e[r])}}function u(e,t){return void 0!==e.build?e.build:(e.build=t(e),e.build)}function d(e){var t={init_from:r(e,"init_from")[0].textContent};de.images[e.getAttribute("id")]=t}function p(e){if(void 0!==e.build)return e.build;var r=e.init_from;return void 0!==t&&(r=t+r),ne.load(r)}function f(e){return u(de.images[e],p)}function E(e){for(var t={},r=0,n=e.childNodes.length;n>r;r++){var i=e.childNodes[r];if(1===i.nodeType)switch(i.nodeName){case"profile_COMMON":t.profile=m(i)}}de.effects[e.getAttribute("id")]=t}function m(e){for(var t={surfaces:{},samplers:{}},r=0,n=e.childNodes.length;n>r;r++){var i=e.childNodes[r];if(1===i.nodeType)switch(i.nodeName){case"newparam":g(i,t);break;case"technique":t.technique=y(i)}}return t}function g(e,t){for(var r=e.getAttribute("sid"),n=0,i=e.childNodes.length;i>n;n++){var a=e.childNodes[n];if(1===a.nodeType)switch(a.nodeName){case"surface":t.surfaces[r]=v(a);break;case"sampler2D":t.samplers[r]=T(a)}}}function v(e){for(var t={},r=0,n=e.childNodes.length;n>r;r++){var i=e.childNodes[r];if(1===i.nodeType)switch(i.nodeName){case"init_from":t.init_from=i.textContent}}return t}function T(e){for(var t={},r=0,n=e.childNodes.length;n>r;r++){var i=e.childNodes[r];if(1===i.nodeType)switch(i.nodeName){case"source":t.source=i.textContent}}return t}function y(e){for(var t={},r=0,n=e.childNodes.length;n>r;r++){var i=e.childNodes[r];if(1===i.nodeType)switch(i.nodeName){case"constant":case"lambert":case"blinn":case"phong":t.type=i.nodeName,t.parameters=R(i)}}return t}function R(e){for(var t={},r=0,n=e.childNodes.length;n>r;r++){var i=e.childNodes[r];if(1===i.nodeType)switch(i.nodeName){case"emission":case"diffuse":case"specular":case"shininess":case"transparency":t[i.nodeName]=x(i)}}return t}function x(e){for(var t={},r=0,i=e.childNodes.length;i>r;r++){var a=e.childNodes[r];if(1===a.nodeType)switch(a.nodeName){case"color":t[a.nodeName]=n(a.textContent);break;case"float":t[a.nodeName]=parseFloat(a.textContent);break;case"texture":t[a.nodeName]={id:a.getAttribute("texture"),extra:H(a)}}}return t}function H(e){for(var t={},r=0,n=e.childNodes.length;n>r;r++){var i=e.childNodes[r];
if(1===i.nodeType)switch(i.nodeName){case"extra":t=b(i)}}return t}function b(e){for(var t={},r=0,n=e.childNodes.length;n>r;r++){var i=e.childNodes[r];if(1===i.nodeType)switch(i.nodeName){case"technique":t[i.nodeName]=_(i)}}return t}function _(e){for(var t={},r=0,n=e.childNodes.length;n>r;r++){var i=e.childNodes[r];if(1===i.nodeType)switch(i.nodeName){case"repeatU":case"repeatV":case"offsetU":case"offsetV":t[i.nodeName]=parseFloat(i.textContent);break;case"wrapU":case"wrapV":t[i.nodeName]=parseInt(i.textContent)}}return t}function M(e){return e}function w(e){return u(de.effects[e],M)}function S(e){for(var t={name:e.getAttribute("name")},r=0,n=e.childNodes.length;n>r;r++){var i=e.childNodes[r];if(1===i.nodeType)switch(i.nodeName){case"instance_effect":t.url=a(i.getAttribute("url"))}}de.materials[e.getAttribute("id")]=t}function A(e){function t(e){var t=n.profile.samplers[e.id];if(void 0!==t){var r=n.profile.surfaces[t.source],i=new THREE.Texture(f(r.init_from)),a=e.extra;if(void 0!==a&&void 0!==a.technique){var o=a.technique;i.wrapS=o.wrapU?THREE.RepeatWrapping:THREE.ClampToEdgeWrapping,i.wrapT=o.wrapV?THREE.RepeatWrapping:THREE.ClampToEdgeWrapping,i.offset.set(o.offsetU,o.offsetV),i.repeat.set(o.repeatU,o.repeatV)}else i.wrapS=THREE.RepeatWrapping,i.wrapT=THREE.RepeatWrapping;return i.needsUpdate=!0,i}return console.error("ColladaLoder: Undefined sampler",e.id),null}var r,n=w(e.url),i=n.profile.technique;switch(i.type){case"phong":case"blinn":r=new THREE.MeshPhongMaterial;break;case"lambert":r=new THREE.MeshLambertMaterial;break;default:r=new THREE.MeshBasicMaterial}r.name=e.name;var a=i.parameters;for(var o in a){var s=a[o];switch(o){case"diffuse":s.color&&r.color.fromArray(s.color),s.texture&&(r.map=t(s.texture));break;case"specular":s.color&&r.specular&&r.specular.fromArray(s.color);break;case"shininess":s["float"]&&r.shininess&&(r.shininess=s["float"]);break;case"emission":s.color&&r.emissive&&r.emissive.fromArray(s.color);break;case"transparency":s["float"]&&(r.opacity=s["float"]),1!==s["float"]&&(r.transparent=!0)}}return r}function L(e){return u(de.materials[e],A)}function C(e){for(var t={name:e.getAttribute("name")},r=0,n=e.childNodes.length;n>r;r++){var i=e.childNodes[r];if(1===i.nodeType)switch(i.nodeName){case"optics":t.optics=P(i)}}de.cameras[e.getAttribute("id")]=t}function P(e){for(var t=0;t<e.childNodes.length;t++){var r=e.childNodes[t];switch(r.nodeName){case"technique_common":return I(r)}}return{}}function I(e){for(var t={},r=0;r<e.childNodes.length;r++){var n=e.childNodes[r];switch(n.nodeName){case"perspective":case"orthographic":t.technique=n.nodeName,t.parameters=B(n)}}return t}function B(e){for(var t={},r=0;r<e.childNodes.length;r++){var n=e.childNodes[r];switch(n.nodeName){case"xfov":case"yfov":case"xmag":case"ymag":case"znear":case"zfar":case"aspect_ratio":t[n.nodeName]=parseFloat(n.textContent)}}return t}function D(e){var t;switch(e.optics.technique){case"perspective":t=new THREE.PerspectiveCamera(e.optics.parameters.yfov,e.optics.parameters.aspect_ratio,e.optics.parameters.znear,e.optics.parameters.zfar);break;case"orthographic":t=new THREE.OrthographicCamera;break;default:t=new THREE.PerspectiveCamera}return t.name=e.name,t}function O(e){return u(de.cameras[e],D)}function U(e){for(var t={},r=0,n=e.childNodes.length;n>r;r++){var i=e.childNodes[r];if(1===i.nodeType)switch(i.nodeName){case"technique_common":t=N(i)}}de.lights[e.getAttribute("id")]=t}function N(e){for(var t={},r=0,n=e.childNodes.length;n>r;r++){var i=e.childNodes[r];if(1===i.nodeType)switch(i.nodeName){case"directional":case"point":case"spot":case"ambient":t.technique=i.nodeName,t.parameters=F(i)}}return t}function F(e){for(var t={},r=0,i=e.childNodes.length;i>r;r++){var a=e.childNodes[r];if(1===a.nodeType)switch(a.nodeName){case"color":var o=n(a.textContent);t.color=(new THREE.Color).fromArray(o);break;case"falloff_angle":t.falloffAngle=parseFloat(a.textContent);break;case"quadratic_attenuation":var s=parseFloat(a.textContent);t.distance=s?Math.sqrt(1/s):0}}return t}function V(e){var t;switch(e.technique){case"directional":t=new THREE.DirectionalLight;break;case"point":t=new THREE.PointLight;break;case"spot":t=new THREE.SpotLight;break;case"ambient":t=new THREE.AmbientLight}return e.parameters.color&&t.color.copy(e.parameters.color),e.parameters.distance&&(t.distance=e.parameters.distance),t}function G(e){return u(de.lights[e],V)}function k(e){for(var t={name:e.getAttribute("name"),sources:{},vertices:{},primitives:[]},n=r(e,"mesh")[0],i=0;i<n.childNodes.length;i++){var a=n.childNodes[i];if(1===a.nodeType){var o=a.getAttribute("id");switch(a.nodeName){case"source":t.sources[o]=z(a);break;case"vertices":t.vertices=j(a);break;case"polygons":console.log("ColladaLoader: Unsupported primitive type: ",a.nodeName);break;case"lines":case"linestrips":case"polylist":case"triangles":t.primitives.push(W(a));break;default:console.log(a)}}}de.geometries[e.getAttribute("id")]=t}function z(e){for(var t={array:[],stride:3},i=0;i<e.childNodes.length;i++){var a=e.childNodes[i];if(1===a.nodeType)switch(a.nodeName){case"float_array":t.array=n(a.textContent);break;case"technique_common":var o=r(a,"accessor")[0];void 0!==o&&(t.stride=parseInt(o.getAttribute("stride")));break;default:console.log(a)}}return t}function j(e){for(var t={},r=0;r<e.childNodes.length;r++){var n=e.childNodes[r];1===n.nodeType&&(t[n.getAttribute("semantic")]=a(n.getAttribute("source")))}return t}function W(e){for(var t={type:e.nodeName,material:e.getAttribute("material"),inputs:{},stride:0},r=0,n=e.childNodes.length;n>r;r++){var o=e.childNodes[r];if(1===o.nodeType)switch(o.nodeName){case"input":var s=a(o.getAttribute("source")),c=o.getAttribute("semantic"),l=parseInt(o.getAttribute("offset"));t.inputs[c]={id:s,offset:l},t.stride=Math.max(t.stride,l+1);break;case"vcount":t.vcount=i(o.textContent);break;case"p":t.p=i(o.textContent)}}return t}function X(e){var t={},r=e.sources,n=e.vertices,i=e.primitives;if(0===i.length)return t;for(var a=0;a<i.length;a++){var o=i[a],s=o.inputs,c=new THREE.BufferGeometry;e.name&&(c.name=e.name);for(var l in s){var h=s[l];switch(l){case"VERTEX":for(var u in n)c.addAttribute(u.toLowerCase(),q(o,r[n[u]],h.offset));break;case"NORMAL":c.addAttribute("normal",q(o,r[h.id],h.offset));break;case"COLOR":c.addAttribute("color",q(o,r[h.id],h.offset));break;case"TEXCOORD":c.addAttribute("uv",q(o,r[h.id],h.offset))}}var d;switch(o.type){case"lines":d=new THREE.LineSegments(c,ie);break;case"linestrips":d=new THREE.Line(c,ie);break;case"triangles":case"polylist":d=new THREE.Mesh(c,ae)}t[o.material]=d}return t}function q(e,t,r){function n(e){for(var t=i[e+r]*l,n=t+l;n>t;t++)h.push(c[t])}var i=e.p,a=e.stride,o=e.vcount,s=0,c=t.array,l=t.stride,h=[];if(void 0!==e.vcount){for(var u=0,d=0,p=o.length;p>d;d++){var f=o[d];if(4===f){var E=u+0*a,m=u+1*a,g=u+2*a,v=u+3*a;n(E),n(m),n(v),n(m),n(g),n(v)}else if(3===f){var E=u+0*a,m=u+1*a,g=u+2*a;n(E),n(m),n(g)}else s=Math.max(s,f);u+=a*f}s>0&&console.log("ColladaLoader: Geometry has faces with more than 4 vertices.")}else for(var d=0,p=i.length;p>d;d+=a)n(d);return new THREE.Float32Attribute(h,l)}function Y(e){return u(de.geometries[e],X)}function Z(e){for(var t={name:e.getAttribute("name"),matrix:new THREE.Matrix4,nodes:[],instanceCameras:[],instanceLights:[],instanceGeometries:[],instanceNodes:[]},r=0;r<e.childNodes.length;r++){var i=e.childNodes[r];if(1===i.nodeType)switch(i.nodeName){case"node":Z(i),t.nodes.push(i.getAttribute("id"));break;case"instance_camera":t.instanceCameras.push(a(i.getAttribute("url")));break;case"instance_light":t.instanceLights.push(a(i.getAttribute("url")));break;case"instance_geometry":t.instanceGeometries.push(K(i));break;case"instance_node":t.instanceNodes.push(a(i.getAttribute("url")));break;case"matrix":var o=n(i.textContent);t.matrix.multiply(oe.fromArray(o).transpose());break;case"translate":var o=n(i.textContent);se.fromArray(o),t.matrix.multiply(oe.makeTranslation(se.x,se.y,se.z));break;case"rotate":var o=n(i.textContent),s=THREE.Math.degToRad(o[3]);t.matrix.multiply(oe.makeRotationAxis(se.fromArray(o),s));break;case"scale":var o=n(i.textContent);t.matrix.scale(se.fromArray(o));break;case"extra":break;default:console.log(i)}}return null!==e.getAttribute("id")&&(de.nodes[e.getAttribute("id")]=t),t}function K(e){for(var t={id:a(e.getAttribute("url")),materials:{}},r=0;r<e.childNodes.length;r++){var n=e.childNodes[r];if("bind_material"===n.nodeName){for(var i=n.getElementsByTagName("instance_material"),o=0;o<i.length;o++){var s=i[o],c=s.getAttribute("symbol"),l=s.getAttribute("target");t.materials[c]=a(l)}break}}return t}function Q(e){for(var t=[],r=e.matrix,n=e.nodes,i=e.instanceCameras,a=e.instanceLights,o=e.instanceGeometries,s=e.instanceNodes,c=0,l=n.length;l>c;c++)t.push(J(n[c]).clone());for(var c=0,l=i.length;l>c;c++)t.push(O(i[c]).clone());for(var c=0,l=a.length;l>c;c++)t.push(G(a[c]).clone());for(var c=0,l=o.length;l>c;c++){var h=o[c],u=Y(h.id);for(var d in u){var p=u[d].clone();void 0!==h.materials[d]&&(p.material=L(h.materials[d])),t.push(p)}}for(var c=0,l=s.length;l>c;c++)t.push(J(s[c]).clone());var p;if(0===n.length&&1===t.length)p=t[0];else{p=new THREE.Group;for(var c=0;c<t.length;c++)p.add(t[c])}return p.name=e.name,r.decompose(p.position,p.quaternion,p.scale),p}function J(e){return u(de.nodes[e],Q)}function $(e){for(var t={name:e.getAttribute("name"),children:[]},n=r(e,"node"),i=0;i<n.length;i++)t.children.push(Z(n[i]));de.visualScenes[e.getAttribute("id")]=t}function ee(e){var t=new THREE.Group;t.name=e.name;for(var r=e.children,n=0;n<r.length;n++)t.add(Q(r[n]));return t}function te(e){return u(de.visualScenes[e],ee)}function re(e){var t=r(e,"instance_visual_scene")[0];return te(a(t.getAttribute("url")))}var ne=new THREE.ImageLoader;this.crossOrigin&&(ne.crossOrigin=this.crossOrigin);var ie=new THREE.LineBasicMaterial,ae=new THREE.MeshPhongMaterial,oe=new THREE.Matrix4,se=new THREE.Vector3;if(console.time("ColladaLoader"),0===e.length)return{scene:new THREE.Scene};console.time("ColladaLoader: DOMParser");var ce=(new DOMParser).parseFromString(e,"application/xml");console.timeEnd("ColladaLoader: DOMParser");var le=r(ce,"COLLADA")[0],he=le.getAttribute("version");console.log("ColladaLoader: File version",he);var ue=o(r(le,"asset")[0]),de={images:{},effects:{},materials:{},cameras:{},lights:{},geometries:{},nodes:{},visualScenes:{}};console.time("ColladaLoader: Parse"),l(le,"library_images","image",d),l(le,"library_effects","effect",E),l(le,"library_materials","material",S),l(le,"library_cameras","camera",C),l(le,"library_lights","light",U),l(le,"library_geometries","geometry",k),l(le,"library_nodes","node",Z),l(le,"library_visual_scenes","visual_scene",$),console.timeEnd("ColladaLoader: Parse"),console.time("ColladaLoader: Build"),h(de.images,p),h(de.effects,M),h(de.materials,A),h(de.cameras,D),h(de.lights,V),h(de.geometries,X),h(de.nodes,Q),h(de.visualScenes,ee),console.timeEnd("ColladaLoader: Build");var pe=re(r(le,"scene")[0]);return"Z_UP"===ue.upAxis&&(pe.rotation.x=-Math.PI/2),pe.scale.multiplyScalar(ue.unit),console.timeEnd("ColladaLoader"),{animations:[],kinematics:{joints:[]},scene:pe}}},THREE.OrbitControls=function(e,t){function r(){return 2*Math.PI/60/60*I.autoRotateSpeed}function n(){return Math.pow(.95,I.zoomSpeed)}function i(e){G.theta-=e}function a(e){G.phi-=e}function o(e){I.object instanceof THREE.PerspectiveCamera?k/=e:I.object instanceof THREE.OrthographicCamera?(I.object.zoom=Math.max(I.minZoom,Math.min(I.maxZoom,I.object.zoom*e)),I.object.updateProjectionMatrix(),j=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),I.enableZoom=!1)}function s(e){I.object instanceof THREE.PerspectiveCamera?k*=e:I.object instanceof THREE.OrthographicCamera?(I.object.zoom=Math.max(I.minZoom,Math.min(I.maxZoom,I.object.zoom/e)),I.object.updateProjectionMatrix(),j=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),I.enableZoom=!1)}function c(e){W.set(e.clientX,e.clientY)}function l(e){Q.set(e.clientX,e.clientY)}function h(e){Y.set(e.clientX,e.clientY)}function u(e){X.set(e.clientX,e.clientY),q.subVectors(X,W);var t=I.domElement===document?I.domElement.body:I.domElement;i(2*Math.PI*q.x/t.clientWidth*I.rotateSpeed),a(2*Math.PI*q.y/t.clientHeight*I.rotateSpeed),W.copy(X),I.update()}function d(e){J.set(e.clientX,e.clientY),$.subVectors(J,Q),$.y>0?o(n()):$.y<0&&s(n()),Q.copy(J),I.update()}function p(e){Z.set(e.clientX,e.clientY),K.subVectors(Z,Y),re(K.x,K.y),Y.copy(Z),I.update()}function f(e){}function E(e){var t=0;void 0!==e.wheelDelta?t=e.wheelDelta:void 0!==e.detail&&(t=-e.detail),t>0?s(n()):0>t&&o(n()),I.update()}function m(e){switch(e.keyCode){case I.keys.UP:re(0,I.keyPanSpeed),I.update();break;case I.keys.BOTTOM:re(0,-I.keyPanSpeed),I.update();break;case I.keys.LEFT:re(I.keyPanSpeed,0),I.update();break;case I.keys.RIGHT:re(-I.keyPanSpeed,0),I.update()}}function g(e){W.set(e.touches[0].pageX,e.touches[0].pageY)}function v(e){var t=e.touches[0].pageX-e.touches[1].pageX,r=e.touches[0].pageY-e.touches[1].pageY,n=Math.sqrt(t*t+r*r);Q.set(0,n)}function T(e){Y.set(e.touches[0].pageX,e.touches[0].pageY)}function y(e){X.set(e.touches[0].pageX,e.touches[0].pageY),q.subVectors(X,W);var t=I.domElement===document?I.domElement.body:I.domElement;i(2*Math.PI*q.x/t.clientWidth*I.rotateSpeed),a(2*Math.PI*q.y/t.clientHeight*I.rotateSpeed),W.copy(X),I.update()}function R(e){var t=e.touches[0].pageX-e.touches[1].pageX,r=e.touches[0].pageY-e.touches[1].pageY,i=Math.sqrt(t*t+r*r);J.set(0,i),$.subVectors(J,Q),$.y>0?s(n()):$.y<0&&o(n()),Q.copy(J),I.update()}function x(e){Z.set(e.touches[0].pageX,e.touches[0].pageY),K.subVectors(Z,Y),re(K.x,K.y),Y.copy(Z),I.update()}function H(e){}function b(e){if(I.enabled!==!1){if(e.preventDefault(),e.button===I.mouseButtons.ORBIT){if(I.enableRotate===!1)return;c(e),N=U.ROTATE}else if(e.button===I.mouseButtons.ZOOM){if(I.enableZoom===!1)return;l(e),N=U.DOLLY}else if(e.button===I.mouseButtons.PAN){if(I.enablePan===!1)return;h(e),N=U.PAN}N!==U.NONE&&(document.addEventListener("mousemove",_,!1),document.addEventListener("mouseup",M,!1),document.addEventListener("mouseout",M,!1),I.dispatchEvent(D))}}function _(e){if(I.enabled!==!1)if(e.preventDefault(),N===U.ROTATE){if(I.enableRotate===!1)return;u(e)}else if(N===U.DOLLY){if(I.enableZoom===!1)return;d(e)}else if(N===U.PAN){if(I.enablePan===!1)return;p(e)}}function M(e){I.enabled!==!1&&(f(e),document.removeEventListener("mousemove",_,!1),document.removeEventListener("mouseup",M,!1),document.removeEventListener("mouseout",M,!1),I.dispatchEvent(O),N=U.NONE)}function w(e){I.enabled===!1||I.enableZoom===!1||N!==U.NONE&&N!==U.ROTATE||(e.preventDefault(),e.stopPropagation(),E(e),I.dispatchEvent(D),I.dispatchEvent(O))}function S(e){I.enabled!==!1&&I.enableKeys!==!1&&I.enablePan!==!1&&m(e)}function A(e){if(I.enabled!==!1){switch(e.touches.length){case 1:if(I.enableRotate===!1)return;g(e),N=U.TOUCH_ROTATE;break;case 2:if(I.enableZoom===!1)return;v(e),N=U.TOUCH_DOLLY;break;case 3:if(I.enablePan===!1)return;T(e),N=U.TOUCH_PAN;break;default:N=U.NONE}N!==U.NONE&&I.dispatchEvent(D)}}function L(e){if(I.enabled!==!1)switch(e.preventDefault(),e.stopPropagation(),e.touches.length){case 1:if(I.enableRotate===!1)return;if(N!==U.TOUCH_ROTATE)return;y(e);break;case 2:if(I.enableZoom===!1)return;if(N!==U.TOUCH_DOLLY)return;R(e);break;case 3:if(I.enablePan===!1)return;if(N!==U.TOUCH_PAN)return;x(e);break;default:N=U.NONE}}function C(e){I.enabled!==!1&&(H(e),I.dispatchEvent(O),N=U.NONE)}function P(e){e.preventDefault()}this.object=e,this.domElement=void 0!==t?t:document,this.enabled=!0,this.target=new THREE.Vector3,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-(1/0),this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.25,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.enableKeys=!0,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40},this.mouseButtons={ORBIT:THREE.MOUSE.LEFT,ZOOM:THREE.MOUSE.MIDDLE,PAN:THREE.MOUSE.RIGHT},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this.getPolarAngle=function(){return V.phi},this.getAzimuthalAngle=function(){return V.theta},this.reset=function(){I.target.copy(I.target0),I.object.position.copy(I.position0),I.object.zoom=I.zoom0,I.object.updateProjectionMatrix(),I.dispatchEvent(B),I.update(),N=U.NONE},this.update=function(){var t=new THREE.Vector3,n=(new THREE.Quaternion).setFromUnitVectors(e.up,new THREE.Vector3(0,1,0)),a=n.clone().inverse(),o=new THREE.Vector3,s=new THREE.Quaternion;return function(){var e=I.object.position;return t.copy(e).sub(I.target),t.applyQuaternion(n),V.setFromVector3(t),I.autoRotate&&N===U.NONE&&i(r()),V.theta+=G.theta,V.phi+=G.phi,V.theta=Math.max(I.minAzimuthAngle,Math.min(I.maxAzimuthAngle,V.theta)),V.phi=Math.max(I.minPolarAngle,Math.min(I.maxPolarAngle,V.phi)),V.makeSafe(),V.radius*=k,V.radius=Math.max(I.minDistance,Math.min(I.maxDistance,V.radius)),I.target.add(z),t.setFromSpherical(V),t.applyQuaternion(a),e.copy(I.target).add(t),I.object.lookAt(I.target),I.enableDamping===!0?(G.theta*=1-I.dampingFactor,G.phi*=1-I.dampingFactor):G.set(0,0,0),k=1,z.set(0,0,0),j||o.distanceToSquared(I.object.position)>F||8*(1-s.dot(I.object.quaternion))>F?(I.dispatchEvent(B),o.copy(I.object.position),s.copy(I.object.quaternion),j=!1,!0):!1}}(),this.dispose=function(){I.domElement.removeEventListener("contextmenu",P,!1),I.domElement.removeEventListener("mousedown",b,!1),I.domElement.removeEventListener("mousewheel",w,!1),I.domElement.removeEventListener("MozMousePixelScroll",w,!1),I.domElement.removeEventListener("touchstart",A,!1),I.domElement.removeEventListener("touchend",C,!1),I.domElement.removeEventListener("touchmove",L,!1),document.removeEventListener("mousemove",_,!1),document.removeEventListener("mouseup",M,!1),document.removeEventListener("mouseout",M,!1),window.removeEventListener("keydown",S,!1)};var I=this,B={type:"change"},D={type:"start"},O={type:"end"},U={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_DOLLY:4,TOUCH_PAN:5},N=U.NONE,F=1e-6,V=new THREE.Spherical,G=new THREE.Spherical,k=1,z=new THREE.Vector3,j=!1,W=new THREE.Vector2,X=new THREE.Vector2,q=new THREE.Vector2,Y=new THREE.Vector2,Z=new THREE.Vector2,K=new THREE.Vector2,Q=new THREE.Vector2,J=new THREE.Vector2,$=new THREE.Vector2,ee=function(){var e=new THREE.Vector3;return function(t,r){e.setFromMatrixColumn(r,0),e.multiplyScalar(-t),z.add(e)}}(),te=function(){var e=new THREE.Vector3;return function(t,r){e.setFromMatrixColumn(r,1),e.multiplyScalar(t),z.add(e)}}(),re=function(){var e=new THREE.Vector3;return function(t,r){var n=I.domElement===document?I.domElement.body:I.domElement;if(I.object instanceof THREE.PerspectiveCamera){var i=I.object.position;e.copy(i).sub(I.target);var a=e.length();a*=Math.tan(I.object.fov/2*Math.PI/180),ee(2*t*a/n.clientHeight,I.object.matrix),te(2*r*a/n.clientHeight,I.object.matrix)}else I.object instanceof THREE.OrthographicCamera?(ee(t*(I.object.right-I.object.left)/I.object.zoom/n.clientWidth,I.object.matrix),te(r*(I.object.top-I.object.bottom)/I.object.zoom/n.clientHeight,I.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),I.enablePan=!1)}}();I.domElement.addEventListener("contextmenu",P,!1),I.domElement.addEventListener("mousedown",b,!1),I.domElement.addEventListener("mousewheel",w,!1),I.domElement.addEventListener("MozMousePixelScroll",w,!1),I.domElement.addEventListener("touchstart",A,!1),I.domElement.addEventListener("touchend",C,!1),I.domElement.addEventListener("touchmove",L,!1),window.addEventListener("keydown",S,!1),this.update()},THREE.OrbitControls.prototype=Object.create(THREE.EventDispatcher.prototype),THREE.OrbitControls.prototype.constructor=THREE.OrbitControls,Object.defineProperties(THREE.OrbitControls.prototype,{center:{get:function(){return console.warn("THREE.OrbitControls: .center has been renamed to .target"),this.target}},noZoom:{get:function(){return console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),!this.enableZoom},set:function(e){console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),this.enableZoom=!e}},noRotate:{get:function(){return console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),!this.enableRotate},set:function(e){console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),this.enableRotate=!e}},noPan:{get:function(){return console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),!this.enablePan},set:function(e){console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),this.enablePan=!e}},noKeys:{get:function(){return console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),!this.enableKeys},set:function(e){console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),this.enableKeys=!e}},staticMoving:{get:function(){return console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),!this.enableDamping},set:function(e){console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),this.enableDamping=!e}},dynamicDampingFactor:{get:function(){return console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.dampingFactor},set:function(e){console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.dampingFactor=e}}}),function(){if("performance"in window==!1&&(window.performance={}),Date.now=Date.now||function(){return(new Date).getTime()},"now"in window.performance==!1){var e=window.performance.timing&&window.performance.timing.navigationStart?window.performance.timing.navigationStart:Date.now();window.performance.now=function(){return Date.now()-e}}}();var TWEEN=TWEEN||function(){var e=[];return{getAll:function(){return e},removeAll:function(){e=[]},add:function(t){e.push(t)},remove:function(t){var r=e.indexOf(t);-1!==r&&e.splice(r,1)},update:function(t){if(0===e.length)return!1;var r=0;for(t=void 0!==t?t:window.performance.now();r<e.length;)e[r].update(t)?r++:e.splice(r,1);return!0}}}();TWEEN.Tween=function(e){var t=e,r={},n={},i={},a=1e3,o=0,s=!1,c=!1,l=!1,h=0,u=null,d=TWEEN.Easing.Linear.None,p=TWEEN.Interpolation.Linear,f=[],E=null,m=!1,g=null,v=null,T=null;for(var y in e)r[y]=parseFloat(e[y],10);this.to=function(e,t){return void 0!==t&&(a=t),n=e,this},this.start=function(e){TWEEN.add(this),c=!0,m=!1,u=void 0!==e?e:window.performance.now(),u+=h;for(var a in n){if(n[a]instanceof Array){if(0===n[a].length)continue;n[a]=[t[a]].concat(n[a])}void 0!==r[a]&&(r[a]=t[a],r[a]instanceof Array==!1&&(r[a]*=1),i[a]=r[a]||0)}return this},this.stop=function(){return c?(TWEEN.remove(this),c=!1,null!==T&&T.call(t),this.stopChainedTweens(),this):this},this.stopChainedTweens=function(){for(var e=0,t=f.length;t>e;e++)f[e].stop()},this.delay=function(e){return h=e,this},this.repeat=function(e){return o=e,this},this.yoyo=function(e){return s=e,this},this.easing=function(e){return d=e,this},this.interpolation=function(e){return p=e,this},this.chain=function(){return f=arguments,this},this.onStart=function(e){return E=e,this},this.onUpdate=function(e){return g=e,this},this.onComplete=function(e){return v=e,this},this.onStop=function(e){return T=e,this},this.update=function(e){var c,T,y;if(u>e)return!0;m===!1&&(null!==E&&E.call(t),m=!0),T=(e-u)/a,T=T>1?1:T,y=d(T);for(c in n)if(void 0!==r[c]){var R=r[c]||0,x=n[c];x instanceof Array?t[c]=p(x,y):("string"==typeof x&&(x=x.startsWith("+")||x.startsWith("-")?R+parseFloat(x,10):parseFloat(x,10)),"number"==typeof x&&(t[c]=R+(x-R)*y))}if(null!==g&&g.call(t,y),1===T){if(o>0){isFinite(o)&&o--;for(c in i){if("string"==typeof n[c]&&(i[c]=i[c]+parseFloat(n[c],10)),s){var H=i[c];i[c]=n[c],n[c]=H}r[c]=i[c]}return s&&(l=!l),u=e+h,!0}null!==v&&v.call(t);for(var b=0,_=f.length;_>b;b++)f[b].start(u+a);return!1}return!0}},TWEEN.Easing={Linear:{None:function(e){return e}},Quadratic:{In:function(e){return e*e},Out:function(e){return e*(2-e)},InOut:function(e){return(e*=2)<1?.5*e*e:-.5*(--e*(e-2)-1)}},Cubic:{In:function(e){return e*e*e},Out:function(e){return--e*e*e+1},InOut:function(e){return(e*=2)<1?.5*e*e*e:.5*((e-=2)*e*e+2)}},Quartic:{In:function(e){return e*e*e*e},Out:function(e){return 1- --e*e*e*e},InOut:function(e){return(e*=2)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2)}},Quintic:{In:function(e){return e*e*e*e*e},Out:function(e){return--e*e*e*e*e+1},InOut:function(e){return(e*=2)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2)}},Sinusoidal:{In:function(e){return 1-Math.cos(e*Math.PI/2)},Out:function(e){return Math.sin(e*Math.PI/2)},InOut:function(e){return.5*(1-Math.cos(Math.PI*e))}},Exponential:{In:function(e){return 0===e?0:Math.pow(1024,e-1)},Out:function(e){return 1===e?1:1-Math.pow(2,-10*e)},InOut:function(e){return 0===e?0:1===e?1:(e*=2)<1?.5*Math.pow(1024,e-1):.5*(-Math.pow(2,-10*(e-1))+2)}},Circular:{In:function(e){return 1-Math.sqrt(1-e*e)},Out:function(e){return Math.sqrt(1- --e*e)},InOut:function(e){return(e*=2)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1)}},Elastic:{In:function(e){var t,r=.1,n=.4;return 0===e?0:1===e?1:(!r||1>r?(r=1,t=n/4):t=n*Math.asin(1/r)/(2*Math.PI),-(r*Math.pow(2,10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/n)))},Out:function(e){var t,r=.1,n=.4;return 0===e?0:1===e?1:(!r||1>r?(r=1,t=n/4):t=n*Math.asin(1/r)/(2*Math.PI),r*Math.pow(2,-10*e)*Math.sin((e-t)*(2*Math.PI)/n)+1)},InOut:function(e){var t,r=.1,n=.4;return 0===e?0:1===e?1:(!r||1>r?(r=1,t=n/4):t=n*Math.asin(1/r)/(2*Math.PI),(e*=2)<1?-.5*(r*Math.pow(2,10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/n)):r*Math.pow(2,-10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/n)*.5+1)}},Back:{In:function(e){var t=1.70158;return e*e*((t+1)*e-t)},Out:function(e){var t=1.70158;return--e*e*((t+1)*e+t)+1},InOut:function(e){var t=2.5949095;return(e*=2)<1?.5*(e*e*((t+1)*e-t)):.5*((e-=2)*e*((t+1)*e+t)+2)}},Bounce:{In:function(e){return 1-TWEEN.Easing.Bounce.Out(1-e)},Out:function(e){return 1/2.75>e?7.5625*e*e:2/2.75>e?7.5625*(e-=1.5/2.75)*e+.75:2.5/2.75>e?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},InOut:function(e){return.5>e?.5*TWEEN.Easing.Bounce.In(2*e):.5*TWEEN.Easing.Bounce.Out(2*e-1)+.5}}},TWEEN.Interpolation={Linear:function(e,t){var r=e.length-1,n=r*t,i=Math.floor(n),a=TWEEN.Interpolation.Utils.Linear;return 0>t?a(e[0],e[1],n):t>1?a(e[r],e[r-1],r-n):a(e[i],e[i+1>r?r:i+1],n-i)},Bezier:function(e,t){for(var r=0,n=e.length-1,i=Math.pow,a=TWEEN.Interpolation.Utils.Bernstein,o=0;n>=o;o++)r+=i(1-t,n-o)*i(t,o)*e[o]*a(n,o);return r},CatmullRom:function(e,t){var r=e.length-1,n=r*t,i=Math.floor(n),a=TWEEN.Interpolation.Utils.CatmullRom;return e[0]===e[r]?(0>t&&(i=Math.floor(n=r*(1+t))),a(e[(i-1+r)%r],e[i],e[(i+1)%r],e[(i+2)%r],n-i)):0>t?e[0]-(a(e[0],e[0],e[1],e[1],-n)-e[0]):t>1?e[r]-(a(e[r],e[r],e[r-1],e[r-1],n-r)-e[r]):a(e[i?i-1:0],e[i],e[i+1>r?r:i+1],e[i+2>r?r:i+2],n-i)},Utils:{Linear:function(e,t,r){return(t-e)*r+e},Bernstein:function(e,t){var r=TWEEN.Interpolation.Utils.Factorial;return r(e)/r(t)/r(e-t)},Factorial:function(){var e=[1];return function(t){var r=1;if(e[t])return e[t];for(var n=t;n>1;n--)r*=n;return e[t]=r,r}}(),CatmullRom:function(e,t,r,n,i){var a=.5*(r-e),o=.5*(n-t),s=i*i,c=i*s;return(2*t-2*r+a+o)*c+(-3*t+3*r-2*a-o)*s+a*i+t}}},function(e){"function"==typeof define&&define.amd?define([],function(){return TWEEN}):"undefined"!=typeof module&&"object"==typeof exports?module.exports=TWEEN:void 0!==e&&(e.TWEEN=TWEEN)}(this),function(e,t,r){"use strict";!function n(e,t,r){function i(o,s){if(!t[o]){if(!e[o]){var c="function"==typeof require&&require;if(!s&&c)return c(o,!0);if(a)return a(o,!0);var l=new Error("Cannot find module '"+o+"'");throw l.code="MODULE_NOT_FOUND",l}var h=t[o]={exports:{}};e[o][0].call(h.exports,function(t){var r=e[o][1][t];return i(r?r:t)},h,h.exports,n,e,t,r)}return t[o].exports}for(var a="function"==typeof require&&require,o=0;o<r.length;o++)i(r[o]);return i}({1:[function(n,i,a){var o=function(e){return e&&e.__esModule?e:{"default":e}};Object.defineProperty(a,"__esModule",{value:!0});var s,c,l,h,u=n("./modules/handle-dom"),d=n("./modules/utils"),p=n("./modules/handle-swal-dom"),f=n("./modules/handle-click"),E=n("./modules/handle-key"),m=o(E),g=n("./modules/default-params"),v=o(g),T=n("./modules/set-params"),y=o(T);a["default"]=l=h=function(){function n(e){var t=i;return t[e]===r?v["default"][e]:t[e]}var i=arguments[0];if(u.addClass(t.body,"stop-scrolling"),p.resetInput(),i===r)return d.logStr("SweetAlert expects at least 1 attribute!"),!1;var a=d.extend({},v["default"]);switch(typeof i){case"string":a.title=i,a.text=arguments[1]||"",a.type=arguments[2]||"";break;case"object":if(i.title===r)return d.logStr('Missing "title" argument!'),!1;a.title=i.title;for(var o in v["default"])a[o]=n(o);a.confirmButtonText=a.showCancelButton?"Confirm":v["default"].confirmButtonText,a.confirmButtonText=n("confirmButtonText"),a.doneFunction=arguments[1]||null;break;default:return d.logStr('Unexpected type of argument! Expected "string" or "object", got '+typeof i),!1}y["default"](a),p.fixVerticalPosition(),p.openModal(arguments[1]);for(var l=p.getModal(),E=l.querySelectorAll("button"),g=["onclick","onmouseover","onmouseout","onmousedown","onmouseup","onfocus"],T=function(e){return f.handleButton(e,a,l)},R=0;R<E.length;R++)for(var x=0;x<g.length;x++){var H=g[x];E[R][H]=T}p.getOverlay().onclick=T,s=e.onkeydown;var b=function(e){return m["default"](e,a,l)};e.onkeydown=b,e.onfocus=function(){setTimeout(function(){c!==r&&(c.focus(),c=r)},0)},h.enableButtons()},l.setDefaults=h.setDefaults=function(e){if(!e)throw new Error("userParams is required");if("object"!=typeof e)throw new Error("userParams has to be a object");d.extend(v["default"],e)},l.close=h.close=function(){var n=p.getModal();u.fadeOut(p.getOverlay(),5),u.fadeOut(n,5),u.removeClass(n,"showSweetAlert"),u.addClass(n,"hideSweetAlert"),u.removeClass(n,"visible");var i=n.querySelector(".sa-icon.sa-success");u.removeClass(i,"animate"),u.removeClass(i.querySelector(".sa-tip"),"animateSuccessTip"),u.removeClass(i.querySelector(".sa-long"),"animateSuccessLong");var a=n.querySelector(".sa-icon.sa-error");u.removeClass(a,"animateErrorIcon"),u.removeClass(a.querySelector(".sa-x-mark"),"animateXMark");var o=n.querySelector(".sa-icon.sa-warning");return u.removeClass(o,"pulseWarning"),u.removeClass(o.querySelector(".sa-body"),"pulseWarningIns"),u.removeClass(o.querySelector(".sa-dot"),"pulseWarningIns"),setTimeout(function(){var e=n.getAttribute("data-custom-class");u.removeClass(n,e)},300),u.removeClass(t.body,"stop-scrolling"),e.onkeydown=s,e.previousActiveElement&&e.previousActiveElement.focus(),c=r,clearTimeout(n.timeout),!0},l.showInputError=h.showInputError=function(e){var t=p.getModal(),r=t.querySelector(".sa-input-error");u.addClass(r,"show");var n=t.querySelector(".sa-error-container");u.addClass(n,"show"),n.querySelector("p").innerHTML=e,setTimeout(function(){l.enableButtons()},1),t.querySelector("input").focus()},l.resetInputError=h.resetInputError=function(e){if(e&&13===e.keyCode)return!1;var t=p.getModal(),r=t.querySelector(".sa-input-error");u.removeClass(r,"show");var n=t.querySelector(".sa-error-container");u.removeClass(n,"show")},l.disableButtons=h.disableButtons=function(e){var t=p.getModal(),r=t.querySelector("button.confirm"),n=t.querySelector("button.cancel");r.disabled=!0,n.disabled=!0},l.enableButtons=h.enableButtons=function(e){var t=p.getModal(),r=t.querySelector("button.confirm"),n=t.querySelector("button.cancel");r.disabled=!1,n.disabled=!1},"undefined"!=typeof e?e.sweetAlert=e.swal=l:d.logStr("SweetAlert is a frontend module!"),
i.exports=a["default"]},{"./modules/default-params":2,"./modules/handle-click":3,"./modules/handle-dom":4,"./modules/handle-key":5,"./modules/handle-swal-dom":6,"./modules/set-params":8,"./modules/utils":9}],2:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});var n={title:"",text:"",type:null,allowOutsideClick:!1,showConfirmButton:!0,showCancelButton:!1,closeOnConfirm:!0,closeOnCancel:!0,confirmButtonText:"OK",confirmButtonColor:"#8CD4F5",cancelButtonText:"Cancel",imageUrl:null,imageSize:null,timer:null,customClass:"",html:!1,animation:!0,allowEscapeKey:!0,inputType:"text",inputPlaceholder:"",inputValue:"",showLoaderOnConfirm:!1};r["default"]=n,t.exports=r["default"]},{}],3:[function(t,r,n){Object.defineProperty(n,"__esModule",{value:!0});var i=t("./utils"),a=(t("./handle-swal-dom"),t("./handle-dom")),o=function(t,r,n){function o(e){f&&r.confirmButtonColor&&(p.style.backgroundColor=e)}var l,h,u,d=t||e.event,p=d.target||d.srcElement,f=-1!==p.className.indexOf("confirm"),E=-1!==p.className.indexOf("sweet-overlay"),m=a.hasClass(n,"visible"),g=r.doneFunction&&"true"===n.getAttribute("data-has-done-function");switch(f&&r.confirmButtonColor&&(l=r.confirmButtonColor,h=i.colorLuminance(l,-.04),u=i.colorLuminance(l,-.14)),d.type){case"mouseover":o(h);break;case"mouseout":o(l);break;case"mousedown":o(u);break;case"mouseup":o(h);break;case"focus":var v=n.querySelector("button.confirm"),T=n.querySelector("button.cancel");f?T.style.boxShadow="none":v.style.boxShadow="none";break;case"click":var y=n===p,R=a.isDescendant(n,p);if(!y&&!R&&m&&!r.allowOutsideClick)break;f&&g&&m?s(n,r):g&&m||E?c(n,r):a.isDescendant(n,p)&&"BUTTON"===p.tagName&&sweetAlert.close()}},s=function(e,t){var r=!0;a.hasClass(e,"show-input")&&(r=e.querySelector("input").value,r||(r="")),t.doneFunction(r),t.closeOnConfirm&&sweetAlert.close(),t.showLoaderOnConfirm&&sweetAlert.disableButtons()},c=function(e,t){var r=String(t.doneFunction).replace(/\s/g,""),n="function("===r.substring(0,9)&&")"!==r.substring(9,10);n&&t.doneFunction(!1),t.closeOnCancel&&sweetAlert.close()};n["default"]={handleButton:o,handleConfirm:s,handleCancel:c},r.exports=n["default"]},{"./handle-dom":4,"./handle-swal-dom":6,"./utils":9}],4:[function(r,n,i){Object.defineProperty(i,"__esModule",{value:!0});var a=function(e,t){return new RegExp(" "+t+" ").test(" "+e.className+" ")},o=function(e,t){a(e,t)||(e.className+=" "+t)},s=function(e,t){var r=" "+e.className.replace(/[\t\r\n]/g," ")+" ";if(a(e,t)){for(;r.indexOf(" "+t+" ")>=0;)r=r.replace(" "+t+" "," ");e.className=r.replace(/^\s+|\s+$/g,"")}},c=function(e){var r=t.createElement("div");return r.appendChild(t.createTextNode(e)),r.innerHTML},l=function(e){e.style.opacity="",e.style.display="block"},h=function(e){if(e&&!e.length)return l(e);for(var t=0;t<e.length;++t)l(e[t])},u=function(e){e.style.opacity="",e.style.display="none"},d=function(e){if(e&&!e.length)return u(e);for(var t=0;t<e.length;++t)u(e[t])},p=function(e,t){for(var r=t.parentNode;null!==r;){if(r===e)return!0;r=r.parentNode}return!1},f=function(e){e.style.left="-9999px",e.style.display="block";var t,r=e.clientHeight;return t="undefined"!=typeof getComputedStyle?parseInt(getComputedStyle(e).getPropertyValue("padding-top"),10):parseInt(e.currentStyle.padding),e.style.left="",e.style.display="none","-"+parseInt((r+t)/2)+"px"},E=function(e,t){if(+e.style.opacity<1){t=t||16,e.style.opacity=0,e.style.display="block";var r=+new Date,n=function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){e.style.opacity=+e.style.opacity+(new Date-r)/100,r=+new Date,+e.style.opacity<1&&setTimeout(n,t)});n()}e.style.display="block"},m=function(e,t){t=t||16,e.style.opacity=1;var r=+new Date,n=function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){e.style.opacity=+e.style.opacity-(new Date-r)/100,r=+new Date,+e.style.opacity>0?setTimeout(n,t):e.style.display="none"});n()},g=function(r){if("function"==typeof MouseEvent){var n=new MouseEvent("click",{view:e,bubbles:!1,cancelable:!0});r.dispatchEvent(n)}else if(t.createEvent){var i=t.createEvent("MouseEvents");i.initEvent("click",!1,!1),r.dispatchEvent(i)}else t.createEventObject?r.fireEvent("onclick"):"function"==typeof r.onclick&&r.onclick()},v=function(t){"function"==typeof t.stopPropagation?(t.stopPropagation(),t.preventDefault()):e.event&&e.event.hasOwnProperty("cancelBubble")&&(e.event.cancelBubble=!0)};i.hasClass=a,i.addClass=o,i.removeClass=s,i.escapeHtml=c,i._show=l,i.show=h,i._hide=u,i.hide=d,i.isDescendant=p,i.getTopMargin=f,i.fadeIn=E,i.fadeOut=m,i.fireClick=g,i.stopEventPropagation=v},{}],5:[function(t,n,i){Object.defineProperty(i,"__esModule",{value:!0});var a=t("./handle-dom"),o=t("./handle-swal-dom"),s=function(t,n,i){var s=t||e.event,c=s.keyCode||s.which,l=i.querySelector("button.confirm"),h=i.querySelector("button.cancel"),u=i.querySelectorAll("button[tabindex]");if(-1!==[9,13,32,27].indexOf(c)){for(var d=s.target||s.srcElement,p=-1,f=0;f<u.length;f++)if(d===u[f]){p=f;break}9===c?(d=-1===p?l:p===u.length-1?u[0]:u[p+1],a.stopEventPropagation(s),d.focus(),n.confirmButtonColor&&o.setFocusStyle(d,n.confirmButtonColor)):13===c?("INPUT"===d.tagName&&(d=l,l.focus()),d=-1===p?l:r):27===c&&n.allowEscapeKey===!0?(d=h,a.fireClick(d,s)):d=r}};i["default"]=s,n.exports=i["default"]},{"./handle-dom":4,"./handle-swal-dom":6}],6:[function(r,n,i){var a=function(e){return e&&e.__esModule?e:{"default":e}};Object.defineProperty(i,"__esModule",{value:!0});var o=r("./utils"),s=r("./handle-dom"),c=r("./default-params"),l=a(c),h=r("./injected-html"),u=a(h),d=".sweet-alert",p=".sweet-overlay",f=function(){var e=t.createElement("div");for(e.innerHTML=u["default"];e.firstChild;)t.body.appendChild(e.firstChild)},E=function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){var e=t.querySelector(d);return e||(f(),e=E()),e}),m=function(){var e=E();return e?e.querySelector("input"):void 0},g=function(){return t.querySelector(p)},v=function(e,t){var r=o.hexToRgb(t);e.style.boxShadow="0 0 2px rgba("+r+", 0.8), inset 0 0 0 1px rgba(0, 0, 0, 0.05)"},T=function(r){var n=E();s.fadeIn(g(),10),s.show(n),s.addClass(n,"showSweetAlert"),s.removeClass(n,"hideSweetAlert"),e.previousActiveElement=t.activeElement;var i=n.querySelector("button.confirm");i.focus(),setTimeout(function(){s.addClass(n,"visible")},500);var a=n.getAttribute("data-timer");if("null"!==a&&""!==a){var o=r;n.timeout=setTimeout(function(){var e=(o||null)&&"true"===n.getAttribute("data-has-done-function");e?o(null):sweetAlert.close()},a)}},y=function(){var e=E(),t=m();s.removeClass(e,"show-input"),t.value=l["default"].inputValue,t.setAttribute("type",l["default"].inputType),t.setAttribute("placeholder",l["default"].inputPlaceholder),R()},R=function(e){if(e&&13===e.keyCode)return!1;var t=E(),r=t.querySelector(".sa-input-error");s.removeClass(r,"show");var n=t.querySelector(".sa-error-container");s.removeClass(n,"show")},x=function(){var e=E();e.style.marginTop=s.getTopMargin(E())};i.sweetAlertInitialize=f,i.getModal=E,i.getOverlay=g,i.getInput=m,i.setFocusStyle=v,i.openModal=T,i.resetInput=y,i.resetInputError=R,i.fixVerticalPosition=x},{"./default-params":2,"./handle-dom":4,"./injected-html":7,"./utils":9}],7:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});var n='<div class="sweet-overlay" tabIndex="-1"></div><div class="sweet-alert"><div class="sa-icon sa-error">\n      <span class="sa-x-mark">\n        <span class="sa-line sa-left"></span>\n        <span class="sa-line sa-right"></span>\n      </span>\n    </div><div class="sa-icon sa-warning">\n      <span class="sa-body"></span>\n      <span class="sa-dot"></span>\n    </div><div class="sa-icon sa-info"></div><div class="sa-icon sa-success">\n      <span class="sa-line sa-tip"></span>\n      <span class="sa-line sa-long"></span>\n\n      <div class="sa-placeholder"></div>\n      <div class="sa-fix"></div>\n    </div><div class="sa-icon sa-custom"></div><h2>Title</h2>\n    <p>Text</p>\n    <fieldset>\n      <input type="text" tabIndex="3" />\n      <div class="sa-input-error"></div>\n    </fieldset><div class="sa-error-container">\n      <div class="icon">!</div>\n      <p>Not valid!</p>\n    </div><div class="sa-button-container">\n      <button class="cancel" tabIndex="2">Cancel</button>\n      <div class="sa-confirm-button-container">\n        <button class="confirm" tabIndex="1">OK</button><div class="la-ball-fall">\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n      </div>\n    </div></div>';r["default"]=n,t.exports=r["default"]},{}],8:[function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0});var i=e("./utils"),a=e("./handle-swal-dom"),o=e("./handle-dom"),s=["error","warning","info","success","input","prompt"],c=function(e){var t=a.getModal(),n=t.querySelector("h2"),c=t.querySelector("p"),l=t.querySelector("button.cancel"),h=t.querySelector("button.confirm");if(n.innerHTML=e.html?e.title:o.escapeHtml(e.title).split("\n").join("<br>"),c.innerHTML=e.html?e.text:o.escapeHtml(e.text||"").split("\n").join("<br>"),e.text&&o.show(c),e.customClass)o.addClass(t,e.customClass),t.setAttribute("data-custom-class",e.customClass);else{var u=t.getAttribute("data-custom-class");o.removeClass(t,u),t.setAttribute("data-custom-class","")}if(o.hide(t.querySelectorAll(".sa-icon")),e.type&&!i.isIE8()){var d=function(){for(var n=!1,i=0;i<s.length;i++)if(e.type===s[i]){n=!0;break}if(!n)return logStr("Unknown alert type: "+e.type),{v:!1};var c=["success","error","warning","info"],l=r;-1!==c.indexOf(e.type)&&(l=t.querySelector(".sa-icon.sa-"+e.type),o.show(l));var h=a.getInput();switch(e.type){case"success":o.addClass(l,"animate"),o.addClass(l.querySelector(".sa-tip"),"animateSuccessTip"),o.addClass(l.querySelector(".sa-long"),"animateSuccessLong");break;case"error":o.addClass(l,"animateErrorIcon"),o.addClass(l.querySelector(".sa-x-mark"),"animateXMark");break;case"warning":o.addClass(l,"pulseWarning"),o.addClass(l.querySelector(".sa-body"),"pulseWarningIns"),o.addClass(l.querySelector(".sa-dot"),"pulseWarningIns");break;case"input":case"prompt":h.setAttribute("type",e.inputType),h.value=e.inputValue,h.setAttribute("placeholder",e.inputPlaceholder),o.addClass(t,"show-input"),setTimeout(function(){h.focus(),h.addEventListener("keyup",swal.resetInputError)},400)}}();if("object"==typeof d)return d.v}if(e.imageUrl){var p=t.querySelector(".sa-icon.sa-custom");p.style.backgroundImage="url("+e.imageUrl+")",o.show(p);var f=80,E=80;if(e.imageSize){var m=e.imageSize.toString().split("x"),g=m[0],v=m[1];g&&v?(f=g,E=v):logStr("Parameter imageSize expects value with format WIDTHxHEIGHT, got "+e.imageSize)}p.setAttribute("style",p.getAttribute("style")+"width:"+f+"px; height:"+E+"px")}t.setAttribute("data-has-cancel-button",e.showCancelButton),e.showCancelButton?l.style.display="inline-block":o.hide(l),t.setAttribute("data-has-confirm-button",e.showConfirmButton),e.showConfirmButton?h.style.display="inline-block":o.hide(h),e.cancelButtonText&&(l.innerHTML=o.escapeHtml(e.cancelButtonText)),e.confirmButtonText&&(h.innerHTML=o.escapeHtml(e.confirmButtonText)),e.confirmButtonColor&&(h.style.backgroundColor=e.confirmButtonColor,h.style.borderLeftColor=e.confirmLoadingButtonColor,h.style.borderRightColor=e.confirmLoadingButtonColor,a.setFocusStyle(h,e.confirmButtonColor)),t.setAttribute("data-allow-outside-click",e.allowOutsideClick);var T=!!e.doneFunction;t.setAttribute("data-has-done-function",T),e.animation?"string"==typeof e.animation?t.setAttribute("data-animation",e.animation):t.setAttribute("data-animation","pop"):t.setAttribute("data-animation","none"),t.setAttribute("data-timer",e.timer)};n["default"]=c,t.exports=n["default"]},{"./handle-dom":4,"./handle-swal-dom":6,"./utils":9}],9:[function(t,r,n){Object.defineProperty(n,"__esModule",{value:!0});var i=function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);return e},a=function(e){var t=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);return t?parseInt(t[1],16)+", "+parseInt(t[2],16)+", "+parseInt(t[3],16):null},o=function(){return e.attachEvent&&!e.addEventListener},s=function(t){e.console&&e.console.log("SweetAlert: "+t)},c=function(e,t){e=String(e).replace(/[^0-9a-f]/gi,""),e.length<6&&(e=e[0]+e[0]+e[1]+e[1]+e[2]+e[2]),t=t||0;var r,n,i="#";for(n=0;3>n;n++)r=parseInt(e.substr(2*n,2),16),r=Math.round(Math.min(Math.max(0,r+r*t),255)).toString(16),i+=("00"+r).substr(r.length);return i};n.extend=i,n.hexToRgb=a,n.isIE8=o,n.logStr=s,n.colorLuminance=c},{}]},{},[1]),"function"==typeof define&&define.amd?define(function(){return sweetAlert}):"undefined"!=typeof module&&module.exports&&(module.exports=sweetAlert)}(window,document);
//# sourceMappingURL=data:application/json;base64,
